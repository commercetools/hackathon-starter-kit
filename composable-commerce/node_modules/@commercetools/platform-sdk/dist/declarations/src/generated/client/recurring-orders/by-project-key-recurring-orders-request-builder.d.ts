/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
import { RecurringOrder, RecurringOrderDraft, RecurringOrderPagedQueryResponse } from "../../models/recurring-order.js";
import { executeRequest, QueryParam } from "../../shared/utils/common-types.js";
import { ApiRequest } from "../../shared/utils/requests-utils.js";
import { ByProjectKeyRecurringOrdersByIDRequestBuilder } from "./by-project-key-recurring-orders-by-id-request-builder.js";
import { ByProjectKeyRecurringOrdersKeyByKeyRequestBuilder } from "./by-project-key-recurring-orders-key-by-key-request-builder.js";
/**
 **/
export declare class ByProjectKeyRecurringOrdersRequestBuilder {
    protected readonly args: {
        pathArgs: {
            projectKey: string;
        };
        executeRequest: executeRequest;
        baseUri?: string;
    };
    constructor(args: {
        pathArgs: {
            projectKey: string;
        };
        executeRequest: executeRequest;
        baseUri?: string;
    });
    withId(childPathArgs: {
        ID: string;
    }): ByProjectKeyRecurringOrdersByIDRequestBuilder;
    withKey(childPathArgs: {
        key: string;
    }): ByProjectKeyRecurringOrdersKeyByKeyRequestBuilder;
    /**
     *	Retrieves Recurring Orders in the Project.
     *
     */
    get(methodArgs?: {
        queryArgs?: {
            expand?: string | string[];
            sort?: string | string[];
            limit?: number;
            offset?: number;
            withTotal?: boolean;
            where?: string | string[];
            [key: string]: QueryParam;
        };
        headers?: {
            [key: string]: string | string[];
        };
    }): ApiRequest<RecurringOrderPagedQueryResponse>;
    /**
     *	Checks if one or more Recurring Orders exist for the provided query predicate. Returns a `200` status if any Recurring Orders match the query predicate, or a [NotFound](ctp:api:type:ResourceNotFoundError) error otherwise.
     *
     */
    head(methodArgs?: {
        queryArgs?: {
            where?: string | string[];
            [key: string]: QueryParam;
        };
        headers?: {
            [key: string]: string | string[];
        };
    }): ApiRequest<void>;
    /**
     *	Creates a Recurring Order in the Project.
     *	Produces the [RecurringOrderCreated](ctp:api:type:RecurringOrderCreatedMessage) message.
     *
     *	The Cart is validated to ensure that it is convertible to an [Order](ctp:api:type:Order). If the validation fails, an error is returned.
     *	If the expiration date has been reached when the [Recurring Order](ctp:api:type:RecurringOrder) is processed, its [RecurringOrderState](ctp:api:type:RecurringOrderState) will be updated to `Expired`, and no Order will be created.
     *
     *	If a server-side problem occurs, indicated by a 500 Internal Server Error HTTP response, the Recurring Order creation may still successfully complete after the error is returned.
     *	If you receive this error, you should verify the status of the Recurring Order by querying a unique identifier supplied during the creation request, such as the key.
     *
     */
    post(methodArgs: {
        queryArgs?: {
            expand?: string | string[];
            [key: string]: QueryParam;
        };
        body: RecurringOrderDraft;
        headers?: {
            [key: string]: string | string[];
        };
    }): ApiRequest<RecurringOrder>;
}
//# sourceMappingURL=by-project-key-recurring-orders-request-builder.d.ts.map