/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
import { Customer } from "../../models/customer.js";
import { MyCustomerUpdate } from "../../models/me.js";
import { executeRequest, QueryParam } from "../../shared/utils/common-types.js";
import { ApiRequest } from "../../shared/utils/requests-utils.js";
import { ByProjectKeyInStoreKeyByStoreKeyMeActiveCartRequestBuilder } from "../active-cart/by-project-key-in-store-key-by-store-key-me-active-cart-request-builder.js";
import { ByProjectKeyInStoreKeyByStoreKeyMeCartsRequestBuilder } from "../carts/by-project-key-in-store-key-by-store-key-me-carts-request-builder.js";
import { ByProjectKeyInStoreKeyByStoreKeyMeEmailConfirmRequestBuilder } from "../confirm/by-project-key-in-store-key-by-store-key-me-email-confirm-request-builder.js";
import { ByProjectKeyInStoreKeyByStoreKeyMeLoginRequestBuilder } from "../login/by-project-key-in-store-key-by-store-key-me-login-request-builder.js";
import { ByProjectKeyInStoreKeyByStoreKeyMeOrdersRequestBuilder } from "../orders/by-project-key-in-store-key-by-store-key-me-orders-request-builder.js";
import { ByProjectKeyInStoreKeyByStoreKeyMePasswordRequestBuilder } from "../password/by-project-key-in-store-key-by-store-key-me-password-request-builder.js";
import { ByProjectKeyInStoreKeyByStoreKeyMeShoppingListsRequestBuilder } from "../shopping-lists/by-project-key-in-store-key-by-store-key-me-shopping-lists-request-builder.js";
import { ByProjectKeyInStoreKeyByStoreKeyMeSignupRequestBuilder } from "../signup/by-project-key-in-store-key-by-store-key-me-signup-request-builder.js";
/**
 **/
export declare class ByProjectKeyInStoreKeyByStoreKeyMeRequestBuilder {
    protected readonly args: {
        pathArgs: {
            projectKey: string;
            storeKey: string;
        };
        executeRequest: executeRequest;
        baseUri?: string;
    };
    constructor(args: {
        pathArgs: {
            projectKey: string;
            storeKey: string;
        };
        executeRequest: executeRequest;
        baseUri?: string;
    });
    /**
     *	A shopping cart holds product variants and can be ordered.
     */
    carts(): ByProjectKeyInStoreKeyByStoreKeyMeCartsRequestBuilder;
    /**
     *	An order can be created from a order, usually after a checkout process has been completed.
     */
    orders(): ByProjectKeyInStoreKeyByStoreKeyMeOrdersRequestBuilder;
    activeCart(): ByProjectKeyInStoreKeyByStoreKeyMeActiveCartRequestBuilder;
    /**
     *	shopping-lists e.g. for wishlist support
     *
     */
    shoppingLists(): ByProjectKeyInStoreKeyByStoreKeyMeShoppingListsRequestBuilder;
    emailConfirm(): ByProjectKeyInStoreKeyByStoreKeyMeEmailConfirmRequestBuilder;
    password(): ByProjectKeyInStoreKeyByStoreKeyMePasswordRequestBuilder;
    signup(): ByProjectKeyInStoreKeyByStoreKeyMeSignupRequestBuilder;
    login(): ByProjectKeyInStoreKeyByStoreKeyMeLoginRequestBuilder;
    /**
     *	Returns a Customer for a given Query Predicate in a [Store](ctp:api:type:Store). Returns a `200` status if successful.
     *
     *	A [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error is returned in the following scenarios:
     *
     *	- If no Customer exists in the Store for the given Query Predicate.
     *	- If a Customer exists in the Store for the given Query Predicate, but does not have an `id` value that matches the [customer:{id}](/scopes#composable-commerce-oauth) scope.
     *	- If a Customer exists for the given Query Predicate but is associated with a different Store than what is specified in the `manage_my_profile:{projectKey}:{storeKey}` scope.
     *
     */
    get(methodArgs?: {
        queryArgs?: {
            sort?: string | string[];
            limit?: number;
            offset?: number;
            withTotal?: boolean;
            expand?: string | string[];
            where?: string | string[];
            [key: string]: QueryParam;
        };
        headers?: {
            [key: string]: string | string[];
        };
    }): ApiRequest<Customer>;
    /**
     *	Updates the Customer in a [Store](ctp:api:type:Store). Returns a `200` status if successful.
     *
     *	A [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error is returned in the following scenarios:
     *
     *	- If no Customer exists with the `id` specified in the [customer:{id}](/scopes#composable-commerce-oauth) scope.
     *	- If the Customer exists but is associated with a different Store than what is specified in the `manage_my_profile:{projectKey}:{storeKey}` scope.
     *
     */
    post(methodArgs: {
        body: MyCustomerUpdate;
        headers?: {
            [key: string]: string | string[];
        };
    }): ApiRequest<Customer>;
    /**
     *	Deletes the Customer in a [Store](ctp:api:type:Store). Returns a `200` status if successful.
     *
     *	A [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error is returned in the following scenarios:
     *
     *	- If no Customer exists with the `id` specified in the [customer:{id}](/scopes#composable-commerce-oauth) scope.
     *	- If the Customer exists but is associated with a different Store than what is specified in the `manage_my_profile:{projectKey}:{storeKey}` scope.
     *
     */
    delete(methodArgs: {
        queryArgs: {
            version: number;
            [key: string]: QueryParam;
        };
        headers?: {
            [key: string]: string | string[];
        };
    }): ApiRequest<Customer>;
}
//# sourceMappingURL=by-project-key-in-store-key-by-store-key-me-request-builder.d.ts.map