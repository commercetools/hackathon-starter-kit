/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
import { MyShoppingListDraft } from "../../models/me.js";
import { ShoppingList, ShoppingListPagedQueryResponse } from "../../models/shopping-list.js";
import { executeRequest, QueryParam } from "../../shared/utils/common-types.js";
import { ApiRequest } from "../../shared/utils/requests-utils.js";
import { ByProjectKeyInStoreKeyByStoreKeyMeShoppingListsByIDRequestBuilder } from "./by-project-key-in-store-key-by-store-key-me-shopping-lists-by-id-request-builder.js";
import { ByProjectKeyInStoreKeyByStoreKeyMeShoppingListsKeyByKeyRequestBuilder } from "./by-project-key-in-store-key-by-store-key-me-shopping-lists-key-by-key-request-builder.js";
/**
 **/
export declare class ByProjectKeyInStoreKeyByStoreKeyMeShoppingListsRequestBuilder {
    protected readonly args: {
        pathArgs: {
            projectKey: string;
            storeKey: string;
        };
        executeRequest: executeRequest;
        baseUri?: string;
    };
    constructor(args: {
        pathArgs: {
            projectKey: string;
            storeKey: string;
        };
        executeRequest: executeRequest;
        baseUri?: string;
    });
    withKey(childPathArgs: {
        key: string;
    }): ByProjectKeyInStoreKeyByStoreKeyMeShoppingListsKeyByKeyRequestBuilder;
    withId(childPathArgs: {
        ID: string;
    }): ByProjectKeyInStoreKeyByStoreKeyMeShoppingListsByIDRequestBuilder;
    /**
     *	Retrieves ShoppingLists for the authenticated Customer or anonymous user in a [Store](ctp:api:type:Store). Returns `200 OK` status if successful.
     *
     *	A [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error is returned in the following scenarios:
     *
     *	- If no ShoppingLists exist in a Store.
     *	- If a ShoppingList exists but does not have a `store` specified, or the `store` field references a different Store.
     *	- If a ShoppingList exists in a Store but does not contain either an `anonymousId` that matches the [anonymous_id:{id}](/scopes#composable-commerce-oauth) scope, or a `customer` with `id` value that matches the [customer:{id}](/scopes#composable-commerce-oauth) scope.
     *
     */
    get(methodArgs?: {
        queryArgs?: {
            expand?: string | string[];
            sort?: string | string[];
            limit?: number;
            offset?: number;
            withTotal?: boolean;
            where?: string | string[];
            [key: string]: QueryParam;
        };
        headers?: {
            [key: string]: string | string[];
        };
    }): ApiRequest<ShoppingListPagedQueryResponse>;
    /**
     *	Checks if one or more ShoppingLists exist for the provided query predicate for the authenticated Customer or anonymous user in a [Store](ctp:api:type:Store). Returns `200 OK` status if successful.
     *
     *	A [Not Found](/../api/errors#404-not-found) error is returned in the following scenarios:
     *
     *	- If no ShoppingLists exist for the provided query predicate in a Store.
     *	- If a ShoppingList matches the query predicate but does not have a `store` specified, or the `store` field references a different Store.
     *	- If a ShoppingList exists in a Store but does not contain either an `anonymousId` that matches the [anonymous_id:{id}](/scopes#composable-commerce-oauth) scope, or a `customer` with `id` value that matches the [customer:{id}](/scopes#composable-commerce-oauth) scope.
     *
     */
    head(methodArgs?: {
        queryArgs?: {
            where?: string | string[];
            [key: string]: QueryParam;
        };
        headers?: {
            [key: string]: string | string[];
        };
    }): ApiRequest<void>;
    /**
     *
     *	Creates a ShoppingList for the authenticated Customer or anonymous user in a [Store](ctp:api:type:Store). The `customer` or `anonymousId` field on the ShoppingList is automatically set based on the given [customer:{id}](/scopes#composable-commerce-oauth) or [anonymous_id:{id}](/scopes#composable-commerce-oauth) scope.
     *
     *	When using this endpoint, the `store` field of a ShoppingList is always set to the Store specified in the path parameter.
     *
     */
    post(methodArgs: {
        queryArgs?: {
            expand?: string | string[];
            [key: string]: QueryParam;
        };
        body: MyShoppingListDraft;
        headers?: {
            [key: string]: string | string[];
        };
    }): ApiRequest<ShoppingList>;
}
//# sourceMappingURL=by-project-key-in-store-key-by-store-key-me-shopping-lists-request-builder.d.ts.map