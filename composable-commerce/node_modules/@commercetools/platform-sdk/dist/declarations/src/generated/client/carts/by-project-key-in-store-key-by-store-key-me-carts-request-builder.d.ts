/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
import { Cart, CartPagedQueryResponse } from "../../models/cart.js";
import { MyCartDraft } from "../../models/me.js";
import { executeRequest, QueryParam } from "../../shared/utils/common-types.js";
import { ApiRequest } from "../../shared/utils/requests-utils.js";
import { ByProjectKeyInStoreKeyByStoreKeyMeCartsByIDRequestBuilder } from "./by-project-key-in-store-key-by-store-key-me-carts-by-id-request-builder.js";
/**
 **/
export declare class ByProjectKeyInStoreKeyByStoreKeyMeCartsRequestBuilder {
    protected readonly args: {
        pathArgs: {
            projectKey: string;
            storeKey: string;
        };
        executeRequest: executeRequest;
        baseUri?: string;
    };
    constructor(args: {
        pathArgs: {
            projectKey: string;
            storeKey: string;
        };
        executeRequest: executeRequest;
        baseUri?: string;
    });
    withId(childPathArgs: {
        ID: string;
    }): ByProjectKeyInStoreKeyByStoreKeyMeCartsByIDRequestBuilder;
    /**
     *	Retrieves Carts for the authenticated Customer or anonymous user in a [Store](ctp:api:type:Store).
     *
     */
    get(methodArgs?: {
        queryArgs?: {
            expand?: string | string[];
            sort?: string | string[];
            limit?: number;
            offset?: number;
            withTotal?: boolean;
            where?: string | string[];
            [key: string]: QueryParam;
        };
        headers?: {
            [key: string]: string | string[];
        };
    }): ApiRequest<CartPagedQueryResponse>;
    /**
     *	Checks if a Cart exists for a Store that matches the given Query Predicate, and contains a matching `customerId` or `anonymousId`. Returns a `200` status if any Carts match these conditions, or a `404` status otherwise.
     *
     */
    head(methodArgs?: {
        queryArgs?: {
            where?: string | string[];
            [key: string]: QueryParam;
        };
        headers?: {
            [key: string]: string | string[];
        };
    }): ApiRequest<void>;
    /**
     *
     *	Creates a Cart in a Store for the Customer or anonymous user. The `customerId` or `anonymousId` field on the Cart is automatically set based on the [customer:{id}](/scopes#composable-commerce-oauth) or [anonymous_id:{id}](/scopes#composable-commerce-oauth) scope.
     *
     *	The `store` field in the created [Cart](ctp:api:type:Cart) is set to the Store specified by the `storeKey` path parameter.
     *
     *	Specific Error Codes:
     *
     *	- [CountryNotConfiguredInStore](ctp:api:type:CountryNotConfiguredInStoreError)
     *	- [DiscountCodeNonApplicable](ctp:api:type:DiscountCodeNonApplicableError)
     *	- [InvalidItemShippingDetails](ctp:api:type:InvalidItemShippingDetailsError)
     *	- [MatchingPriceNotFound](ctp:api:type:MatchingPriceNotFoundError)
     *	- [MissingTaxRateForCountry](ctp:api:type:MissingTaxRateForCountryError)
     *
     */
    post(methodArgs: {
        queryArgs?: {
            expand?: string | string[];
            [key: string]: QueryParam;
        };
        body: MyCartDraft;
        headers?: {
            [key: string]: string | string[];
        };
    }): ApiRequest<Cart>;
}
//# sourceMappingURL=by-project-key-in-store-key-by-store-key-me-carts-request-builder.d.ts.map