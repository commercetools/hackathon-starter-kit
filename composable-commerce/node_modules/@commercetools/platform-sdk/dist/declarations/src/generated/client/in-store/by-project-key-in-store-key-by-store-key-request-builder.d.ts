/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
import { executeRequest } from "../../shared/utils/common-types.js";
import { ByProjectKeyInStoreKeyByStoreKeyBusinessUnitsRequestBuilder } from "../business-units/by-project-key-in-store-key-by-store-key-business-units-request-builder.js";
import { ByProjectKeyInStoreKeyByStoreKeyCartDiscountsRequestBuilder } from "../cart-discounts/by-project-key-in-store-key-by-store-key-cart-discounts-request-builder.js";
import { ByProjectKeyInStoreKeyByStoreKeyCartsRequestBuilder } from "../carts/by-project-key-in-store-key-by-store-key-carts-request-builder.js";
import { ByProjectKeyInStoreKeyByStoreKeyCustomersRequestBuilder } from "../customers/by-project-key-in-store-key-by-store-key-customers-request-builder.js";
import { ByProjectKeyInStoreKeyByStoreKeyLoginRequestBuilder } from "../login/by-project-key-in-store-key-by-store-key-login-request-builder.js";
import { ByProjectKeyInStoreKeyByStoreKeyMeRequestBuilder } from "../me/by-project-key-in-store-key-by-store-key-me-request-builder.js";
import { ByProjectKeyInStoreKeyByStoreKeyOrdersRequestBuilder } from "../orders/by-project-key-in-store-key-by-store-key-orders-request-builder.js";
import { ByProjectKeyInStoreKeyByStoreKeyProductProjectionsRequestBuilder } from "../product-projections/by-project-key-in-store-key-by-store-key-product-projections-request-builder.js";
import { ByProjectKeyInStoreKeyByStoreKeyProductSelectionAssignmentsRequestBuilder } from "../product-selection-assignments/by-project-key-in-store-key-by-store-key-product-selection-assignments-request-builder.js";
import { ByProjectKeyInStoreKeyByStoreKeyProductTailoringRequestBuilder } from "../product-tailoring/by-project-key-in-store-key-by-store-key-product-tailoring-request-builder.js";
import { ByProjectKeyInStoreKeyByStoreKeyProductsRequestBuilder } from "../products/by-project-key-in-store-key-by-store-key-products-request-builder.js";
import { ByProjectKeyInStoreKeyByStoreKeyQuoteRequestsRequestBuilder } from "../quote-requests/by-project-key-in-store-key-by-store-key-quote-requests-request-builder.js";
import { ByProjectKeyInStoreKeyByStoreKeyQuotesRequestBuilder } from "../quotes/by-project-key-in-store-key-by-store-key-quotes-request-builder.js";
import { ByProjectKeyInStoreKeyByStoreKeyShippingMethodsRequestBuilder } from "../shipping-methods/by-project-key-in-store-key-by-store-key-shipping-methods-request-builder.js";
import { ByProjectKeyInStoreKeyByStoreKeyShoppingListsRequestBuilder } from "../shopping-lists/by-project-key-in-store-key-by-store-key-shopping-lists-request-builder.js";
import { ByProjectKeyInStoreKeyByStoreKeyStagedQuotesRequestBuilder } from "../staged-quotes/by-project-key-in-store-key-by-store-key-staged-quotes-request-builder.js";
/**
 **/
export declare class ByProjectKeyInStoreKeyByStoreKeyRequestBuilder {
    protected readonly args: {
        pathArgs: {
            projectKey: string;
            storeKey: string;
        };
        executeRequest: executeRequest;
        baseUri?: string;
    };
    constructor(args: {
        pathArgs: {
            projectKey: string;
            storeKey: string;
        };
        executeRequest: executeRequest;
        baseUri?: string;
    });
    /**
     *	A Business Unit can represent a Company or a Division.
     */
    businessUnits(): ByProjectKeyInStoreKeyByStoreKeyBusinessUnitsRequestBuilder;
    cartDiscounts(): ByProjectKeyInStoreKeyByStoreKeyCartDiscountsRequestBuilder;
    /**
     *	A shopping cart holds product variants and can be ordered.
     */
    carts(): ByProjectKeyInStoreKeyByStoreKeyCartsRequestBuilder;
    /**
     *	A Customer is a person purchasing products. Carts, Orders,
     *	Comments and Reviews can be associated to a Customer.
     *
     */
    customers(): ByProjectKeyInStoreKeyByStoreKeyCustomersRequestBuilder;
    me(): ByProjectKeyInStoreKeyByStoreKeyMeRequestBuilder;
    /**
     *	An order can be created from a cart, usually after a checkout process has been completed.
     */
    orders(): ByProjectKeyInStoreKeyByStoreKeyOrdersRequestBuilder;
    productProjections(): ByProjectKeyInStoreKeyByStoreKeyProductProjectionsRequestBuilder;
    productSelectionAssignments(): ByProjectKeyInStoreKeyByStoreKeyProductSelectionAssignmentsRequestBuilder;
    /**
     *	A Product Tailoring holds tailored data of Product in the Store.
     */
    productTailoring(): ByProjectKeyInStoreKeyByStoreKeyProductTailoringRequestBuilder;
    products(): ByProjectKeyInStoreKeyByStoreKeyProductsRequestBuilder;
    /**
     *	A request for a Quote holds product variants and can be ordered.
     */
    quoteRequests(): ByProjectKeyInStoreKeyByStoreKeyQuoteRequestsRequestBuilder;
    /**
     *	A quote holds the negotiated offer.
     */
    quotes(): ByProjectKeyInStoreKeyByStoreKeyQuotesRequestBuilder;
    shippingMethods(): ByProjectKeyInStoreKeyByStoreKeyShippingMethodsRequestBuilder;
    /**
     *	shopping-lists e.g. for wishlist support
     *
     */
    shoppingLists(): ByProjectKeyInStoreKeyByStoreKeyShoppingListsRequestBuilder;
    /**
     *	A staged quote holds the negotiation between the [Buyer](/../api/quotes-overview#buyer) and the [Seller](/../api/quotes-overview#seller).
     */
    stagedQuotes(): ByProjectKeyInStoreKeyByStoreKeyStagedQuotesRequestBuilder;
    /**
     *	Retrieves the authenticated customer.
     */
    login(): ByProjectKeyInStoreKeyByStoreKeyLoginRequestBuilder;
}
//# sourceMappingURL=by-project-key-in-store-key-by-store-key-request-builder.d.ts.map