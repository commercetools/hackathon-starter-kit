'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _toPrimitive(t, r) {
  if ("object" != typeof t || !t) return t;
  var e = t[Symbol.toPrimitive];
  if (void 0 !== e) {
    var i = e.call(t, r || "default");
    if ("object" != typeof i) return i;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return ("string" === r ? String : Number)(t);
}

function _toPropertyKey(t) {
  var i = _toPrimitive(t, "string");
  return "symbol" == typeof i ? i : i + "";
}

function _defineProperty(e, r, t) {
  return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, {
    value: t,
    enumerable: !0,
    configurable: !0,
    writable: !0
  }) : e[r] = t, e;
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate <raml_file_path> -o <output_path> -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

function isDefined(value) {
  return typeof value !== 'undefined' && value !== null;
}
function stringify(object) {
  const params = new URLSearchParams(object);
  for (const [key, value] of Object.entries(object)) {
    if (Array.isArray(value)) {
      params.delete(key);
      value.filter(Boolean).forEach(v => params.append(key, v));
    }
  }
  return params.toString();
}
function cleanObject(obj) {
  return Object.keys(obj).reduce((result, key) => {
    const value = obj[key];
    if (Array.isArray(value)) {
      const values = value.filter(isDefined);
      if (!values.length) {
        return result;
      }
      return {
        ...result,
        [key]: values
      };
    }
    if (isDefined(value)) {
      return {
        ...result,
        [key]: value
      };
    }
    return result;
  }, {});
}
function formatQueryString(variableMap) {
  const map = cleanObject(variableMap);
  const result = stringify(map);
  if (result === '') {
    return '';
  }
  return `?${result}`;
}
function buildRelativeUri(commonRequest) {
  const pathMap = commonRequest.pathVariables;
  var uri = commonRequest.uriTemplate;
  for (const param in pathMap) {
    const value = encodeURIComponent(`${pathMap[param]}`);
    uri = uri.replace(`{${param}}`, `${value}`);
  }
  const resQuery = formatQueryString(commonRequest.queryParams || {});
  return `${uri}${resQuery}`;
}

class ApiRequest {
  constructor(request, requestExecutor) {
    this.requestExecutor = requestExecutor;
    _defineProperty(this, "request", void 0);
    this.request = {
      ...request,
      uri: buildRelativeUri(request)
    };
  }
  clientRequest() {
    return this.request;
  }
  execute() {
    return this.requestExecutor(this.request);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyInStoreKeyByStoreKeyMeActiveCartRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  /**
   *	Retrieves the Customer's most recently modified [active Cart](ctp:api:type:CartState) in a Store. Returns a `200` status if successful.
   *
   *	Carts with `Merchant` or `Quote` [CartOrigin](ctp:api:type:CartOrigin) are ignored.
   *
   *	A [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error is returned in the following scenarios:
   *
   *	- If no active Cart exists.
   *	- If an active Cart exists but does not have a `store` specified, or the `store` field references a different Store.
   *	- If an active Cart exists but does not have a `customerId` that matches the [customer:{id}](/scopes#composable-commerce-oauth) scope, or `anonymousId` that matches the [anonymous_id:{id}](/scopes#composable-commerce-oauth) scope.
   *
   */
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/me/active-cart',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Checks if an active Cart exists in a Store. Returns `200 OK` status if successful.
   *
   *	A [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error is returned in the following scenarios:
   *
   *	- If no active Cart exists in a Store.
   *	- If an active Cart exists but does not have a `store` specified, or the `store` field references a different Store.
   *	- If an active Cart exists but does not contain a `customerId` that matches the [customer:{id}](/scopes#composable-commerce-oauth) scope, or `anonymousId` that matches the [anonymous_id:{id}](/scopes#composable-commerce-oauth) scope.
   *
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/me/active-cart',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      }
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyMeActiveCartRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  /**
   *	Retrieves the Customer's most recently modified [active Cart](ctp:api:type:CartState). Returns a `200` status if successful.
   *
   *	Carts with `Merchant` or `Quote` [CartOrigin](ctp:api:type:CartOrigin) are ignored.
   *
   *	A [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error is returned in the following scenarios:
   *
   *	- If no active Cart exists.
   *	- If an active Cart exists but does not have a `customerId` that matches the [customer:{id}](/scopes#composable-commerce-oauth) scope, or `anonymousId` that matches the [anonymous_id:{id}](/scopes#composable-commerce-oauth) scope.
   *
   */
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/me/active-cart',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Checks if an active Cart exists. Returns a `200` status if successful.
   *
   *	A [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error is returned in the following scenarios:
   *
   *	- If no active Cart exists.
   *	- If an active Cart exists but does not have a `customerId` that matches the [customer:{id}](/scopes#composable-commerce-oauth) scope, or an `anonymousId` that matches the [anonymous_id:{id}](/scopes#composable-commerce-oauth) scope.
   *
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/me/active-cart',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      }
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyApiClientsByIDRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/api-clients/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      }
    }, this.args.executeRequest);
  }
  /**
   *	Checks if an API Client exists with the provided `id`. Returns a `200` status if the API Client exists, or a `404` status otherwise.
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/api-clients/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      }
    }, this.args.executeRequest);
  }
  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'DELETE',
      uriTemplate: '/{projectKey}/api-clients/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      }
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyApiClientsRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  withId(childPathArgs) {
    return new ByProjectKeyApiClientsByIDRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/api-clients',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Checks if an API Client exists for the provided query predicate. Returns a `200` status if any API Clients match the query predicate, or a `404` status otherwise.
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/api-clients',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/api-clients',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs,
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyAsAssociateByAssociateIdBusinessUnitsByIDRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/as-associate/{associateId}/business-units/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Checks if a BusinessUnit exists with the provided `id`. Returns a `200` status if the BusinessUnit exists, or a `404` status otherwise.
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/as-associate/{associateId}/business-units/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      }
    }, this.args.executeRequest);
  }
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/as-associate/{associateId}/business-units/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs,
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyAsAssociateByAssociateIdBusinessUnitsKeyByKeyRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/as-associate/{associateId}/business-units/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Checks if a BusinessUnit exists with the provided `key`. Returns a `200` status if the BusinessUnit exists, or a `404` status otherwise.
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/as-associate/{associateId}/business-units/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      }
    }, this.args.executeRequest);
  }
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/as-associate/{associateId}/business-units/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs,
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyAsAssociateByAssociateIdBusinessUnitsRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  withKey(childPathArgs) {
    return new ByProjectKeyAsAssociateByAssociateIdBusinessUnitsKeyByKeyRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  withId(childPathArgs) {
    return new ByProjectKeyAsAssociateByAssociateIdBusinessUnitsByIDRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/as-associate/{associateId}/business-units',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Checks if one or more BusinessUnits exist for the provided query predicate. Returns a `200` status if any BusinessUnits match the query predicate, or a `404` status otherwise.
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/as-associate/{associateId}/business-units',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/as-associate/{associateId}/business-units',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs,
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyAsAssociateByAssociateIdInBusinessUnitKeyByBusinessUnitKeyApprovalFlowsByIDRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/approval-flows/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/approval-flows/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs,
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyAsAssociateByAssociateIdInBusinessUnitKeyByBusinessUnitKeyApprovalFlowsRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  withId(childPathArgs) {
    return new ByProjectKeyAsAssociateByAssociateIdInBusinessUnitKeyByBusinessUnitKeyApprovalFlowsByIDRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/approval-flows',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyAsAssociateByAssociateIdInBusinessUnitKeyByBusinessUnitKeyApprovalRulesByIDRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/approval-rules/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/approval-rules/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs,
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyAsAssociateByAssociateIdInBusinessUnitKeyByBusinessUnitKeyApprovalRulesKeyByKeyRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/approval-rules/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/approval-rules/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs,
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyAsAssociateByAssociateIdInBusinessUnitKeyByBusinessUnitKeyApprovalRulesRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  withId(childPathArgs) {
    return new ByProjectKeyAsAssociateByAssociateIdInBusinessUnitKeyByBusinessUnitKeyApprovalRulesByIDRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  withKey(childPathArgs) {
    return new ByProjectKeyAsAssociateByAssociateIdInBusinessUnitKeyByBusinessUnitKeyApprovalRulesKeyByKeyRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/approval-rules',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/approval-rules',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs,
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyAsAssociateByAssociateIdInBusinessUnitKeyByBusinessUnitKeyCartsReplicateRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  /**
   *	Creates a new Cart by replicating an existing Cart or Order. Can be useful in cases where a customer wants to cancel a recent order to make some changes or reorder a previous order.
   *
   *	The replicated Cart preserves Customer information, Line Items and Custom Line Items, Custom Fields, Discount Codes, and other settings of the Cart or Order. If the Line Items become invalid, for example, due to removed Products or Prices, they are removed from the new Cart. If the Customer switches to another Customer Group, the new Cart is updated with the new value. It has up-to-date Tax Rates, Prices, and Line Item product data and is in `Active` [CartState](ctp:api:type:CartState).
   *
   *	The new Cart does not contain Payments or Deliveries. The [State](ctp:api:type:ItemState) of Line Items and Custom Line Items is reset to `initial`.
   *
   *	If the Cart exists in the [Project](ctp:api:type:Project) but does not reference the requested [BusinessUnit](ctp:api:type:BusinessUnit), this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.
   *
   *	Specific Error Codes:
   *
   *	- [MatchingPriceNotFound](ctp:api:type:MatchingPriceNotFoundError)
   *	- [MissingTaxRateForCountry](ctp:api:type:MissingTaxRateForCountryError)
   *
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/carts/replicate',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyAsAssociateByAssociateIdInBusinessUnitKeyByBusinessUnitKeyCartsByIDRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  /**
   *	If the Cart exists in the [Project](ctp:api:type:Project) but does not reference the requested [BusinessUnit](ctp:api:type:BusinessUnit), this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.
   *
   */
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/carts/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Checks if a Cart exists with the provided `id`. Returns a `200` status if the Cart exists, or a `404` status otherwise.
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/carts/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      }
    }, this.args.executeRequest);
  }
  /**
   *	If the Cart exists in the [Project](ctp:api:type:Project) but does not reference the requested [BusinessUnit](ctp:api:type:BusinessUnit), this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.
   *
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/carts/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs,
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
  /**
   *	If the Cart exists in the [Project](ctp:api:type:Project) but does not reference the requested [BusinessUnit](ctp:api:type:BusinessUnit), this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.
   */
  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'DELETE',
      uriTemplate: '/{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/carts/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyAsAssociateByAssociateIdInBusinessUnitKeyByBusinessUnitKeyCartsKeyByKeyRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  /**
   *	If the Cart exists in the [Project](ctp:api:type:Project) but does not reference the requested [BusinessUnit](ctp:api:type:BusinessUnit), this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.
   *
   */
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/carts/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Checks if a Cart exists with the provided `key`. Returns a `200` status if the Cart exists, or a `404` status otherwise.
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/carts/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      }
    }, this.args.executeRequest);
  }
  /**
   *	If the Cart exists in the [Project](ctp:api:type:Project) but does not reference the requested [BusinessUnit](ctp:api:type:BusinessUnit), this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.
   *
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/carts/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs,
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
  /**
   *	If the Cart exists in the [Project](ctp:api:type:Project) but does not reference the requested [BusinessUnit](ctp:api:type:BusinessUnit), this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.
   */
  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'DELETE',
      uriTemplate: '/{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/carts/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyAsAssociateByAssociateIdInBusinessUnitKeyByBusinessUnitKeyCartsRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  withKey(childPathArgs) {
    return new ByProjectKeyAsAssociateByAssociateIdInBusinessUnitKeyByBusinessUnitKeyCartsKeyByKeyRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  withId(childPathArgs) {
    return new ByProjectKeyAsAssociateByAssociateIdInBusinessUnitKeyByBusinessUnitKeyCartsByIDRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  replicate() {
    return new ByProjectKeyAsAssociateByAssociateIdInBusinessUnitKeyByBusinessUnitKeyCartsReplicateRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/carts',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Checks if one or more Carts exist for the provided query predicate. Returns a `200` status if any Carts match the query predicate, or a `404` status otherwise.
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/carts',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Creates a Cart in the [BusinessUnit](ctp:api:type:BusinessUnit) referenced by `businessUnitKey`. As such, the `businessUnit` field on [CartDraft](ctp:api:type:CartDraft) is ignored for this request.
   *	Creating a Cart can fail with an [InvalidOperation](ctp:api:type:InvalidOperationError) if the referenced [ShippingMethod](ctp:api:type:ShippingMethod) in the [CartDraft](ctp:api:type:CartDraft) has a predicate that does not match the Cart.
   *
   *	Specific Error Codes:
   *
   *	- [DiscountCodeNonApplicable](ctp:api:type:DiscountCodeNonApplicableError)
   *	- [InvalidItemShippingDetails](ctp:api:type:InvalidItemShippingDetailsError)
   *	- [MatchingPriceNotFound](ctp:api:type:MatchingPriceNotFoundError)
   *	- [MissingTaxRateForCountry](ctp:api:type:MissingTaxRateForCountryError)
   *
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/carts',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs,
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyAsAssociateByAssociateIdInBusinessUnitKeyByBusinessUnitKeyOrdersQuotesRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  /**
   *
   *	Creates an Order from a [Quote](ctp:api:type:Quote) in a [BusinessUnit](ctp:api:type:BusinessUnit).
   *
   *	The Quote must reference the same Business Unit as the `businessUnitKey` path parameter, must have the `Pending` [state](ctp:api:type:QuoteState), and must be valid (not past the `validTo` date). If these criteria are not met, an [InvalidOperation](ctp:api:type:InvalidOperationError) error is returned.
   *
   *	Specific Error Codes:
   *
   *	- [InvalidItemShippingDetails](ctp:api:type:InvalidItemShippingDetailsError)
   *	- [OutOfStock](ctp:api:type:OutOfStockError)
   *
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/orders/quotes',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyAsAssociateByAssociateIdInBusinessUnitKeyByBusinessUnitKeyOrdersByIDRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  /**
   *	Retrieves an Order with the provided `id` in a [BusinessUnit](ctp:api:type:BusinessUnit).
   *	If the Order exists in the [Project](ctp:api:type:Project) but does not reference the requested Business Unit, this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.
   *
   */
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/orders/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Checks if an Order exists with the provided `id` in a [BusinessUnit](ctp:api:type:BusinessUnit). Returns a `200` status if the Order exists, or a `404` status otherwise.
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/orders/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      }
    }, this.args.executeRequest);
  }
  /**
   *	Updates an Order in a [BusinessUnit](ctp:api:type:BusinessUnit) using one or more [update actions](/../api/projects/orders#update-actions).
   *	If the Order exists in the [Project](ctp:api:type:Project) but does not reference the requested Business Unit, this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.
   *
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/orders/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs,
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyAsAssociateByAssociateIdInBusinessUnitKeyByBusinessUnitKeyOrdersOrderNumberByOrderNumberRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  /**
   *	Retrieves an Order with the provided `orderNumber` in a [BusinessUnit](ctp:api:type:BusinessUnit).
   *	If the Order exists in the [Project](ctp:api:type:Project) but does not reference the requested [BusinessUnit](ctp:api:type:BusinessUnit), this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.
   *
   */
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/orders/order-number={orderNumber}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Checks if an Order exists with the provided `orderNumber` in a [BusinessUnit](ctp:api:type:BusinessUnit). Returns a `200` status if the Order exists, or a `404` status otherwise.
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/orders/order-number={orderNumber}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      }
    }, this.args.executeRequest);
  }
  /**
   *	Updates an Order in a [BusinessUnit](ctp:api:type:BusinessUnit) using one or more [update actions](/../api/projects/orders#update-actions).
   *	If the Order exists in the [Project](ctp:api:type:Project) but does not reference the requested Business Unit, this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.
   *
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/orders/order-number={orderNumber}',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs,
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyAsAssociateByAssociateIdInBusinessUnitKeyByBusinessUnitKeyOrdersRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  orderQuote() {
    return new ByProjectKeyAsAssociateByAssociateIdInBusinessUnitKeyByBusinessUnitKeyOrdersQuotesRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  withOrderNumber(childPathArgs) {
    return new ByProjectKeyAsAssociateByAssociateIdInBusinessUnitKeyByBusinessUnitKeyOrdersOrderNumberByOrderNumberRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  withId(childPathArgs) {
    return new ByProjectKeyAsAssociateByAssociateIdInBusinessUnitKeyByBusinessUnitKeyOrdersByIDRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }

  /**
   *	Retrieves Orders in a [BusinessUnit](ctp:api:type:BusinessUnit).
   */
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/orders',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Checks if one or more Orders exist with provided query predicate in a [BusinessUnit](ctp:api:type:BusinessUnit). Returns a `200` status if any Orders match the query predicate, or a `404` status otherwise.
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/orders',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Creates an Order from a [Cart](ctp:api:type:Cart) in a [BusinessUnit](ctp:api:type:BusinessUnit).
   *
   *	The Cart must have a shipping address and an active Shipping Method set.
   *
   *	If the Cart does not reference the same BusinessUnit as the `businessUnitKey` path parameter, an [InvalidOperation](ctp:api:type:InvalidOperationError) is returned.
   *
   *	Specific Error Codes:
   *
   *	- [DiscountCodeNonApplicable](ctp:api:type:DiscountCodeNonApplicableError)
   *	- [InvalidItemShippingDetails](ctp:api:type:InvalidItemShippingDetailsError)
   *	- [OutOfStock](ctp:api:type:OutOfStockError)
   *	- [PriceChanged](ctp:api:type:PriceChangedError)
   *	- [ShippingMethodDoesNotMatchCart](ctp:api:type:ShippingMethodDoesNotMatchCartError)
   *	- [MatchingPriceNotFound](ctp:api:type:MatchingPriceNotFoundError)
   *	- [MissingTaxRateForCountry](ctp:api:type:MissingTaxRateForCountryError)
   *
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/orders',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs,
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyAsAssociateByAssociateIdInBusinessUnitKeyByBusinessUnitKeyQuoteRequestsByIDRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  /**
   *	If the QuoteRequest exists in the [Project](ctp:api:type:Project) but does not reference the requested [BusinessUnit](ctp:api:type:BusinessUnit), this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.
   *
   */
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/quote-requests/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Checks if a QuoteRequest exists with the provided `id`. Returns a `200` status if the QuoteRequest exists, or a `404` status otherwise.
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/quote-requests/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      }
    }, this.args.executeRequest);
  }
  /**
   *	If the QuoteRequest exists in the [Project](ctp:api:type:Project) but does not reference the requested [BusinessUnit](ctp:api:type:BusinessUnit), this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.
   *
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/quote-requests/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs,
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyAsAssociateByAssociateIdInBusinessUnitKeyByBusinessUnitKeyQuoteRequestsKeyByKeyRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  /**
   *	If the QuoteRequest exists in the [Project](ctp:api:type:Project) but does not reference the requested [BusinessUnit](ctp:api:type:BusinessUnit), this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.
   *
   */
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/quote-requests/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Checks if a QuoteRequest exists with the provided `key`. Returns a `200` status if the QuoteRequest exists, or a `404` status otherwise.
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/quote-requests/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      }
    }, this.args.executeRequest);
  }
  /**
   *	If the QuoteRequest exists in the [Project](ctp:api:type:Project) but does not reference the requested [BusinessUnit](ctp:api:type:BusinessUnit), this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.
   *
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/quote-requests/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs,
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyAsAssociateByAssociateIdInBusinessUnitKeyByBusinessUnitKeyQuoteRequestsRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  withKey(childPathArgs) {
    return new ByProjectKeyAsAssociateByAssociateIdInBusinessUnitKeyByBusinessUnitKeyQuoteRequestsKeyByKeyRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  withId(childPathArgs) {
    return new ByProjectKeyAsAssociateByAssociateIdInBusinessUnitKeyByBusinessUnitKeyQuoteRequestsByIDRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/quote-requests',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Checks if one or more QuoteRequests exist for the provided query predicate. Returns a `200` status if any QuoteRequests match the query predicate, or a `404` status otherwise.
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/quote-requests',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Creates a QuoteRequest in a [BusinessUnit](ctp:api:type:BusinessUnit). Creating QuoteRequest fails with an [InvalidOperation](ctp:api:type:InvalidOperationError) if the Cart does not reference the same BusinessUnit as the `businessUnitKey` path parameter.
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/quote-requests',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs,
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyAsAssociateByAssociateIdInBusinessUnitKeyByBusinessUnitKeyQuotesByIDRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  /**
   *	If the Quote exists in the [Project](ctp:api:type:Project) but does not reference the requested [BusinessUnit](ctp:api:type:BusinessUnit), this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.
   *
   */
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/quotes/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Checks if a Quote exists with the provided `id`. Returns a `200` status if the Quote exists, or a `404` status otherwise.
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/quotes/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      }
    }, this.args.executeRequest);
  }
  /**
   *	If the Quote exists in the [Project](ctp:api:type:Project) but does not reference the requested [BusinessUnit](ctp:api:type:BusinessUnit), this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.
   *
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/quotes/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs,
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyAsAssociateByAssociateIdInBusinessUnitKeyByBusinessUnitKeyQuotesKeyByKeyRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  /**
   *	If the Quote exists in the [Project](ctp:api:type:Project) but does not reference the requested [BusinessUnit](ctp:api:type:BusinessUnit), this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.
   *
   */
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/quotes/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Checks if a Quote exists with the provided `key`. Returns a `200` status if the Quote exists, or a `404` status otherwise.
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/quotes/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      }
    }, this.args.executeRequest);
  }
  /**
   *	If the Quote exists in the [Project](ctp:api:type:Project) but does not reference the requested [BusinessUnit](ctp:api:type:BusinessUnit), this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.
   *
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/quotes/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs,
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyAsAssociateByAssociateIdInBusinessUnitKeyByBusinessUnitKeyQuotesRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  withKey(childPathArgs) {
    return new ByProjectKeyAsAssociateByAssociateIdInBusinessUnitKeyByBusinessUnitKeyQuotesKeyByKeyRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  withId(childPathArgs) {
    return new ByProjectKeyAsAssociateByAssociateIdInBusinessUnitKeyByBusinessUnitKeyQuotesByIDRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/quotes',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Checks if one or more Quotes exist for the provided query predicate. Returns a `200` status if any Quotes match the query predicate, or a `404` status otherwise.
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/quotes',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyAsAssociateByAssociateIdInBusinessUnitKeyByBusinessUnitKeyShoppingListsByIDRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  /**
   *	Retrieves a ShoppingList with the provided `key` in a [BusinessUnit](ctp:api:type:BusinessUnit).
   *
   *	If the ShoppingList exists in the Project but does not reference the requested [BusinessUnit](ctp:api:type:BusinessUnit), this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.
   *
   */
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/shopping-lists/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Checks if a ShoppingList exists with the provided `id` in a [BusinessUnit](ctp:api:type:BusinessUnit). Returns a `200` status if the ShoppingList exists, or a `404` status otherwise.
   *
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/shopping-lists/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      }
    }, this.args.executeRequest);
  }
  /**
   *	Updates a ShoppingList in a [BusinessUnit](ctp:api:type:BusinessUnit) using one or more [update actions](/../api/projects/shoppingLists#update-actions).
   *	If the ShoppingList exists in the Project but does not reference the requested [BusinessUnit](ctp:api:type:BusinessUnit), this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.
   *
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/shopping-lists/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs,
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
  /**
   *	Deletes a ShoppingList in a [BusinessUnit](ctp:api:type:BusinessUnit).
   *
   *	If the ShoppingList exists in the Project but does not reference the requested [BusinessUnit](ctp:api:type:BusinessUnit), this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.
   *
   */
  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'DELETE',
      uriTemplate: '/{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/shopping-lists/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyAsAssociateByAssociateIdInBusinessUnitKeyByBusinessUnitKeyShoppingListsKeyByKeyRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  /**
   *	Retrieves a ShoppingList with the provided `key` in a [BusinessUnit](ctp:api:type:BusinessUnit).
   *	If the ShoppingList exists in the Project but does not reference the requested [BusinessUnit](ctp:api:type:BusinessUnit), this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.
   *
   */
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/shopping-lists/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Checks if a ShoppingList exists with the provided `key` in a [BusinessUnit](ctp:api:type:BusinessUnit). Returns a `200` status if the ShoppingList exists, or a `404` status otherwise.
   *
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/shopping-lists/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      }
    }, this.args.executeRequest);
  }
  /**
   *	Updates a ShoppingList in a [BusinessUnit](ctp:api:type:BusinessUnit) using one or more [update actions](/../api/projects/shoppingLists#update-actions).
   *	If the ShoppingList exists in the [Project](ctp:api:type:Project) but does not reference the requested [BusinessUnit](ctp:api:type:BusinessUnit), this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.
   *
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/shopping-lists/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs,
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
  /**
   *	Deletes a ShoppingList in a [BusinessUnit](ctp:api:type:BusinessUnit).
   *
   *	If the ShoppingList exists in the Project but does not reference the requested [BusinessUnit](ctp:api:type:BusinessUnit), this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.
   *
   */
  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'DELETE',
      uriTemplate: '/{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/shopping-lists/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyAsAssociateByAssociateIdInBusinessUnitKeyByBusinessUnitKeyShoppingListsRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  withKey(childPathArgs) {
    return new ByProjectKeyAsAssociateByAssociateIdInBusinessUnitKeyByBusinessUnitKeyShoppingListsKeyByKeyRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  withId(childPathArgs) {
    return new ByProjectKeyAsAssociateByAssociateIdInBusinessUnitKeyByBusinessUnitKeyShoppingListsByIDRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }

  /**
   *	Retrieves ShoppingLists in a [BusinessUnit](ctp:api:type:BusinessUnit).
   */
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/shopping-lists',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Checks if one or more ShoppingLists exist for the provided query predicate in a [BusinessUnit](ctp:api:type:BusinessUnit). Returns a `200` status if any ShoppingLists match the query predicate, or a `404` status otherwise.
   *
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/shopping-lists',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Creates a ShoppingList in the [BusinessUnit](ctp:api:type:BusinessUnit) referenced by `businessUnitKey`. As such, the `businessUnit` field on [ShoppingListDraft](ctp:api:type:ShoppingListDraft) is ignored for this request.
   *
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/shopping-lists',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs,
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyAsAssociateByAssociateIdInBusinessUnitKeyByBusinessUnitKeyRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  /**
   *	An Approval Rule describes the conditions determining whether an Order that matches the predicate needs approval by an approver before it can be ordered by an requester within a Business Unit.
   */
  approvalRules() {
    return new ByProjectKeyAsAssociateByAssociateIdInBusinessUnitKeyByBusinessUnitKeyApprovalRulesRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  /**
   *	Approval Flows connect Orders that require approval with the Approval Rules that initiate the approval requirement.
   *	They represent the approval process by including information about approvals, rejections, and all involved parties.
   *
   */
  approvalFlows() {
    return new ByProjectKeyAsAssociateByAssociateIdInBusinessUnitKeyByBusinessUnitKeyApprovalFlowsRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  /**
   *	A shopping cart holds product variants and can be ordered.
   */
  carts() {
    return new ByProjectKeyAsAssociateByAssociateIdInBusinessUnitKeyByBusinessUnitKeyCartsRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  /**
   *	shopping-lists e.g. for wishlist support
   *
   */
  shoppingLists() {
    return new ByProjectKeyAsAssociateByAssociateIdInBusinessUnitKeyByBusinessUnitKeyShoppingListsRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  orders() {
    return new ByProjectKeyAsAssociateByAssociateIdInBusinessUnitKeyByBusinessUnitKeyOrdersRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  /**
   *	A quote holds the negotiated offer.
   */
  quotes() {
    return new ByProjectKeyAsAssociateByAssociateIdInBusinessUnitKeyByBusinessUnitKeyQuotesRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  quoteRequests() {
    return new ByProjectKeyAsAssociateByAssociateIdInBusinessUnitKeyByBusinessUnitKeyQuoteRequestsRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyAsAssociateByAssociateIdRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  /**
   *	A Business Unit can represent a Company or a Division.
   */
  businessUnits() {
    return new ByProjectKeyAsAssociateByAssociateIdBusinessUnitsRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  inBusinessUnitKeyWithBusinessUnitKeyValue(childPathArgs) {
    return new ByProjectKeyAsAssociateByAssociateIdInBusinessUnitKeyByBusinessUnitKeyRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyAsAssociateRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  withAssociateIdValue(childPathArgs) {
    return new ByProjectKeyAsAssociateByAssociateIdRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyAssociateRolesByIDRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/associate-roles/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Checks if an AssociateRole exists with the provided `id`. Returns a `200` status if the AssociateRole exists, or a `404` status otherwise.
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/associate-roles/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      }
    }, this.args.executeRequest);
  }
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/associate-roles/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs,
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'DELETE',
      uriTemplate: '/{projectKey}/associate-roles/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyAssociateRolesKeyByKeyRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/associate-roles/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Checks if an AssociateRole exists with the provided `key`. Returns a `200` status if the AssociateRole exists, or a `404` status otherwise.
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/associate-roles/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      }
    }, this.args.executeRequest);
  }
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/associate-roles/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs,
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
  /**
   *	Deleting an AssociateRole generates the [AssociateRoleDeleted](ctp:api:type:AssociateRoleDeletedMessage) Message. An AssociateRole can only be deleted if it is not assigned to any [Associates](ctp:api:type:Associate).
   *
   */
  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'DELETE',
      uriTemplate: '/{projectKey}/associate-roles/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyAssociateRolesRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  withKey(childPathArgs) {
    return new ByProjectKeyAssociateRolesKeyByKeyRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  withId(childPathArgs) {
    return new ByProjectKeyAssociateRolesByIDRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/associate-roles',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Checks if one or more AssociateRoles exist for the provided query predicate. Returns a `200` status if any AssociateRole match the query predicate, or a `404` status otherwise.
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/associate-roles',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Creating a Associate Role generates the [AssociateRoleCreated](ctp:api:type:AssociateRoleCreatedMessage) Message.
   *
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/associate-roles',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs,
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyAttributeGroupsByIDRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/attribute-groups/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Checks if an AttributeGroup exists with the provided `id`. Returns a `200` status if the AttributeGroup exists, or a `404` status otherwise.
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/attribute-groups/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      }
    }, this.args.executeRequest);
  }
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/attribute-groups/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs,
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'DELETE',
      uriTemplate: '/{projectKey}/attribute-groups/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyAttributeGroupsKeyByKeyRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/attribute-groups/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Checks if an AttributeGroup exists with the provided `key`. Returns `200` status if the AttributeGroup exists, or a `404` status otherwise.
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/attribute-groups/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      }
    }, this.args.executeRequest);
  }
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/attribute-groups/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs,
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'DELETE',
      uriTemplate: '/{projectKey}/attribute-groups/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyAttributeGroupsRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  withKey(childPathArgs) {
    return new ByProjectKeyAttributeGroupsKeyByKeyRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  withId(childPathArgs) {
    return new ByProjectKeyAttributeGroupsByIDRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/attribute-groups',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Checks if one or more AttributeGroups exist for the provided query predicate. Returns `200` status if any AttributeGroups match the query predicate, or a `404` status otherwise.
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/attribute-groups',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/attribute-groups',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs,
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyBusinessUnitsByBusinessUnitIdAssociatesByAssociateIdRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  /**
   *	Retrieves roles and permissions of an Associate in a Business Unit.
   *
   */
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/business-units/{businessUnitId}/associates/{associateId}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      }
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyBusinessUnitsKeyByKeyAssociatesByAssociateIdRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  /**
   *	Retrieves roles and permissions of an Associate in a Business Unit.
   *
   */
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/business-units/key={key}/associates/{associateId}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      }
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyBusinessUnitsSearchIndexingStatusRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  /**
   *	Returns the indexing status of the Business Unit Search for a Project.
   *
   */
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/business-units/search/indexing-status',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      }
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyBusinessUnitsSearchRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  /**
   *	If the initial indexing is in progress or the feature is inactive, A [SearchNotReady](ctp:api:type:SearchNotReadyError) error is returned. If inactive, you can [reactivate](/../api/projects/business-unit-search#reactivate) it.
   *
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/business-units/search',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
  /**
   *	Checks whether a search index of Business Units exists for a Project.
   *	Returns a `200 OK` if an index exists; otherwise, returns a `409 Conflict`.
   *
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/business-units/search',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      }
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyBusinessUnitsByIDRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/business-units/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Checks if a BusinessUnit exists with the provided `id`. Returns a `200` status if the BusinessUnit exists, or a `404` status otherwise.
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/business-units/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      }
    }, this.args.executeRequest);
  }
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/business-units/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs,
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'DELETE',
      uriTemplate: '/{projectKey}/business-units/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyBusinessUnitsKeyByKeyRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/business-units/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Checks if a BusinessUnit exists with the provided `key`. Returns a `200` status if the BusinessUnit exists, or a `404` status otherwise.
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/business-units/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      }
    }, this.args.executeRequest);
  }
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/business-units/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs,
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'DELETE',
      uriTemplate: '/{projectKey}/business-units/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyBusinessUnitsRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  withKey(childPathArgs) {
    return new ByProjectKeyBusinessUnitsKeyByKeyRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  withId(childPathArgs) {
    return new ByProjectKeyBusinessUnitsByIDRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  keyWithKeyValueAssociatesWithAssociateIdValue(childPathArgs) {
    return new ByProjectKeyBusinessUnitsKeyByKeyAssociatesByAssociateIdRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  withBusinessUnitIdValueAssociatesWithAssociateIdValue(childPathArgs) {
    return new ByProjectKeyBusinessUnitsByBusinessUnitIdAssociatesByAssociateIdRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  /**
   *	This endpoint provides high-performance search queries over Business Units.
   *
   */
  search() {
    return new ByProjectKeyBusinessUnitsSearchRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  searchIndexingStatus() {
    return new ByProjectKeyBusinessUnitsSearchIndexingStatusRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/business-units',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Checks if one or more BusinessUnits exist for the provided query predicate. Returns a `200` status if any BusinessUnits match the query predicate, or a `404` status otherwise.
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/business-units',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/business-units',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs,
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyCartDiscountsByIDRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/cart-discounts/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Checks if a CartDiscount exists with the provided `id`. Returns a `200` status if the CartDiscount exists, or a `404` status otherwise.
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/cart-discounts/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      }
    }, this.args.executeRequest);
  }
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/cart-discounts/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs,
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
  /**
   *	Deleting a Cart Discount produces the [CartDiscountDeleted](ctp:api:type:CartDiscountDeletedMessage) Message.
   */
  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'DELETE',
      uriTemplate: '/{projectKey}/cart-discounts/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyCartDiscountsKeyByKeyRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/cart-discounts/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Checks if a CartDiscount exists with the provided `key`. Returns a `200` status if the CartDiscount exists, or a `404` status otherwise.
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/cart-discounts/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      }
    }, this.args.executeRequest);
  }
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/cart-discounts/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs,
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
  /**
   *	Deleting a Cart Discount produces the [CartDiscountDeleted](ctp:api:type:CartDiscountDeletedMessage) Message.
   */
  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'DELETE',
      uriTemplate: '/{projectKey}/cart-discounts/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyCartDiscountsRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  withKey(childPathArgs) {
    return new ByProjectKeyCartDiscountsKeyByKeyRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  withId(childPathArgs) {
    return new ByProjectKeyCartDiscountsByIDRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/cart-discounts',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Checks if one or more CartDiscounts exist for the provided query predicate. Returns a `200` status if any CartDiscounts match the query predicate, or a `404` status otherwise.
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/cart-discounts',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Creating a Cart Discount produces the [CartDiscountCreated](ctp:api:type:CartDiscountCreatedMessage) Message.
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/cart-discounts',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs,
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyCartsReplicateRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  /**
   *	Creates a new Cart by replicating an existing Cart or Order.
   *
   *	The following applies to the new Cart:
   *
   *	- It contains the same Customer information, Line Items and Custom Line Items, Custom Fields, Discount Codes, and other settings of the originating Cart or Order.
   *	- If a Line Item becomes invalid, it is removed from the new Cart. A common reason for this is removed Products or Prices.
   *	- Line items and Custom Line Items are reset to their initial [state](/projects/carts#itemstate).
   *	- It contains no payments or delivery information.
   *	- It contains up-to-date Tax Rates, Prices, and Line Item product data.
   *	- The [CartState](/projects/carts#cartstate) is `Active`.
   *	- If using the `customerGroup` field (for a single Customer Group) and the referenced Customer switched to another Customer Group, the new Cart is automatically updated to reflect the new group and corresponding prices.
   *	- If using the `customerGroupAssignments` field (for multiple Customer Groups), the Cart no longer keeps a direct reference to a Customer Group. If a Customer’s group assignments change, the Cart and its Line Item prices are not updated automatically. Prices are only updated when the Cart is changed via a [direct update action](/projects/carts#update-actions).
   *
   *	Specific Error Codes:
   *
   *	- [MatchingPriceNotFound](ctp:api:type:MatchingPriceNotFoundError)
   *	- [MissingTaxRateForCountry](ctp:api:type:MissingTaxRateForCountryError)
   *
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/carts/replicate',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyCartsByIDRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  /**
   *	Retrieves a Cart with the provided `id`.
   *	To ensure the Cart is up-to-date with current values (such as Prices and Discounts), use the [Recalculate](ctp:api:type:CartRecalculateAction) update action.
   *
   */
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/carts/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Checks if a Cart exists for the provided `id`. Returns a `200` status if the Cart exists, or a `404` status otherwise.
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/carts/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      }
    }, this.args.executeRequest);
  }
  /**
   *	Updates a Cart in the Project using one or more [update actions](/../api/projects/carts#update-actions).
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/carts/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs,
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
  /**
   *	Deletes a Cart in the Project.
   */
  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'DELETE',
      uriTemplate: '/{projectKey}/carts/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyCartsCustomerIdByCustomerIdRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  /**
   *	Retrieves the most recently modified active Cart of a Customer with [CartOrigin](ctp:api:type:CartOrigin) `Customer`. If no active Cart exists, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.
   *
   *	To ensure the Cart is up-to-date with current values (such as Prices and Discounts), use the [Recalculate](ctp:api:type:CartRecalculateAction) update action.
   *
   */
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/carts/customer-id={customerId}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Checks if a Cart exists for a Customer. Returns a `200` status if the Cart exists, or a `404` status otherwise.
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/carts/customer-id={customerId}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      }
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyCartsKeyByKeyRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  /**
   *	Retrieves a Cart with the provided `key`.
   *	To ensure the Cart is up-to-date with current values (such as Prices and Discounts), use the [Recalculate](ctp:api:type:CartRecalculateAction) update action.
   *
   */
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/carts/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Checks if a Cart exists with the provided `key`. Returns a `200` status if the Cart exists, or a `404` status otherwise.
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/carts/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      }
    }, this.args.executeRequest);
  }
  /**
   *	Updates a Cart in the Project using one or more [update actions](/../api/projects/carts#update-actions).
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/carts/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs,
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
  /**
   *	Deletes a Cart in the Project.
   */
  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'DELETE',
      uriTemplate: '/{projectKey}/carts/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyCartsRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  replicate() {
    return new ByProjectKeyCartsReplicateRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  withCustomerId(childPathArgs) {
    return new ByProjectKeyCartsCustomerIdByCustomerIdRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  withKey(childPathArgs) {
    return new ByProjectKeyCartsKeyByKeyRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  withId(childPathArgs) {
    return new ByProjectKeyCartsByIDRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }

  /**
   *	Retrieves Carts in the Project.
   */
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/carts',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Checks if one or more Carts exist for the provided query predicate. Returns a `200` status if any Carts match the query predicate, or a `404` status otherwise.
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/carts',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *
   *	Creates a Cart in the Project.
   *
   *	If the referenced [ShippingMethod](ctp:api:type:ShippingMethod) in the [CartDraft](ctp:api:type:CartDraft) has a predicate that does not match, or if the Shipping Method is not active, an [InvalidOperation](ctp:api:type:InvalidOperationError) error is returned.
   *
   *	Specific Error Codes:
   *
   *	- [DiscountCodeNonApplicable](ctp:api:type:DiscountCodeNonApplicableError)
   *	- [InvalidItemShippingDetails](ctp:api:type:InvalidItemShippingDetailsError)
   *	- [MatchingPriceNotFound](ctp:api:type:MatchingPriceNotFoundError)
   *	- [MissingTaxRateForCountry](ctp:api:type:MissingTaxRateForCountryError)
   *
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/carts',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs,
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyCategoriesByIDRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  /**
   *	Either the [scope](/../api/scopes) `view_products:{projectKey}` or `view_categories:{projectKey}` is required.
   *
   */
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/categories/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Checks if a Category exists with the provided `id`. Returns a `200` status if the Category exists, or a `404` status otherwise.
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/categories/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      }
    }, this.args.executeRequest);
  }
  /**
   *	Either the [scope](/../api/scopes) `manage_products:{projectKey}` or `manage_categories:{projectKey}` is required.
   *
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/categories/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs,
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
  /**
   *	Either the [scope](/../api/scopes) `manage_products:{projectKey}` or `manage_categories:{projectKey}` is required.
   *
   */
  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'DELETE',
      uriTemplate: '/{projectKey}/categories/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyCategoriesKeyByKeyRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  /**
   *	Either the [scope](/../api/scopes) `view_products:{projectKey}` or `view_categories:{projectKey}` is required.
   *
   */
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/categories/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Checks if a Category exists with the provided `key`. Returns a `200` status if the Category exists, or a `404` status otherwise.
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/categories/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      }
    }, this.args.executeRequest);
  }
  /**
   *	Either the [scope](/../api/scopes) `manage_products:{projectKey}` or `manage_categories:{projectKey}` is required.
   *
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/categories/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs,
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
  /**
   *	Either the [scope](/../api/scopes) `manage_products:{projectKey}` or `manage_categories:{projectKey}` is required.
   *
   */
  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'DELETE',
      uriTemplate: '/{projectKey}/categories/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyCategoriesRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  withKey(childPathArgs) {
    return new ByProjectKeyCategoriesKeyByKeyRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  withId(childPathArgs) {
    return new ByProjectKeyCategoriesByIDRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }

  /**
   *	Either the [scope](/../api/scopes) `view_products:{projectKey}` or `view_categories:{projectKey}` is required.
   *
   */
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/categories',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Checks if one or more Categories exist for the provided query predicate. Returns a `200` status if any Categories match the query predicate, or a `404` status otherwise.
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/categories',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Either the [scope](/../api/scopes) `manage_products:{projectKey}` or `manage_categories:{projectKey}` is required.
   *
   *	Creating a Category produces the [CategoryCreated](ctp:api:type:CategoryCreatedMessage) Message.
   *
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/categories',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs,
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyChannelsByIDRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/channels/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Checks if a Channel exists with the provided `id`. Returns a `200` status if the Channel exists, or a `404` status otherwise.
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/channels/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      }
    }, this.args.executeRequest);
  }
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/channels/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs,
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
  /**
   *	Returns a [ReferenceExists](ctp:api:type:ReferenceExistsError) error if other resources reference the Channel to be deleted.
   *
   */
  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'DELETE',
      uriTemplate: '/{projectKey}/channels/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyChannelsKeyByKeyRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/channels/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Checks if a Channel exists with the provided `key`. Returns a `200` status if the Channel exists, or a `404` status otherwise.
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/channels/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      }
    }, this.args.executeRequest);
  }
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/channels/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs,
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
  /**
   *	Returns a [ReferenceExists](ctp:api:type:ReferenceExistsError) error if other resources reference the Channel to be deleted.
   *
   */
  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'DELETE',
      uriTemplate: '/{projectKey}/channels/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyChannelsRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  withId(childPathArgs) {
    return new ByProjectKeyChannelsByIDRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  withKey(childPathArgs) {
    return new ByProjectKeyChannelsKeyByKeyRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/channels',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Checks if one or more Channels exist for the provided query predicate. Returns a `200` status if any Channels match the query predicate, or a `404` status otherwise.
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/channels',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/channels',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs,
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyCustomObjectsByContainerByKeyRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/custom-objects/{container}/{key}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'DELETE',
      uriTemplate: '/{projectKey}/custom-objects/{container}/{key}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyCustomObjectsByContainerRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/custom-objects/{container}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyCustomObjectsRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  withContainerAndKey(childPathArgs) {
    return new ByProjectKeyCustomObjectsByContainerByKeyRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  withContainer(childPathArgs) {
    return new ByProjectKeyCustomObjectsByContainerRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }

  /**
   *	For performance reasons, it is highly advisable to query for Custom Objects in a container by using the `container` field in the `where` predicate.
   *
   */
  /**
   * @deprecated
   **/
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/custom-objects',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Checks if one or more CustomObjects exist for the provided query predicate. Returns a `200` status if any CustomObjects match the query predicate, or a `404` status otherwise.
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/custom-objects',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	If an object with the given container/key exists, the object will be replaced with the new value and the version is incremented.
   *	If the request contains a version and an object with the given container/key, then the version must match the version of the existing object. Concurrent updates to the same Custom Object returns a [ConcurrentModification](ctp:api:type:ConcurrentModificationError) error even if the version is not provided.
   *
   *	Fields within `value` that have `null` values **are not saved**.
   *
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/custom-objects',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs,
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyCustomerGroupsByIDRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/customer-groups/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Checks if a CustomerGroup exists with the provided `id`. Returns a `200` status if the CustomerGroup exists, or a `404` status otherwise.
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/customer-groups/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      }
    }, this.args.executeRequest);
  }
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/customer-groups/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs,
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'DELETE',
      uriTemplate: '/{projectKey}/customer-groups/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyCustomerGroupsKeyByKeyRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/customer-groups/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Checks if a CustomerGroup exists with the provided `key`. Returns a `200` status if the CustomerGroup exists, or a `404` status otherwise.
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/customer-groups/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      }
    }, this.args.executeRequest);
  }
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/customer-groups/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs,
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'DELETE',
      uriTemplate: '/{projectKey}/customer-groups/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyCustomerGroupsRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  withKey(childPathArgs) {
    return new ByProjectKeyCustomerGroupsKeyByKeyRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  withId(childPathArgs) {
    return new ByProjectKeyCustomerGroupsByIDRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/customer-groups',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Checks if one or more CustomerGroups exist for the provided query predicate. Returns a `200` status if any CustomerGroup match the query predicate, or a `404` status otherwise.
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/customer-groups',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/customer-groups',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs,
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyCustomersEmailConfirmRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  /**
   *	Use this method to verify a global Customer's email during their [email verification process](/../api/customers-overview#customer-email-verification).
   *
   *	Verifying the email of the Customer produces the [CustomerEmailVerified](ctp:api:type:CustomerEmailVerifiedMessage) Message.
   *
   *	After the email is verified, all email tokens issued previously through the [email verification flow](/../api/projects/customers#email-verification-of-customer) are invalidated. This invalidation of tokens is [eventually consistent](/../api/general-concepts#eventual-consistency).
   *
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/customers/email/confirm',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyCustomersEmailTokenRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  /**
   *	Use this method to create an email token for a global Customer during their [email verification process](/../api/customers-overview#customer-email-verification).
   *
   *	Creating an email token for the Customer produces the [CustomerEmailTokenCreated](ctp:api:type:CustomerEmailTokenCreatedMessage) Message.
   *	The Message will include the token's value, if the token's validity is 60 minutes or less.
   *
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/customers/email-token',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyCustomersSearchIndexingStatusRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  /**
   *	Returns the indexing status of the Customer Search for a Project.
   *
   */
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/customers/search/indexing-status',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      }
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyCustomersPasswordTokenRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  /**
   *	Use this method to create a password reset token for a global Customer during their [password reset process](/../api/customers-overview#customer-password-reset).
   *
   *	Creating a password reset token for the Customer produces the [CustomerPasswordTokenCreated](ctp:api:type:CustomerPasswordTokenCreatedMessage) Message.
   *	The Message will include the token's value, if the token's validity is 60 minutes or less.
   *
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/customers/password-token',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyCustomersPasswordRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  /**
   *	Changing the password produces the [CustomerPasswordUpdated](ctp:api:type:CustomerPasswordUpdatedMessage) Message with `reset=false`.
   *
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/customers/password',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyCustomersPasswordResetRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  /**
   *	Use this method to reset a global Customer's password during their [password reset process](/../api/customers-overview#customer-password-reset).
   *
   *	Resetting the password of the Customer produces the [CustomerPasswordUpdated](ctp:api:type:CustomerPasswordUpdatedMessage) Message with `reset=true`.
   *
   *	After the password is reset, all password tokens issued previously through the [password reset flow](/../api/projects/customers#password-reset-of-customer) are invalidated. In addition, any access and refresh tokens issued previously through the [password flow](/../api/authorization#password-flow) and [refresh token flow](/../api/authorization#refresh-token-flow) are invalidated. This invalidation of tokens is [eventually consistent](/../api/general-concepts#eventual-consistency).
   *
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/customers/password/reset',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyCustomersSearchRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  /**
   *	If the initial indexing is in progress or the feature is inactive, a [SearchNotReady](ctp:api:type:SearchNotReadyError) error is returned.
   *	If inactive, you can [reactivate](/../api/projects/customer-search#reactivate) it.
   *
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/customers/search',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
  /**
   *	Checks whether a search index of Customers exists for a Project.
   *	Returns a `200 OK` if an index exists; otherwise, returns a `409 Conflict`.
   *
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/customers/search',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      }
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyCustomersByIDRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/customers/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Checks if a Customer exists with the provided `id`. Returns a `200` status if the Customer exists, or a `404` status otherwise.
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/customers/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      }
    }, this.args.executeRequest);
  }
  /**
   *	Simultaneously updating two Customers with the same email address can return a [LockedField](ctp:api:type:LockedFieldError) error.
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/customers/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs,
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
  /**
   *	Deleting a Customer produces the [CustomerDeleted](ctp:api:type:CustomerDeletedMessage) Message.
   *
   */
  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'DELETE',
      uriTemplate: '/{projectKey}/customers/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyCustomersEmailTokenByEmailTokenRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  /**
   *	Use this method to retrieve a global Customer's details by using the email token during their [email verification process](/../api/customers-overview#customer-email-verification).
   *
   */
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/customers/email-token={emailToken}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyCustomersKeyByKeyRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/customers/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Checks if a Customer exists with the provided `key`. Returns a `200` status if the Customer exists, or a `404` status otherwise.
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/customers/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      }
    }, this.args.executeRequest);
  }
  /**
   *	Simultaneously updating two Customers with the same email address can return a [LockedField](ctp:api:type:LockedFieldError) error.
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/customers/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs,
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
  /**
   *	Deleting a Customer produces the [CustomerDeleted](ctp:api:type:CustomerDeletedMessage) Message.
   *
   */
  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'DELETE',
      uriTemplate: '/{projectKey}/customers/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyCustomersPasswordTokenByPasswordTokenRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  /**
   *	Use this method to retrieve the details of a global Customer by using the password token during their [password reset process](/../api/customers-overview#customer-password-reset).
   *
   */
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/customers/password-token={passwordToken}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyCustomersRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  withPasswordToken(childPathArgs) {
    return new ByProjectKeyCustomersPasswordTokenByPasswordTokenRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  withEmailToken(childPathArgs) {
    return new ByProjectKeyCustomersEmailTokenByEmailTokenRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  emailToken() {
    return new ByProjectKeyCustomersEmailTokenRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  emailConfirm() {
    return new ByProjectKeyCustomersEmailConfirmRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  password() {
    return new ByProjectKeyCustomersPasswordRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  passwordReset() {
    return new ByProjectKeyCustomersPasswordResetRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  /**
   *	Produces the [CustomerPasswordTokenCreated](ctp:api:type:CustomerPasswordTokenCreatedMessage) Message.
   */
  passwordToken() {
    return new ByProjectKeyCustomersPasswordTokenRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  withKey(childPathArgs) {
    return new ByProjectKeyCustomersKeyByKeyRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  withId(childPathArgs) {
    return new ByProjectKeyCustomersByIDRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  /**
   *	This endpoint provides high-performance search queries over Customers.
   *
   */
  search() {
    return new ByProjectKeyCustomersSearchRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  searchIndexingStatus() {
    return new ByProjectKeyCustomersSearchIndexingStatusRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/customers',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Checks if one or more Customers exist for the provided query predicate. Returns a `200` status if any Customers match the query predicate, or a `404` status otherwise.
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/customers',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Creating a Customer produces the [CustomerCreated](ctp:api:type:CustomerCreatedMessage) Message. Simultaneously creating two Customers with the same email address can return a [LockedField](ctp:api:type:LockedFieldError) error.
   *
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/customers',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs,
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyDiscountCodesByIDRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  /**
   *	Deprecated OAuth 2.0 Scope: `view_orders:{projectKey}`
   */
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/discount-codes/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Checks if a DiscountCode exists with the provided `id`. Returns a `200` status if the DiscountCode exists, or a `404` status otherwise.
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/discount-codes/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      }
    }, this.args.executeRequest);
  }
  /**
   *	Deprecated OAuth 2.0 Scope: `manage_orders:{projectKey}`
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/discount-codes/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs,
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
  /**
   *	Deleting a Discount Code produces the [DiscountCodeDeleted](ctp:api:type:DiscountCodeDeletedMessage) Message.
   *
   *	Deprecated OAuth 2.0 Scope: `manage_orders:{projectKey}`
   *
   */
  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'DELETE',
      uriTemplate: '/{projectKey}/discount-codes/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyDiscountCodesKeyByKeyRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  /**
   *	Deprecated OAuth 2.0 Scope: `view_orders:{projectKey}`
   */
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/discount-codes/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Checks if a DiscountCode exists with the provided `key`. Returns a `200` status if the DiscountCode exists, or a `404` status otherwise.
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/discount-codes/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      }
    }, this.args.executeRequest);
  }
  /**
   *	Deprecated OAuth 2.0 Scope: `manage_orders:{projectKey}`
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/discount-codes/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs,
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
  /**
   *	Deleting a Discount Code produces the [DiscountCodeDeleted](ctp:api:type:DiscountCodeDeletedMessage) Message.
   *
   *	Deprecated OAuth 2.0 Scope: `manage_orders:{projectKey}`
   *
   */
  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'DELETE',
      uriTemplate: '/{projectKey}/discount-codes/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyDiscountCodesRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  withId(childPathArgs) {
    return new ByProjectKeyDiscountCodesByIDRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  withKey(childPathArgs) {
    return new ByProjectKeyDiscountCodesKeyByKeyRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }

  /**
   *	Deprecated OAuth 2.0 Scope: `view_orders:{projectKey}`
   */
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/discount-codes',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Checks if one or more DiscountCodes exist for the provided query predicate. Returns a `200` status if any DiscountCodes match the query predicate, or a `404` status otherwise.
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/discount-codes',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Creating a Discount Code produces the [DiscountCodeCreated](ctp:api:type:DiscountCodeCreatedMessage) Message.
   *
   *	Deprecated OAuth 2.0 Scope: `manage_orders:{projectKey}`
   *
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/discount-codes',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs,
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyDiscountGroupsByIDRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  /**
   *	Retrieves a DiscountGroup with the provided `id`.
   *
   */
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/discount-groups/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Checks if a DiscountGroup exists with the provided `id`.
   *	Returns a `200` status if a DiscountGroup exists, or a `404` status otherwise.
   *
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/discount-groups/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      }
    }, this.args.executeRequest);
  }
  /**
   *	Updates a DiscountGroup in the Project using one or more [update actions](/../api/projects/discount-groups#update-actions).
   *
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/discount-groups/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs,
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
  /**
   *	Deletes a DiscountGroup in the Project.
   *	This request generates the [DiscountGroupDeleted](ctp:api:type:DiscountGroupDeletedMessage) Message.
   *
   *	If the DiscountGroup is referenced by a CartDiscount, a [ReferenceExists](ctp:api:type:ReferenceExistsError) error is returned.
   *
   */
  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'DELETE',
      uriTemplate: '/{projectKey}/discount-groups/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyDiscountGroupsKeyByKeyRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  /**
   *	Retrieves a DiscountGroup with the provided `key`.
   *
   */
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/discount-groups/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Checks if a DiscountGroup exists with the provided `key`.
   *	Returns a `200` status if a DiscountGroup exists, or a `404` status otherwise.
   *
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/discount-groups/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      }
    }, this.args.executeRequest);
  }
  /**
   *	Updates a DiscountGroup in the Project using one or more [update actions](/../api/projects/discount-groups#update-actions).
   *
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/discount-groups/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs,
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
  /**
   *	Deletes a DiscountGroup in the Project.
   *	This request generates the [DiscountGroupDeleted](ctp:api:type:DiscountGroupDeletedMessage) Message.
   *
   *	If the DiscountGroup is referenced by a CartDiscount, a [ReferenceExists](ctp:api:type:ReferenceExistsError) error is returned.
   *
   */
  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'DELETE',
      uriTemplate: '/{projectKey}/discount-groups/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyDiscountGroupsRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  withKey(childPathArgs) {
    return new ByProjectKeyDiscountGroupsKeyByKeyRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  withId(childPathArgs) {
    return new ByProjectKeyDiscountGroupsByIDRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }

  /**
   *	Retrieves all DiscountGroups in the Project.
   *
   */
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/discount-groups',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Checks if one or more DiscountGroups exist for the provided query predicate.
   *	Returns a `200` status if any DiscountGroups match the query predicate, or a `404` status otherwise.
   *
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/discount-groups',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Creates a DiscountGroup in the Project.
   *	This request generates the [DiscountGroupCreated](ctp:api:type:DiscountGroupCreatedMessage) Message.
   *
   *	If the [limit](/../api/limits#discount-groups) for active Discount Groups has been reached, a [MaxDiscountGroupsReached](ctp:api:type:MaxDiscountGroupsReachedError) error is returned.
   *
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/discount-groups',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs,
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyExtensionsByIDRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/extensions/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      }
    }, this.args.executeRequest);
  }
  /**
   *	Checks if an Extension exists with the provided `id`. Returns a `200` status if the Extension exists, or a `404` status otherwise.
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/extensions/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      }
    }, this.args.executeRequest);
  }
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/extensions/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'DELETE',
      uriTemplate: '/{projectKey}/extensions/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyExtensionsKeyByKeyRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/extensions/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      }
    }, this.args.executeRequest);
  }
  /**
   *	Checks if an Extension exists with the provided `key`. Returns a `200` status if the Extension exists, or a `404` status otherwise.
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/extensions/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      }
    }, this.args.executeRequest);
  }
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/extensions/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'DELETE',
      uriTemplate: '/{projectKey}/extensions/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyExtensionsRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  withKey(childPathArgs) {
    return new ByProjectKeyExtensionsKeyByKeyRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  withId(childPathArgs) {
    return new ByProjectKeyExtensionsByIDRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/extensions',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Checks if one or more Extensions exist for the provided query predicate. Returns a `200` status if any Extensions match the query predicate, or a `404` status otherwise.
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/extensions',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/extensions',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyGraphqlRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  /**
   *	Execute a GraphQL request.
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/graphql',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyInBusinessUnitKeyByBusinessUnitKeyMeCustomersRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  /**
   *	The My Business Unit endpoint does not support assigning existing Customers to a Business Unit.
   *	Associates with the `UpdateAssociates` [Permission](ctp:api:type:Permission) can use this endpoint to create a new Customer and associate it with the Business Unit.
   *	If the required [Permission](/projects/associate-roles#permission) is missing, an [AssociateMissingPermission](/errors#associatemissingpermission) error is returned.
   *
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/in-business-unit/key={businessUnitKey}/me/customers',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyInBusinessUnitKeyByBusinessUnitKeyMeRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  customers() {
    return new ByProjectKeyInBusinessUnitKeyByBusinessUnitKeyMeCustomersRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyInBusinessUnitKeyByBusinessUnitKeyRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  me() {
    return new ByProjectKeyInBusinessUnitKeyByBusinessUnitKeyMeRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyInStoreKeyByStoreKeyBusinessUnitsByBusinessUnitIdAssociatesByAssociateIdRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  /**
   *	Retrieves roles and permissions of an Associate in a Business Unit in a Store.
   *
   */
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/business-units/{businessUnitId}/associates/{associateId}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      }
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyInStoreKeyByStoreKeyBusinessUnitsKeyByKeyAssociatesByAssociateIdRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  /**
   *	Retrieves roles and permissions of an Associate in a Business Unit in a Store.
   *
   */
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/business-units/key={key}/associates/{associateId}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      }
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyInStoreKeyByStoreKeyBusinessUnitsByIDRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/business-units/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Checks if a BusinessUnit exists with the provided `id`. Returns a `200` status if the BusinessUnit exists, or a `404` status otherwise.
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/business-units/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      }
    }, this.args.executeRequest);
  }
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/business-units/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs,
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'DELETE',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/business-units/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyInStoreKeyByStoreKeyBusinessUnitsKeyByKeyRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/business-units/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Checks if a BusinessUnit exists with the provided `key`. Returns a `200` status if the BusinessUnit exists, or a `404` status otherwise.
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/business-units/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      }
    }, this.args.executeRequest);
  }
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/business-units/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs,
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'DELETE',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/business-units/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyInStoreKeyByStoreKeyBusinessUnitsRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  withKey(childPathArgs) {
    return new ByProjectKeyInStoreKeyByStoreKeyBusinessUnitsKeyByKeyRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  withId(childPathArgs) {
    return new ByProjectKeyInStoreKeyByStoreKeyBusinessUnitsByIDRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  keyWithKeyValueAssociatesWithAssociateIdValue(childPathArgs) {
    return new ByProjectKeyInStoreKeyByStoreKeyBusinessUnitsKeyByKeyAssociatesByAssociateIdRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  withBusinessUnitIdValueAssociatesWithAssociateIdValue(childPathArgs) {
    return new ByProjectKeyInStoreKeyByStoreKeyBusinessUnitsByBusinessUnitIdAssociatesByAssociateIdRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/business-units',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Checks if one or more BusinessUnits exist for the provided query predicate. Returns a `200` status if any BusinessUnits match the query predicate, or a `404` status otherwise.
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/business-units',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/business-units',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs,
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyInStoreKeyByStoreKeyCartDiscountsByIDRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/cart-discounts/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Checks if a CartDiscount exists with the provided `id`. Returns a `200` status if the CartDiscount exists, or a `404` status otherwise.
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/cart-discounts/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      }
    }, this.args.executeRequest);
  }
  /**
   *	To update a CartDiscount, you must have permissions for all Stores the CartDiscount is associated with, except when [removing a Store](ctp:api:type:CartDiscountRemoveStoreAction).
   *
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/cart-discounts/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs,
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
  /**
   *	To delete a CartDiscount, specify the `manage_cart_discounts:{projectKey}:{storeKey}` scope for all Stores associated with the CartDiscount.
   *
   *	Deleting a Cart Discount produces the [CartDiscountDeleted](ctp:api:type:CartDiscountDeletedMessage) Message.
   *
   */
  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'DELETE',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/cart-discounts/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyInStoreKeyByStoreKeyCartDiscountsKeyByKeyRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/cart-discounts/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Checks if a CartDiscount exists with the provided `key`. Returns a `200` status if the CartDiscount exists, or a `404` status otherwise.
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/cart-discounts/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      }
    }, this.args.executeRequest);
  }
  /**
   *	To update a CartDiscount, you must have permissions for all Stores the CartDiscount is associated with, except when [removing a Store](ctp:api:type:CartDiscountRemoveStoreAction).
   *
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/cart-discounts/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs,
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
  /**
   *	To delete a CartDiscount, specify the `manage_cart_discounts:{projectKey}:{storeKey}` scope for all Stores associated with the CartDiscount.
   *
   *	Deleting a Cart Discount produces the [CartDiscountDeleted](ctp:api:type:CartDiscountDeletedMessage) Message.
   *
   */
  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'DELETE',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/cart-discounts/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyInStoreKeyByStoreKeyCartDiscountsRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  withKey(childPathArgs) {
    return new ByProjectKeyInStoreKeyByStoreKeyCartDiscountsKeyByKeyRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  withId(childPathArgs) {
    return new ByProjectKeyInStoreKeyByStoreKeyCartDiscountsByIDRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/cart-discounts',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Checks if one or more CartDiscounts exist for the provided query predicate. Returns a `200` status if any CartDiscounts match the query predicate, or a `404` status otherwise.
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/cart-discounts',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	When using the endpoint, the Store specified in the path and the Stores specified in the payload's `stores` field are added to the CartDiscount.
   *
   *	Creating a Cart Discount produces the [CartDiscountCreated](ctp:api:type:CartDiscountCreatedMessage) Message.
   *
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/cart-discounts',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs,
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyInStoreKeyByStoreKeyCartsReplicateRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  /**
   *	Creates a new Cart in a [Store](ctp:api:type:Store) by replicating an existing Cart or Order.
   *
   *	The following applies to the new Cart:
   *
   *	- It contains the same Customer information, Line Items and Custom Line Items, Custom Fields, Discount Codes, and other settings of the originating Cart or Order.
   *	- If a Line Item becomes invalid, it is removed from the new Cart. A common reason for this is removed Products or Prices.
   *	- Line items and Custom Line Items are reset to their initial [state](/projects/carts#itemstate).
   *	- It contains no payments or delivery information.
   *	- It contains up-to-date Tax Rates, Prices, and Line Item product data.
   *	- The [CartState](/projects/carts#cartstate) is `Active`.
   *	- If using the `customerGroup` field (for a single Customer Group) and the referenced Customer switched to another Customer Group, the new Cart is automatically updated to reflect the new group and corresponding prices.
   *	- If using the `customerGroupAssignments` field (for multiple Customer Groups), the Cart no longer keeps a direct reference to a Customer Group. If a Customer’s group assignments change, the Cart and its Line Item prices are not updated automatically. Prices are only updated when the Cart is changed via a [direct update action](/projects/carts#update-actions).
   *
   *	Specific Error Codes:
   *
   *	- [MatchingPriceNotFound](ctp:api:type:MatchingPriceNotFoundError)
   *	- [MissingTaxRateForCountry](ctp:api:type:MissingTaxRateForCountryError)
   *
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/carts/replicate',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyInStoreKeyByStoreKeyCartsByIDRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  /**
   *	Retrieves a Cart with the provided `id` in a [Store](ctp:api:type:Store).
   *
   *	If the Cart exists in the Project but does not have a `store` specified, or the `store` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.
   *
   *	To ensure the Cart is up-to-date with current values (such as Prices and Discounts), use the [Recalculate](ctp:api:type:CartRecalculateAction) update action.
   *
   */
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/carts/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Checks if a Cart exists with the provided `id` in a Store. Returns a `200` status if the Cart exists, or a `404` status otherwise.
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/carts/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      }
    }, this.args.executeRequest);
  }
  /**
   *	Updates a Cart in a [Store](ctp:api:type:Store) using one or more [update actions](/../api/projects/carts#update-actions).
   *
   *	If the Cart exists in the Project but does not have a `store` specified, or the `store` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.
   *
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/carts/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs,
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
  /**
   *	Deletes a Cart in a [Store](ctp:api:type:Store).
   *
   *	If the Cart exists in the Project but does not have a `store` specified, or the `store` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.
   *
   */
  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'DELETE',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/carts/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyInStoreKeyByStoreKeyCartsCustomerIdByCustomerIdRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  /**
   *	Retrieves the most recently modified [active Cart](ctp:api:type:CartState) of a Customer with [CartOrigin](ctp:api:type:CartOrigin) `Customer`. If no active Cart exists, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.
   *
   *	If the Cart exists in the Project but does not have a `store` specified, or the `store` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.
   *
   *	To ensure the Cart is up-to-date with current values (such as Prices and Discounts), use the [Recalculate](ctp:api:type:CartRecalculateAction) update action.
   *
   */
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/carts/customer-id={customerId}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Checks if one or more Carts exist for a Customer in a [Store](ctp:api:type:Store). Returns a `200` status if the Cart exists, or a `404` status otherwise.
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/carts/customer-id={customerId}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      }
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyInStoreKeyByStoreKeyCartsKeyByKeyRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  /**
   *
   *	Retrieves a Cart with the provided `key` in a [Store](ctp:api:type:Store).
   *
   *	If the Cart exists in the Project but does not have a `store` specified, or the `store` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.
   *
   *	To ensure the Cart is up-to-date with current values (such as Prices and Discounts), use the [Recalculate](ctp:api:type:CartRecalculateAction) update action.
   *
   */
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/carts/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Checks if a Cart exists with the provided `key` in a [Store](ctp:api:type:Store). Returns a `200` status if the Cart exists, or a `404` status otherwise.
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/carts/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      }
    }, this.args.executeRequest);
  }
  /**
   *	Updates a Cart in a [Store](ctp:api:type:Store) using one or more [update actions](/../api/projects/carts#update-actions).
   *
   *	If the Cart exists in the Project but does not have a `store` specified, or the `store` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.
   *
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/carts/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs,
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
  /**
   *	Deletes a Cart in a [Store](ctp:api:type:Store).
   *
   *	If the Cart exists in the Project but does not have a `store` specified, or the `store` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.
   *
   */
  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'DELETE',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/carts/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyInStoreKeyByStoreKeyCartsRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  withCustomerId(childPathArgs) {
    return new ByProjectKeyInStoreKeyByStoreKeyCartsCustomerIdByCustomerIdRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  withKey(childPathArgs) {
    return new ByProjectKeyInStoreKeyByStoreKeyCartsKeyByKeyRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  replicate() {
    return new ByProjectKeyInStoreKeyByStoreKeyCartsReplicateRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  withId(childPathArgs) {
    return new ByProjectKeyInStoreKeyByStoreKeyCartsByIDRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }

  /**
   *	Retrieves Carts in a [Store](ctp:api:type:Store).
   */
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/carts',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Checks if one or more Carts exist for the provided query predicate in a [Store](ctp:api:type:Store). Returns a `200` status if any Carts match the query predicate, or a `404` status otherwise.
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/carts',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Creates a Cart in a [Store](ctp:api:type:Store).
   *
   *	If the referenced [ShippingMethod](ctp:api:type:ShippingMethod) in the [CartDraft](ctp:api:type:CartDraft) has a predicate that does not match, or if the Shipping Method is not active, an [InvalidOperation](ctp:api:type:InvalidOperationError) error is returned.
   *
   *	Specific Error Codes:
   *
   *	- [DiscountCodeNonApplicable](ctp:api:type:DiscountCodeNonApplicableError)
   *	- [InvalidItemShippingDetails](ctp:api:type:InvalidItemShippingDetailsError)
   *	- [MatchingPriceNotFound](ctp:api:type:MatchingPriceNotFoundError)
   *	- [MissingTaxRateForCountry](ctp:api:type:MissingTaxRateForCountryError)
   *	- [CountryNotConfiguredInStore](ctp:api:type:CountryNotConfiguredInStoreError)
   *
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/carts',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs,
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyInStoreKeyByStoreKeyCustomersEmailConfirmRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  /**
   *	Use this method to verify a Store-specific Customer's email during their [email verification process](/../api/customers-overview#customer-email-verification).
   *
   *	Verifying the email of the Customer produces the [CustomerEmailVerified](ctp:api:type:CustomerEmailVerifiedMessage) Message.
   *
   *	If the Customer exists in the Project but the `stores` field references a different [Store](ctp:api:type:Store), this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.
   *
   *	After the email is verified, all email tokens issued previously through the [email verification flow](/../api/projects/customers#email-verification-of-customer) are invalidated. This invalidation of tokens is [eventually consistent](/../api/general-concepts#eventual-consistency).
   *
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/customers/email/confirm',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyInStoreKeyByStoreKeyCustomersEmailTokenRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  /**
   *	Use this method to create an email token for a Store-specific Customer during their [email verification process](/../api/customers-overview#customer-email-verification).
   *
   *	If the Customer exists in the Project but the `stores` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.
   *
   *	Creating an email token for the Customer produces the [CustomerEmailTokenCreated](ctp:api:type:CustomerEmailTokenCreatedMessage) Message.
   *	The Message will include the token's value, if the token's validity is 60 minutes or less.
   *
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/customers/email-token',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyInStoreKeyByStoreKeyCustomersPasswordTokenRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  /**
   *	Use this method to create a password reset token for a Store-specific Customer during their [password reset process](/../api/customers-overview#customer-password-reset).
   *
   *	If the Customer exists in the Project but the `stores` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.
   *
   *	Creating a password reset token for the Customer produces the [CustomerPasswordTokenCreated](ctp:api:type:CustomerPasswordTokenCreatedMessage) Message.
   *	The Message will include the token's value, if the token's validity is 60 minutes or less.
   *
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/customers/password-token',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyInStoreKeyByStoreKeyCustomersPasswordRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  /**
   *	Changing the password of the Customer produces the [CustomerPasswordUpdated](ctp:api:type:CustomerPasswordUpdatedMessage) Message with `reset=false`.
   *
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/customers/password',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyInStoreKeyByStoreKeyCustomersPasswordResetRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  /**
   *	Use this method to reset a Store-specific Customer's password during their [password reset process](/../api/customers-overview#customer-password-reset).
   *
   *	Resetting the password of the Customer produces the [CustomerPasswordUpdated](ctp:api:type:CustomerPasswordUpdatedMessage) Message with `reset=true`.
   *
   *	After the password is reset, all password tokens issued previously through the [password reset flow](/../api/projects/customers#password-reset-of-customer) are invalidated. In addition, any access and refresh tokens issued previously through the [password flow](/../api/authorization#password-flow) and [refresh token flow](/../api/authorization#refresh-token-flow) are invalidated. This invalidation of tokens is [eventually consistent](/../api/general-concepts#eventual-consistency).
   *
   *	If the Customer exists in the Project but the `stores` field references a different [Store](ctp:api:type:Store), then this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.
   *
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/customers/password/reset',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyInStoreKeyByStoreKeyCustomersByIDRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  /**
   *	If the Customer exists in the Project but the `stores` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.
   *
   */
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/customers/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Checks if a Customer exists with the provided `id`. Returns a `200` status if the Customer exists, or a `404` status otherwise.
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/customers/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      }
    }, this.args.executeRequest);
  }
  /**
   *	If the Customer exists in the Project but the `stores` field references a different [Store](ctp:api:type:Store), this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.
   *
   *	Simultaneously updating two Customers with the same email address can return a [LockedField](ctp:api:type:LockedFieldError) error.
   *
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/customers/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs,
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
  /**
   *	Deleting a Customer produces the [CustomerDeleted](ctp:api:type:CustomerDeletedMessage) Message.
   *
   *	If the Customer exists in the Project but the `stores` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.
   *
   */
  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'DELETE',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/customers/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyInStoreKeyByStoreKeyCustomersEmailTokenByEmailTokenRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  /**
   *	Use this method to retrieve a Store-specific Customer's details by using the email token during their [email verification process](/../api/customers-overview#customer-email-verification).
   *
   *	If the Customer exists in the Project but the `stores` field references a different [Store](ctp:api:type:Store), this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.
   *
   */
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/customers/email-token={emailToken}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyInStoreKeyByStoreKeyCustomersKeyByKeyRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  /**
   *	If the Customer exists in the Project but the `stores` field references a different [Store](ctp:api:type:Store), this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.
   *
   */
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/customers/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Checks if a Customer exists with the provided `key`. Returns a `200` status if the Customer exists, or a `404` status otherwise.
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/customers/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      }
    }, this.args.executeRequest);
  }
  /**
   *	If the Customer exists in the Project but the `stores` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.
   *
   *	Simultaneously updating two Customers with the same email address can return a [LockedField](ctp:api:type:LockedFieldError) error.
   *
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/customers/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs,
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
  /**
   *	Deleting a Customer produces the [CustomerDeleted](ctp:api:type:CustomerDeletedMessage) Message.
   *
   *	If the Customer exists in the Project but the `stores` field references a different [Store](ctp:api:type:Store), this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.
   *
   */
  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'DELETE',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/customers/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyInStoreKeyByStoreKeyCustomersPasswordTokenByPasswordTokenRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  /**
   *	Use this method to retrieve a Store-specific Customer's details by using the password reset token during their [password reset process](/../api/customers-overview#customer-password-reset).
   *
   *	If the Customer exists in the Project but the `stores` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.
   *
   */
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/customers/password-token={passwordToken}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyInStoreKeyByStoreKeyCustomersRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  withPasswordToken(childPathArgs) {
    return new ByProjectKeyInStoreKeyByStoreKeyCustomersPasswordTokenByPasswordTokenRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  withEmailToken(childPathArgs) {
    return new ByProjectKeyInStoreKeyByStoreKeyCustomersEmailTokenByEmailTokenRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  emailToken() {
    return new ByProjectKeyInStoreKeyByStoreKeyCustomersEmailTokenRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  emailConfirm() {
    return new ByProjectKeyInStoreKeyByStoreKeyCustomersEmailConfirmRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  password() {
    return new ByProjectKeyInStoreKeyByStoreKeyCustomersPasswordRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  passwordReset() {
    return new ByProjectKeyInStoreKeyByStoreKeyCustomersPasswordResetRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  passwordToken() {
    return new ByProjectKeyInStoreKeyByStoreKeyCustomersPasswordTokenRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  withKey(childPathArgs) {
    return new ByProjectKeyInStoreKeyByStoreKeyCustomersKeyByKeyRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  withId(childPathArgs) {
    return new ByProjectKeyInStoreKeyByStoreKeyCustomersByIDRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/customers',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Checks if one or more Customers exist for the provided query predicate. Returns a `200` status if any Customers match the query predicate, or a `404` status otherwise.
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/customers',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	When using this endpoint, if omitted, the Customer `stores` field is set to the [Store](ctp:api:type:Store) specified in the path parameter.
   *
   *	If a Cart with a `store` field specified, the `store` field must reference the same [Store](ctp:api:type:Store) specified in the `{storeKey}` path parameter.
   *
   *	If the Customer has multiple active Carts, the anonymous Cart is [merged](/../api/customers-overview#cart-merge-during-sign-in-and-sign-up) into the most recently modified active Cart.
   *
   *	Creating a Customer produces the [CustomerCreated](ctp:api:type:CustomerCreatedMessage) Message. Simultaneously creating two Customers with the same email address can return a [LockedField](ctp:api:type:LockedFieldError) error.
   *
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/customers',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs,
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyInStoreKeyByStoreKeyLoginRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  /**
   *	Authenticates a Customer associated with a [Store](ctp:api:type:Store).
   *
   *	If the Customer has multiple active Carts, the anonymous Cart is [merged](/../api/customers-overview#cart-merge-during-sign-in-and-sign-up) into the most recently modified active Cart.
   *
   *	If the Customer exists in the Project but the `stores` field references a different [Store](ctp:api:type:Store), this method returns an [InvalidCredentials](ctp:api:type:InvalidCredentialsError) error.
   *
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/login',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyInStoreKeyByStoreKeyMeCartsByIDRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  /**
   *	Returns a Cart for a given `id` in a Store. Returns a `200` status if the Cart exists.
   *
   *	A [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error is returned in the following scenarios:
   *
   *	- If no Cart exists in the Store for the given `id`.
   *	- If the Cart exists but does not belong to a Store, or the Cart's `store` field references a different Store.
   *	- If the Cart exists but does not have either a `customerId` that matches the [customer:{id}](/scopes#composable-commerce-oauth) scope, or an `anonymousId` that matches the [anonymous_id:{id}](/scopes#composable-commerce-oauth) scope.
   *
   */
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/me/carts/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/me/carts/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      }
    }, this.args.executeRequest);
  }
  /**
   *	Updates the Cart for a given `id` in a Store. Returns a `200` status if successful.
   *
   *	A [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error is returned in the following scenarios:
   *
   *	- If no Cart exists in the Store for the given `id`.
   *	- If the Cart exists but does not belong to a Store, or the Cart's `store` field references a different Store.
   *	- If the Cart exists but does not have either a `customerId` that matches the [customer:{id}](/scopes#composable-commerce-oauth) scope, or an `anonymousId` that matches the [anonymous_id:{id}](/scopes#composable-commerce-oauth) scope.
   *
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/me/carts/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs,
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
  /**
   *	Deletes the Cart for a given `id` in a Store. Returns a `200` status if successful.
   *
   *	A [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error is returned in the following scenarios:
   *
   *	- If no Cart exists in the Store for the given `id`.
   *	- If the Cart exists in the Project but does not belong to a Store, or the Cart's `store` field references a different Store.
   *	- If the Cart exists in the Project but does not have either a `customerId` that matches the [customer:{id}](/scopes#composable-commerce-oauth) scope, or an `anonymousId` that matches the [anonymous_id:{id}](/scopes#composable-commerce-oauth) scope.
   *
   */
  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'DELETE',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/me/carts/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyInStoreKeyByStoreKeyMeCartsRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  withId(childPathArgs) {
    return new ByProjectKeyInStoreKeyByStoreKeyMeCartsByIDRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }

  /**
   *	Retrieves Carts for the authenticated Customer or anonymous user in a [Store](ctp:api:type:Store).
   *
   */
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/me/carts',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Checks if a Cart exists for a Store that matches the given Query Predicate, and contains a matching `customerId` or `anonymousId`. Returns a `200` status if any Carts match these conditions, or a `404` status otherwise.
   *
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/me/carts',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *
   *	Creates a Cart in a Store for the Customer or anonymous user. The `customerId` or `anonymousId` field on the Cart is automatically set based on the [customer:{id}](/scopes#composable-commerce-oauth) or [anonymous_id:{id}](/scopes#composable-commerce-oauth) scope.
   *
   *	The `store` field in the created [Cart](ctp:api:type:Cart) is set to the Store specified by the `storeKey` path parameter.
   *
   *	Specific Error Codes:
   *
   *	- [CountryNotConfiguredInStore](ctp:api:type:CountryNotConfiguredInStoreError)
   *	- [DiscountCodeNonApplicable](ctp:api:type:DiscountCodeNonApplicableError)
   *	- [InvalidItemShippingDetails](ctp:api:type:InvalidItemShippingDetailsError)
   *	- [MatchingPriceNotFound](ctp:api:type:MatchingPriceNotFoundError)
   *	- [MissingTaxRateForCountry](ctp:api:type:MissingTaxRateForCountryError)
   *
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/me/carts',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs,
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyInStoreKeyByStoreKeyMeEmailConfirmRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  /**
   *	This is the last step in the [email verification process of a Customer](/../api/projects/customers#email-verification-of-customer-in-store). Returns a `200` status if successful.
   *
   *	After the email is verified, all email tokens issued previously through the [email verification flow](/../api/projects/customers#email-verification-of-customer) are invalidated. This invalidation of tokens is [eventually consistent](/../api/general-concepts#eventual-consistency).
   *
   *	A [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error is returned in the following scenarios:
   *
   *	- If no Customer exists with the `id` specified in the [customer:{id}](/scopes#composable-commerce-oauth) scope.
   *	- If the Customer exists but is associated with a different Store than what is specified in the `manage_my_profile:{projectKey}:{storeKey}` scope.
   *
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/me/email/confirm',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyInStoreKeyByStoreKeyMeLoginRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  /**
   *
   *	Retrieves the authenticated Customer (that matches the given email/password pair) if they are part of a specific [Store](ctp:api:type:Store).
   *
   *	If used with an optional [access token for an anonymous session](ctp:api:type:AnonymousSession), all Orders and Carts that belong to the `anonymousId` are assigned to the newly logged-in Customer.
   *
   *	- If the Customer does not have a Cart, the most recently modified anonymous cart becomes the Customer's Cart.
   *	- If the Customer already has a Cart, the most recently modified anonymous cart is handled according to [AnonymousCartSignInMode](ctp:api:type:AnonymousCartSignInMode).
   *
   *	If an account with the given credentials is not found, an [InvalidCredentials](ctp:api:type:InvalidCredentialsError) error is returned.
   *
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/me/login',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyInStoreKeyByStoreKeyMeOrdersByIDRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  /**
   *	Retrieves an Order with the provided `id` in a [Store](ctp:api:type:Store) for the authenticated Customer or anonymous user. Returns a `200` status if successful.
   *
   *	A [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error is returned in the following scenarios:
   *
   *	- If no Orders exists in the Store with the provided `id`.
   *	- If an Order exists but does not have a `store` specified, or the `store` field references a different Store.
   *	- If an Order exists but does not have a `customerId` that matches the [customer:{id}](/scopes#composable-commerce-oauth) scope, or `anonymousId` that matches the [anonymous_id:{id}](/scopes#composable-commerce-oauth) scope.
   *
   */
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/me/orders/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Checks if an Order exists with the provided `id` in a [Store](ctp:api:type:Store) for the authenticated Customer or anonymous user. Returns a `200` status if successful.
   *
   *	A [Not Found](/../api/errors#404-not-found) error is returned in the following scenarios:
   *
   *	- If no Order exists in the Store with the provided `id`.
   *	- If an Order exists but does not have a `store` specified, or the `store` field references a different Store.
   *	- If an Order exists but does not have a `customerId` that matches the [customer:{id}](/scopes#composable-commerce-oauth) scope, or `anonymousId` that matches the [anonymous_id:{id}](/scopes#composable-commerce-oauth) scope.
   *
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/me/orders/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      }
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyInStoreKeyByStoreKeyMeOrdersRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  withId(childPathArgs) {
    return new ByProjectKeyInStoreKeyByStoreKeyMeOrdersByIDRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }

  /**
   *	Retrieves Orders in a [Store](ctp:api:type:Store) for the authenticated Customer or anonymous user.
   *
   *	A [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error is returned in the following scenarios:
   *
   *	- If no Orders exist that match the provided query predicate.
   *	- If an Order exists but does not have a `customerId` that matches the [customer:{id}](/scopes#composable-commerce-oauth) scope, or `anonymousId` that matches the [anonymous_id:{id}](/scopes#composable-commerce-oauth) scope.
   *
   */
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/me/orders',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Checks if one or more Orders exist for the provided query predicate in a [Store](ctp:api:type:Store) for the authenticated Customer or anonymous user. Returns a `200` status if successful.
   *
   *	A [Not Found](/../api/errors#404-not-found) error is returned in the following scenarios:
   *
   *	- If no Orders exist in the Store that match the Query Predicate.
   *	- If an Order matches the Query Predicate, but no `store` is specified, or the `store` field references a different Store.
   *	- If an Order matches the Query Predicate, but does not have a `customerId` that matches the [customer:{id}](/scopes#composable-commerce-oauth) scope, or an `anonymousId` that matches the [anonymous_id:{id}](/scopes#composable-commerce-oauth) scope.
   *
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/me/orders',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *
   *	Creates an Order from a Cart in a [Store](ctp:api:type:Store) for the Customer or anonymous user. The `customerId` or `anonymousId` field on the Order is automatically set based on the [customer:{id}](/scopes#composable-commerce-oauth) or [anonymous_id:{id}](/scopes#composable-commerce-oauth) scope.
   *
   *	The Cart must have a shipping address and an active Shipping Method set.
   *
   *	When creating [B2B Orders](/associates-overview#b2b-resources), the Customer must have the `CreateMyOrdersFromMyCarts` [Permission](ctp:api:type:Permission).
   *
   *	If the Cart's `customerId` does not match the [customer:{id}](/scopes#composable-commerce-oauth) scope, or the `anonymousId` does not match the [anonymous_id:{id}](/scopes#composable-commerce-oauth) scope, a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error is returned.
   *
   *	Creating an Order produces the [OrderCreated](ctp:api:type:OrderCreatedMessage) Message.
   *
   *	Specific Error Codes:
   *
   *	- [AssociateMissingPermission](ctp:api:type:AssociateMissingPermissionError)
   *	- [CountryNotConfiguredInStore](ctp:api:type:CountryNotConfiguredInStoreError)
   *	- [DiscountCodeNonApplicable](ctp:api:type:DiscountCodeNonApplicableError)
   *	- [InvalidItemShippingDetails](ctp:api:type:InvalidItemShippingDetailsError)
   *	- [MatchingPriceNotFound](ctp:api:type:MatchingPriceNotFoundError)
   *	- [MissingTaxRateForCountry](ctp:api:type:MissingTaxRateForCountryError)
   *	- [OutOfStock](ctp:api:type:OutOfStockError)
   *	- [PriceChanged](ctp:api:type:PriceChangedError)
   *	- [ShippingMethodDoesNotMatchCart](ctp:api:type:ShippingMethodDoesNotMatchCartError)
   *
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/me/orders',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs,
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyInStoreKeyByStoreKeyMePasswordResetRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  /**
   *	This is the last step in the [password reset process of the authenticated Customer](/../api/projects/customers#password-reset-of-customer-in-store).
   *
   *	Resetting a password produces the Customer [CustomerPasswordUpdated](ctp:api:type:CustomerPasswordUpdatedMessage) Message with `reset=true`.
   *
   *	After the password is reset, all password tokens issued previously through the [password reset flow](/../api/projects/customers#password-reset-of-customer) are invalidated. In addition, any access and refresh tokens issued previously through the [password flow](/../api/authorization#password-flow) and [refresh token flow](/../api/authorization#refresh-token-flow) are invalidated. This invalidation of tokens is [eventually consistent](/../api/general-concepts#eventual-consistency).
   *
   *	A [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error is returned in the following scenarios:
   *
   *	- If no Customer exists with the `id` specified in the [customer:{id}](/scopes#composable-commerce-oauth) scope.
   *	- If the Customer exists but is associated with a different Store than what is specified in the `manage_my_profile:{projectKey}:{storeKey}` scope.
   *
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/me/password/reset',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyInStoreKeyByStoreKeyMePasswordRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  reset() {
    return new ByProjectKeyInStoreKeyByStoreKeyMePasswordResetRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }

  /**
   *	Changing the password of the Customer produces the [CustomerPasswordUpdated](ctp:api:type:CustomerPasswordUpdatedMessage) Message with `reset=false`.  Returns a `200` status if successful.
   *
   *	A [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error is returned in the following scenarios:
   *
   *	- If no Customer exists with the `id` specified in the [customer:{id}](/scopes#composable-commerce-oauth) scope.
   *	- If the Customer exists but is associated with a different Store than what is specified in the `manage_my_profile:{projectKey}:{storeKey}` scope.
   *
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/me/password',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyInStoreKeyByStoreKeyMeShoppingListsByIDRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  /**
   *	Retrieves a ShoppingList with the provided `id` for the authenticated Customer or anonymous user in a [Store](ctp:api:type:Store). Returns `200 OK` status if successful.
   *
   *	A [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error is returned in the following scenarios:
   *
   *	- If no ShoppingList matches the provided `id` in a Store.
   *	- If a ShoppingList matches the provided `id` but does not have a `store` specified, or the `store` field references a different Store.
   *	- If a ShoppingList matches the provided `id` in a Store but does not contain either an `anonymousId` that matches the [anonymous_id:{id}](/scopes#composable-commerce-oauth) scope, or a `customer` with `id` value that matches the [customer:{id}](/scopes#composable-commerce-oauth) scope.
   *
   */
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/me/shopping-lists/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Checks if a ShoppingList exists with the provided `id` for the authenticated Customer or anonymous user in a [Store](ctp:api:type:Store). Returns a `200` status if successful.
   *
   *	A [Not Found](/../api/errors#404-not-found) error is returned in the following scenarios:
   *
   *	- If no ShoppingList matches the provided `id` in a Store.
   *	- If a ShoppingList matches the provided `id` but does not have a `store` specified, or the `store` field references a different Store.
   *	- If a ShoppingList matches the provided `id` in a Store but does not contain either an `anonymousId` that matches the [anonymous_id:{id}](/scopes#composable-commerce-oauth) scope, or a `customer` with `id` value that matches the [customer:{id}](/scopes#composable-commerce-oauth) scope.
   *
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/me/shopping-lists/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      }
    }, this.args.executeRequest);
  }
  /**
   *	Updates a ShoppingList for the authenticated Customer or anonymous user in a [Store](ctp:api:type:Store) using one or more [update actions](/../api/projects/me-shoppingLists#update-actions). Returns a `200` status if successful.
   *
   *	A [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error is returned in the following scenarios:
   *
   *	- If no ShoppingList matches the provided `id` in a Store.
   *	- If a ShoppingList matches the provided `id` but does not have a `store` specified, or the `store` field references a different Store.
   *	- If a ShoppingList matches the provided `id` in a Store but does not contain either an `anonymousId` that matches the [anonymous_id:{id}](/scopes#composable-commerce-oauth) scope, or a `customer` with `id` value that matches the [customer:{id}](/scopes#composable-commerce-oauth) scope.
   *
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/me/shopping-lists/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs,
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
  /**
   *	Deletes a ShoppingList in a [Store](ctp:api:type:Store). Returns a `200` status if successful.
   *
   *	A [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error is returned in the following scenarios:
   *
   *	- If no ShoppingList matches the provided `id` in a Store.
   *	- If a ShoppingList matches the provided `id` but does not have a `store` specified, or the `store` field references a different Store.
   *	- If a ShoppingList matches the provided `id` in a Store but does not contain either an `anonymousId` that matches the [anonymous_id:{id}](/scopes#composable-commerce-oauth) scope, or a `customer` with `id` value that matches the [customer:{id}](/scopes#composable-commerce-oauth) scope.
   *
   */
  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'DELETE',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/me/shopping-lists/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyInStoreKeyByStoreKeyMeShoppingListsKeyByKeyRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  /**
   *	Retrieves a ShoppingList with the provided `key` for the authenticated Customer or anonymous user in a [Store](ctp:api:type:Store). Returns `200 OK` status if successful.
   *
   *	A [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error is returned in the following scenarios:
   *
   *	- If no ShoppingList matches the provided `key` in a Store.
   *	- If a ShoppingList matches the provided `key` but does not have a `store` specified, or the `store` field references a different Store.
   *	- If a ShoppingList matches the provided `key` in a Store but does not contain either an `anonymousId` that matches the [anonymous_id:{id}](/scopes#composable-commerce-oauth) scope,
   *	    or a `customer` with `id` value that matches the [customer:{id}](/scopes#composable-commerce-oauth) scope.
   *
   */
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/me/shopping-lists/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Checks if a ShoppingList exists with the provided `key` for the authenticated Customer or anonymous user in a [Store](ctp:api:type:Store). Returns a `200` status if successful.
   *
   *	A [Not Found](/../api/errors#404-not-found) error is returned in the following scenarios:
   *
   *	- If no ShoppingList exists that matches the provided `key` in a Store.
   *	- If a ShoppingList matches the provided `key` but does not have a `store` specified, or the `store` field references a different Store.
   *	- If a ShoppingList matches the provided `key` in a Store but does not contain either an `anonymousId` that matches the [anonymous_id:{id}](/scopes#composable-commerce-oauth) scope, or a `customer` with `id` value that matches the [customer:{id}](/scopes#composable-commerce-oauth) scope.
   *
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/me/shopping-lists/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      }
    }, this.args.executeRequest);
  }
  /**
   *	Updates a ShoppingList for the authenticated Customer or anonymous user in a [Store](ctp:api:type:Store) using one or more [update actions](/../api/projects/me-shoppingLists#update-actions). Returns a `200` status if successful.
   *
   *	A [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error is returned in the following scenarios:
   *
   *	- If no ShoppingList matches the provided `key` in a Store.
   *	- If a ShoppingList matches the provided `key` but does not have a `store` specified, or the `store` field references a different Store.
   *	- If a ShoppingList matches the provided `key` in a Store but does not contain either an `anonymousId` that matches the [anonymous_id:{id}](/scopes#composable-commerce-oauth) scope, or a `customer` with `id` value that matches the [customer:{id}](/scopes#composable-commerce-oauth) scope.
   *
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/me/shopping-lists/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs,
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
  /**
   *	Deletes a ShoppingList in a [Store](ctp:api:type:Store). Returns a `200` status if successful.
   *
   *	A [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error is returned in the following scenarios:
   *
   *	- If no ShoppingList matches the provided `key` in a Store.
   *	- If a ShoppingList matches the provided `key` but does not have a `store` specified, or the `store` field references a different Store.
   *	- If a ShoppingList matches the provided `key` in a Store but does not contain either an `anonymousId` that matches the [anonymous_id:{id}](/scopes#composable-commerce-oauth) scope, or a `customer` with `id` value that matches the [customer:{id}](/scopes#composable-commerce-oauth) scope.
   *
   */
  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'DELETE',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/me/shopping-lists/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyInStoreKeyByStoreKeyMeShoppingListsRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  withKey(childPathArgs) {
    return new ByProjectKeyInStoreKeyByStoreKeyMeShoppingListsKeyByKeyRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  withId(childPathArgs) {
    return new ByProjectKeyInStoreKeyByStoreKeyMeShoppingListsByIDRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }

  /**
   *	Retrieves ShoppingLists for the authenticated Customer or anonymous user in a [Store](ctp:api:type:Store). Returns `200 OK` status if successful.
   *
   *	A [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error is returned in the following scenarios:
   *
   *	- If no ShoppingLists exist in a Store.
   *	- If a ShoppingList exists but does not have a `store` specified, or the `store` field references a different Store.
   *	- If a ShoppingList exists in a Store but does not contain either an `anonymousId` that matches the [anonymous_id:{id}](/scopes#composable-commerce-oauth) scope, or a `customer` with `id` value that matches the [customer:{id}](/scopes#composable-commerce-oauth) scope.
   *
   */
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/me/shopping-lists',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Checks if one or more ShoppingLists exist for the provided query predicate for the authenticated Customer or anonymous user in a [Store](ctp:api:type:Store). Returns `200 OK` status if successful.
   *
   *	A [Not Found](/../api/errors#404-not-found) error is returned in the following scenarios:
   *
   *	- If no ShoppingLists exist for the provided query predicate in a Store.
   *	- If a ShoppingList matches the query predicate but does not have a `store` specified, or the `store` field references a different Store.
   *	- If a ShoppingList exists in a Store but does not contain either an `anonymousId` that matches the [anonymous_id:{id}](/scopes#composable-commerce-oauth) scope, or a `customer` with `id` value that matches the [customer:{id}](/scopes#composable-commerce-oauth) scope.
   *
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/me/shopping-lists',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *
   *	Creates a ShoppingList for the authenticated Customer or anonymous user in a [Store](ctp:api:type:Store). The `customer` or `anonymousId` field on the ShoppingList is automatically set based on the given [customer:{id}](/scopes#composable-commerce-oauth) or [anonymous_id:{id}](/scopes#composable-commerce-oauth) scope.
   *
   *	When using this endpoint, the `store` field of a ShoppingList is always set to the Store specified in the path parameter.
   *
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/me/shopping-lists',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs,
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyInStoreKeyByStoreKeyMeSignupRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  /**
   *	If used with an optional [access token for an anonymous session](ctp:api:type:AnonymousSession), all Orders and Carts that belong to the `anonymousId` are assigned to the newly created Customer.
   *
   *	If omitted in the request body, the [Customer](ctp:api:type:Customer) `stores` field is set to the [Store](ctp:api:type:Store) specified in the path parameter.
   *
   *	If the Customer has multiple active Carts, the anonymous Cart is [merged](/../api/customers-overview#cart-merge-during-sign-in-and-sign-up) into the most recently modified active Cart.
   *
   *	Creating a Customer produces the [CustomerCreated](ctp:api:type:CustomerCreatedMessage) Message.
   *
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/me/signup',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyInStoreKeyByStoreKeyMeRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  /**
   *	A shopping cart holds product variants and can be ordered.
   */
  carts() {
    return new ByProjectKeyInStoreKeyByStoreKeyMeCartsRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  /**
   *	An order can be created from a order, usually after a checkout process has been completed.
   */
  orders() {
    return new ByProjectKeyInStoreKeyByStoreKeyMeOrdersRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  activeCart() {
    return new ByProjectKeyInStoreKeyByStoreKeyMeActiveCartRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  /**
   *	shopping-lists e.g. for wishlist support
   *
   */
  shoppingLists() {
    return new ByProjectKeyInStoreKeyByStoreKeyMeShoppingListsRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  emailConfirm() {
    return new ByProjectKeyInStoreKeyByStoreKeyMeEmailConfirmRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  password() {
    return new ByProjectKeyInStoreKeyByStoreKeyMePasswordRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  signup() {
    return new ByProjectKeyInStoreKeyByStoreKeyMeSignupRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  login() {
    return new ByProjectKeyInStoreKeyByStoreKeyMeLoginRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }

  /**
   *	Returns a Customer for a given Query Predicate in a [Store](ctp:api:type:Store). Returns a `200` status if successful.
   *
   *	A [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error is returned in the following scenarios:
   *
   *	- If no Customer exists in the Store for the given Query Predicate.
   *	- If a Customer exists in the Store for the given Query Predicate, but does not have an `id` value that matches the [customer:{id}](/scopes#composable-commerce-oauth) scope.
   *	- If a Customer exists for the given Query Predicate but is associated with a different Store than what is specified in the `manage_my_profile:{projectKey}:{storeKey}` scope.
   *
   */
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/me',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Updates the Customer in a [Store](ctp:api:type:Store). Returns a `200` status if successful.
   *
   *	A [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error is returned in the following scenarios:
   *
   *	- If no Customer exists with the `id` specified in the [customer:{id}](/scopes#composable-commerce-oauth) scope.
   *	- If the Customer exists but is associated with a different Store than what is specified in the `manage_my_profile:{projectKey}:{storeKey}` scope.
   *
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/me',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
  /**
   *	Deletes the Customer in a [Store](ctp:api:type:Store). Returns a `200` status if successful.
   *
   *	A [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error is returned in the following scenarios:
   *
   *	- If no Customer exists with the `id` specified in the [customer:{id}](/scopes#composable-commerce-oauth) scope.
   *	- If the Customer exists but is associated with a different Store than what is specified in the `manage_my_profile:{projectKey}:{storeKey}` scope.
   *
   */
  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'DELETE',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/me',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyInStoreKeyByStoreKeyOrdersQuotesRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  /**
   *
   *	Creates an Order from a [Quote](ctp:api:type:Quote) in a [Store](ctp:api:type:Store). The referenced Quote must have the `Pending` [state](ctp:api:type:QuoteState) and must be valid (not past the `validTo` date); otherwise, an [InvalidOperation](ctp:api:type:InvalidOperationError) error is returned.
   *
   *	Produces the [OrderCreated](ctp:api:type:OrderCreatedMessage) Message.
   *
   *	Specific Error Codes:
   *
   *	- [OutOfStock](ctp:api:type:OutOfStockError)
   *	- [InvalidItemShippingDetails](ctp:api:type:InvalidItemShippingDetailsError)
   *	- [InvalidOperation](ctp:api:type:InvalidOperationError)
   *	- [CountryNotConfiguredInStore](ctp:api:type:CountryNotConfiguredInStoreError)
   *
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/orders/quotes',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyInStoreKeyByStoreKeyOrdersByIDRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  /**
   *	Retrieves an Order with the provided `id` in a [Store](ctp:api:type:Store).
   *	If the Order exists in the Project but does not have a `store` specified, or the `store` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.
   *
   */
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/orders/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Checks if an Order exists with the provided `id` in a [Store](ctp:api:type:Store). Returns a `200` status if the Order exists, or a `404` status otherwise.
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/orders/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      }
    }, this.args.executeRequest);
  }
  /**
   *	Updates an Order in a [Store](ctp:api:type:Store) using one or more [update actions](/../api/projects/orders#update-actions).
   *	If the Order exists in the Project but does not have a `store` specified, or the `store` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.
   *
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/orders/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs,
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
  /**
   *	Deletes an Order in a [Store](ctp:api:type:Store).
   *	If the Order exists in the Project but does not have a `store` specified, or the `store` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.
   *
   *	Deleting an Order produces the [OrderDeleted](ctp:api:type:OrderDeletedMessage) Message.
   *
   */
  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'DELETE',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/orders/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyInStoreKeyByStoreKeyOrdersOrderNumberByOrderNumberRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  /**
   *	Retrieves an Order with the provided `orderNumber` in a [Store](ctp:api:type:Store).
   *	If the Order exists in the Project but does not have a `store` specified, or the `store` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.
   *
   */
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/orders/order-number={orderNumber}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Checks if an Order exists with the provided `orderNumber` in a [Store](ctp:api:type:Store). Returns a `200` status if the Order exists, or a `404` status otherwise.
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/orders/order-number={orderNumber}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      }
    }, this.args.executeRequest);
  }
  /**
   *	Updates an Order in a [Store](ctp:api:type:Store) using one or more [update actions](/../api/projects/orders#update-actions).
   *	If the Order exists in the Project but does not have a `store` specified, or the `store` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.
   *
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/orders/order-number={orderNumber}',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs,
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
  /**
   *	Deletes an Order in a [Store](ctp:api:type:Store).
   *	If the Order exists in the Project but does not have a `store` specified, or the `store` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.
   *
   *	Deleting an Order produces the [OrderDeleted](ctp:api:type:OrderDeletedMessage) Message.
   *
   */
  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'DELETE',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/orders/order-number={orderNumber}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyInStoreKeyByStoreKeyOrdersRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  orderQuote() {
    return new ByProjectKeyInStoreKeyByStoreKeyOrdersQuotesRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  withOrderNumber(childPathArgs) {
    return new ByProjectKeyInStoreKeyByStoreKeyOrdersOrderNumberByOrderNumberRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  withId(childPathArgs) {
    return new ByProjectKeyInStoreKeyByStoreKeyOrdersByIDRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }

  /**
   *	Retrieves Orders in a [Store](ctp:api:type:Store).
   */
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/orders',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Checks if one or more Orders exist for the provided query predicate in a [Store](ctp:api:type:Store). Returns a `200` status if any Orders match the query predicate, or a `404` status otherwise.
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/orders',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Creates an Order from a Cart in a [Store](ctp:api:type:Store).
   *	The Cart must have a shipping address and an active Shipping Method set.
   *
   *	The shipping address is used for tax calculation for a Cart with `Platform` [TaxMode](ctp:api:type:TaxMode).
   *
   *	Creating an Order produces the [OrderCreated](ctp:api:type:OrderCreatedMessage) Message.
   *
   *	If a server-side problem occurs, indicated by a 500 Internal Server Error HTTP response, the Order creation may still successfully complete after the error is returned.
   *	If you receive this error, you should verify the status of the Order by querying a unique identifier supplied during the creation request, such as the Order number.
   *
   *	Specific Error Codes:
   *
   *	- [OutOfStock](ctp:api:type:OutOfStockError)
   *	- [PriceChanged](ctp:api:type:PriceChangedError)
   *	- [DiscountCodeNonApplicable](ctp:api:type:DiscountCodeNonApplicableError)
   *	- [ShippingMethodDoesNotMatchCart](ctp:api:type:ShippingMethodDoesNotMatchCartError)
   *	- [InvalidItemShippingDetails](ctp:api:type:InvalidItemShippingDetailsError)
   *	- [InvalidOperation](ctp:api:type:InvalidOperationError)
   *	- [MatchingPriceNotFound](ctp:api:type:MatchingPriceNotFoundError)
   *	- [MissingTaxRateForCountry](ctp:api:type:MissingTaxRateForCountryError)
   *	- [CountryNotConfiguredInStore](ctp:api:type:CountryNotConfiguredInStoreError)
   *
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/orders',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs,
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyInStoreKeyByStoreKeyProductProjectionsByIDRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  /**
   *	Gets the current or staged representation of a [Product](ctp:api:type:Product) by its ID in the specified [Store](ctp:api:type:Store).
   *	If the Store has defined some languages, countries, distribution, supply Channels, and/or Product Selection,
   *	they are used for projections based on [locale](ctp:api:type:ProductProjectionLocales), [price](ctp:api:type:ProductProjectionPrices),
   *	and [inventory](ctp:api:type:ProductProjectionInventoryEntries).
   *
   *	If [ProductSelection](ctp:api:type:ProductSelection) is used, it affects the [availability of the Product](/projects/stores#products-available-in-store) in the specified Store.
   *
   *	If a [ProductTailoring](ctp:api:type:ProductTailoring) exists for the Product with the given `id` and the given Store, this endpoint returns the ProductProjection with tailored data.
   *
   *	When used with an API Client that has the `view_published_products:{projectKey}` scope, this endpoint only returns published (current) Product Projections.
   *
   */
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/product-projections/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Checks if the current or staged representations of a Product exists with the provided `id` in the specified [Store](ctp:api:type:Store). Returns a `200` status if the ProductProjection exists, or a `404` status otherwise.
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/product-projections/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      }
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyInStoreKeyByStoreKeyProductProjectionsKeyByKeyRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  /**
   *	Gets the current or staged representation of a [Product](ctp:api:type:Product) by its key in the specified [Store](ctp:api:type:Store).
   *	If the Store has defined some languages, countries, distribution, supply Channels, and/or Product Selection,
   *	they are used for projections based on [locale](ctp:api:type:ProductProjectionLocales), [price](ctp:api:type:ProductProjectionPrices),
   *	and [inventory](ctp:api:type:ProductProjectionInventoryEntries).
   *
   *	If [ProductSelection](ctp:api:type:ProductSelection) is used, it affects the [availability of the Product](/projects/stores#products-available-in-store) in the specified Store.
   *
   *	If a [ProductTailoring](ctp:api:type:ProductTailoring) exists for the Product with the given `key` and the given Store, this endpoint returns the ProductProjection with tailored data.
   *
   *	When used with an API Client that has the `view_published_products:{projectKey}` scope, this endpoint only returns published (current) Product Projections.
   *
   */
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/product-projections/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Checks if the current or staged representations of a Product exists with the provided `key` in the specified [Store](ctp:api:type:Store). Returns a `200` status if the ProductProjection exists, or a `404` status otherwise.
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/product-projections/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      }
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyInStoreKeyByStoreKeyProductProjectionsRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  withKey(childPathArgs) {
    return new ByProjectKeyInStoreKeyByStoreKeyProductProjectionsKeyByKeyRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  withId(childPathArgs) {
    return new ByProjectKeyInStoreKeyByStoreKeyProductProjectionsByIDRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyInStoreKeyByStoreKeyProductSelectionAssignmentsRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  /**
   *	Queries Product Selection assignments in a specific [Store](ctp:api:type:Store).
   *
   *	The response will include duplicate Products whenever more than one active Product Selection of the Store
   *	includes a Product. To make clear through which Product Selection a Product is available in the Store
   *	the response contains assignments including both the Product and the Product Selection.
   *	Only Products of Product Selections that are activated in the Store will be returned.
   *
   */
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/product-selection-assignments',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyInStoreKeyByStoreKeyProductTailoringRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  /**
   *	Queries Product Tailoring in a specific [Store](ctp:api:type:Store).
   *
   */
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/product-tailoring',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Creates a [ProductTailoring](ctp:api:type:ProductTailoring) in the [Store](ctp:api:type:Store) specified by `storeKey`.
   *	When using this endpoint the ProductTailoring's `store` field is always set to the [Store](ctp:api:type:Store) specified in the path parameter.
   *
   *	Generates the [ProductTailoringCreated](ctp:api:type:ProductTailoringCreatedMessage) Message.
   *
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/product-tailoring',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs,
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyInStoreKeyByStoreKeyProductsByProductIDProductTailoringImagesRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  /**
   *	Uploads a JPEG, PNG and GIF file to a [ProductVariantTailoring](ctp:api:type:ProductVariantTailoring).
   *	The maximum file size of the image is **10MB**.
   *	Either `variant` or `sku` is required to update a specific ProductVariant.
   *	If neither is provided, the image is uploaded to the Master Variant of the Product.
   *
   *	The response status code depends on the size of the original image.
   *	If the image is small, the API responds with `200 OK`, and if the image is larger, it responds with `202 Accepted`.
   *	The Product returned with a `202 Accepted` status code contains a `warnings` field with an [ImageProcessingOngoing](ctp:api:type:ImageProcessingOngoingWarning) Warning.
   *
   *	Produces the [ProductTailoringImageAdded](/projects/messages/product-catalog-messages#product-tailoring-image-added) Message.
   *
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/products/{productID}/product-tailoring/images',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs,
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyInStoreKeyByStoreKeyProductsByProductIDProductTailoringRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  images() {
    return new ByProjectKeyInStoreKeyByStoreKeyProductsByProductIDProductTailoringImagesRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }

  /**
   *	Gets the current or staged representation of a [Product Tailoring](ctp:api:type:ProductTailoring) by its Product ID in the specified [Store](ctp:api:type:Store).
   *
   */
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/products/{productID}/product-tailoring',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Updates the current or staged representation of a [Product Tailoring](ctp:api:type:ProductTailoring) by its Product ID in the specified [Store](ctp:api:type:Store).
   *
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/products/{productID}/product-tailoring',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs,
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
  /**
   *	Generates the [ProductTailoringDeleted](ctp:api:type:ProductTailoringDeletedMessage) Message.
   *
   */
  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'DELETE',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/products/{productID}/product-tailoring',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyInStoreKeyByStoreKeyProductsByProductIDRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  productTailoring() {
    return new ByProjectKeyInStoreKeyByStoreKeyProductsByProductIDProductTailoringRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyInStoreKeyByStoreKeyProductsKeyByProductKeyProductTailoringImagesRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  /**
   *	Uploads a JPEG, PNG and GIF file to a [ProductVariantTailoring](ctp:api:type:ProductVariantTailoring).
   *	The maximum file size of the image is **10MB**.
   *	Either `variant` or `sku` is required to update a specific ProductVariant.
   *	If neither is provided, the image is uploaded to the Master Variant of the Product.
   *
   *	The response status code depends on the size of the original image.
   *	If the image is small, the API responds with `200 OK`, and if the image is larger, it responds with `202 Accepted`.
   *	The Product returned with a `202 Accepted` status code contains a `warnings` field with an [ImageProcessingOngoing](ctp:api:type:ImageProcessingOngoingWarning) Warning.
   *
   *	Produces the [ProductTailoringImageAdded](/projects/messages/product-catalog-messages#product-tailoring-image-added) Message.
   *
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/products/key={productKey}/product-tailoring/images',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs,
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyInStoreKeyByStoreKeyProductsKeyByProductKeyProductTailoringRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  images() {
    return new ByProjectKeyInStoreKeyByStoreKeyProductsKeyByProductKeyProductTailoringImagesRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }

  /**
   *	Gets the current or staged representation of a [Product Tailoring](ctp:api:type:ProductTailoring) by its Product key in the specified [Store](ctp:api:type:Store).
   *
   */
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/products/key={productKey}/product-tailoring',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Updates the current or staged representation of a [Product Tailoring](ctp:api:type:ProductTailoring) by its Product key in the specified [Store](ctp:api:type:Store).
   *
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/products/key={productKey}/product-tailoring',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs,
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
  /**
   *	Generates the [ProductTailoringDeleted](ctp:api:type:ProductTailoringDeletedMessage) Message.
   *
   */
  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'DELETE',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/products/key={productKey}/product-tailoring',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyInStoreKeyByStoreKeyProductsKeyByProductKeyRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  productTailoring() {
    return new ByProjectKeyInStoreKeyByStoreKeyProductsKeyByProductKeyProductTailoringRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyInStoreKeyByStoreKeyProductsRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  withProductId(childPathArgs) {
    return new ByProjectKeyInStoreKeyByStoreKeyProductsByProductIDRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  withProductKey(childPathArgs) {
    return new ByProjectKeyInStoreKeyByStoreKeyProductsKeyByProductKeyRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyInStoreKeyByStoreKeyQuoteRequestsByIDRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/quote-requests/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Checks if a QuoteRequest exists with the provided `id`. Returns a `200` status if the QuoteRequest exists, or a `404` status otherwise.
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/quote-requests/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      }
    }, this.args.executeRequest);
  }
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/quote-requests/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs,
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'DELETE',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/quote-requests/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyInStoreKeyByStoreKeyQuoteRequestsKeyByKeyRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/quote-requests/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Checks if a QuoteRequest exists with the provided `key`. Returns a `200` status if the QuoteRequest exists, or a `404` status otherwise.
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/quote-requests/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      }
    }, this.args.executeRequest);
  }
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/quote-requests/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs,
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'DELETE',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/quote-requests/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyInStoreKeyByStoreKeyQuoteRequestsRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  withKey(childPathArgs) {
    return new ByProjectKeyInStoreKeyByStoreKeyQuoteRequestsKeyByKeyRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  withId(childPathArgs) {
    return new ByProjectKeyInStoreKeyByStoreKeyQuoteRequestsByIDRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/quote-requests',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Checks if one or more QuoteRequests exist for the provided query predicate. Returns a `200` status if any QuoteRequests match the query predicate, or a `404` status otherwise.
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/quote-requests',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/quote-requests',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs,
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyInStoreKeyByStoreKeyQuotesByIDRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/quotes/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Checks if a Quote exists with the provided `id`. Returns a `200` status if the Quote exists, or a `404` status otherwise.
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/quotes/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      }
    }, this.args.executeRequest);
  }
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/quotes/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs,
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'DELETE',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/quotes/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyInStoreKeyByStoreKeyQuotesKeyByKeyRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/quotes/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Checks if a Quote exists with the provided `key`. Returns a `200` status if the Quote exists, or a `404` status otherwise.
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/quotes/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      }
    }, this.args.executeRequest);
  }
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/quotes/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs,
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'DELETE',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/quotes/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyInStoreKeyByStoreKeyQuotesRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  withKey(childPathArgs) {
    return new ByProjectKeyInStoreKeyByStoreKeyQuotesKeyByKeyRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  withId(childPathArgs) {
    return new ByProjectKeyInStoreKeyByStoreKeyQuotesByIDRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/quotes',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Checks if one or more Quotes exist for the provided query predicate. Returns a `200` status if any Quotes match the query predicate, or a `404` status otherwise.
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/quotes',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/quotes',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs,
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyInStoreKeyByStoreKeyShippingMethodsMatchingCartRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  /**
   *	Retrieves the active ShippingMethods that can ship to the shipping address of the provided Cart in a [Store](ctp:api:type:Store).
   *
   *	Each ShippingMethod contains exactly one ShippingRate with the flag `isMatching` set to `true`. This ShippingRate is used when the ShippingMethod is [added to the Cart](ctp:api:type:CartSetShippingMethodAction).
   *
   *	If a matching ShippingMethod has `isDefault` set to `true`, it is returned as the first item in the array.
   *
   */
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/shipping-methods/matching-cart',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Checks if an active ShippingMethod that can ship to the shipping address of the provided Cart exists in a [Store](ctp:api:type:Store). Returns a `200 OK` status if the ShippingMethod exists or a [Not Found](/../api/errors#404-not-found) error otherwise.
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/shipping-methods/matching-cart',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyInStoreKeyByStoreKeyShippingMethodsRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  /**
   *	Get matching ShippingMethods for a Cart in a Store
   */
  matchingCart() {
    return new ByProjectKeyInStoreKeyByStoreKeyShippingMethodsMatchingCartRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyInStoreKeyByStoreKeyShoppingListsByIDRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  /**
   *	Retrieves a ShoppingList with the provided `id` in a [Store](ctp:api:type:Store).
   *	If a ShoppingList exists in a Project but does _not_ have the `store` field, or the `store` field references a different Store,
   *	the [ResourceNotFound](/errors#404-not-found-1) error is returned.
   *
   */
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/shopping-lists/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Checks if a ShoppingList exists with the provided `id` in a [Store](ctp:api:type:Store). Returns a `200` status if the ShoppingList exists, or a `404` status otherwise.
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/shopping-lists/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      }
    }, this.args.executeRequest);
  }
  /**
   *	Updates a ShoppingList in a [Store](ctp:api:type:Store) using one or more [update actions](/../api/projects/shoppingLists#update-actions).
   *	If a ShoppingList exists in a Project but does _not_ have the `store` field, or the `store` field references a different Store,
   *	the [ResourceNotFound](/errors#404-not-found-1) error is returned.
   *
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/shopping-lists/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs,
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
  /**
   *	Deletes a ShoppingList in a [Store](ctp:api:type:Store).
   *	If a ShoppingList exists in a Project but does _not_ have the `store` field, or the `store` field references a different Store,
   *	the [ResourceNotFound](/errors#404-not-found-1) error is returned.
   *
   */
  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'DELETE',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/shopping-lists/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyInStoreKeyByStoreKeyShoppingListsKeyByKeyRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  /**
   *	Retrieves a ShoppingList with the provided `key` in a [Store](ctp:api:type:Store).
   *	If a ShoppingList exists in a Project but does _not_ have the `store` field, or the `store` field references a different Store,
   *	the [ResourceNotFound](/errors#404-not-found-1) error is returned.
   *
   */
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/shopping-lists/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Checks if a ShoppingList exists with the provided `key` in a [Store](ctp:api:type:Store). Returns a `200` status if the ShoppingList exists, or a `404` status otherwise.
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/shopping-lists/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      }
    }, this.args.executeRequest);
  }
  /**
   *	Updates a ShoppingList in a [Store](ctp:api:type:Store) using one or more [update actions](/../api/projects/shoppingLists#update-actions).
   *	If a ShoppingList exists in a Project but does _not_ have the `store` field, or the `store` field references a different Store,
   *	the [ResourceNotFound](/errors#404-not-found-1) error is returned.
   *
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/shopping-lists/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs,
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
  /**
   *	Deletes a ShoppingList in a [Store](ctp:api:type:Store).
   *	If a ShoppingList exists in a Project but does _not_ have the `store` field, or the `store` field references a different Store,
   *	the [ResourceNotFound](/errors#404-not-found-1) error is returned.
   *
   */
  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'DELETE',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/shopping-lists/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyInStoreKeyByStoreKeyShoppingListsRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  withKey(childPathArgs) {
    return new ByProjectKeyInStoreKeyByStoreKeyShoppingListsKeyByKeyRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  withId(childPathArgs) {
    return new ByProjectKeyInStoreKeyByStoreKeyShoppingListsByIDRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }

  /**
   *	Retrieves ShoppingLists in a [Store](ctp:api:type:Store).
   */
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/shopping-lists',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Checks if one or more ShoppingLists exist for the provided query predicate in a [Store](ctp:api:type:Store). Returns a `200` status if any ShoppingLists match the query predicate or, or a `404` status otherwise.
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/shopping-lists',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Creates a ShoppingList in a [Store](ctp:api:type:Store).
   *	When using this endpoint, the `store` field of a ShoppingList is always set to the [Store](ctp:api:type:Store) specified in the path parameter.
   *
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/shopping-lists',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs,
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyInStoreKeyByStoreKeyStagedQuotesByIDRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/staged-quotes/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Checks if a StagedQuote exists with the provided `id`. Returns a `200` status if the StagedQuote exists, or a `404` status otherwise.
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/staged-quotes/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      }
    }, this.args.executeRequest);
  }
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/staged-quotes/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs,
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'DELETE',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/staged-quotes/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyInStoreKeyByStoreKeyStagedQuotesKeyByKeyRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/staged-quotes/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Checks if a StagedQuote exists with the provided `key`. Returns a `200` status if the StagedQuote exists, or a `404` status otherwise.
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/staged-quotes/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      }
    }, this.args.executeRequest);
  }
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/staged-quotes/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs,
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'DELETE',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/staged-quotes/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyInStoreKeyByStoreKeyStagedQuotesRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  withKey(childPathArgs) {
    return new ByProjectKeyInStoreKeyByStoreKeyStagedQuotesKeyByKeyRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  withId(childPathArgs) {
    return new ByProjectKeyInStoreKeyByStoreKeyStagedQuotesByIDRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/staged-quotes',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Checks if one or more StagedQuotes exist for the provided query predicate. Returns a `200` status if any StagedQuotes match the query predicate, or a `404` status otherwise.
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/staged-quotes',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/in-store/key={storeKey}/staged-quotes',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs,
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyInStoreKeyByStoreKeyRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  /**
   *	A Business Unit can represent a Company or a Division.
   */
  businessUnits() {
    return new ByProjectKeyInStoreKeyByStoreKeyBusinessUnitsRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  cartDiscounts() {
    return new ByProjectKeyInStoreKeyByStoreKeyCartDiscountsRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  /**
   *	A shopping cart holds product variants and can be ordered.
   */
  carts() {
    return new ByProjectKeyInStoreKeyByStoreKeyCartsRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  /**
   *	A Customer is a person purchasing products. Carts, Orders,
   *	Comments and Reviews can be associated to a Customer.
   *
   */
  customers() {
    return new ByProjectKeyInStoreKeyByStoreKeyCustomersRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  me() {
    return new ByProjectKeyInStoreKeyByStoreKeyMeRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  /**
   *	An order can be created from a cart, usually after a checkout process has been completed.
   */
  orders() {
    return new ByProjectKeyInStoreKeyByStoreKeyOrdersRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  productProjections() {
    return new ByProjectKeyInStoreKeyByStoreKeyProductProjectionsRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  productSelectionAssignments() {
    return new ByProjectKeyInStoreKeyByStoreKeyProductSelectionAssignmentsRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  /**
   *	A Product Tailoring holds tailored data of Product in the Store.
   */
  productTailoring() {
    return new ByProjectKeyInStoreKeyByStoreKeyProductTailoringRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  products() {
    return new ByProjectKeyInStoreKeyByStoreKeyProductsRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  /**
   *	A request for a Quote holds product variants and can be ordered.
   */
  quoteRequests() {
    return new ByProjectKeyInStoreKeyByStoreKeyQuoteRequestsRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  /**
   *	A quote holds the negotiated offer.
   */
  quotes() {
    return new ByProjectKeyInStoreKeyByStoreKeyQuotesRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  shippingMethods() {
    return new ByProjectKeyInStoreKeyByStoreKeyShippingMethodsRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  /**
   *	shopping-lists e.g. for wishlist support
   *
   */
  shoppingLists() {
    return new ByProjectKeyInStoreKeyByStoreKeyShoppingListsRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  /**
   *	A staged quote holds the negotiation between the [Buyer](/../api/quotes-overview#buyer) and the [Seller](/../api/quotes-overview#seller).
   */
  stagedQuotes() {
    return new ByProjectKeyInStoreKeyByStoreKeyStagedQuotesRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  /**
   *	Retrieves the authenticated customer.
   */
  login() {
    return new ByProjectKeyInStoreKeyByStoreKeyLoginRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyInventoryByIDRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/inventory/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Checks if an InventoryEntry exists with the provided `id`. Returns a `200` status if the InventoryEntry exists, or a `404` status otherwise.
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/inventory/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      }
    }, this.args.executeRequest);
  }
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/inventory/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs,
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
  /**
   *	Produces the [InventoryEntryDeleted](ctp:api:type:InventoryEntryDeletedMessage) Message.
   */
  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'DELETE',
      uriTemplate: '/{projectKey}/inventory/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyInventoryKeyByKeyRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/inventory/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Checks if an InventoryEntry exists with the provided `key`. Returns a `200` status if the InventoryEntry exists, or a `404` status otherwise.
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/inventory/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      }
    }, this.args.executeRequest);
  }
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/inventory/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs,
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
  /**
   *	Produces the [InventoryEntryDeleted](ctp:api:type:InventoryEntryDeletedMessage) Message.
   */
  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'DELETE',
      uriTemplate: '/{projectKey}/inventory/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyInventoryRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  withId(childPathArgs) {
    return new ByProjectKeyInventoryByIDRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  withKey(childPathArgs) {
    return new ByProjectKeyInventoryKeyByKeyRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/inventory',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Checks if one or more InventoryEntries exist for the provided query predicate. Returns a `200` status if any Inventory Entries match the Query Predicate, or a `404` status otherwise.
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/inventory',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Creates an InventoryEntry in the Project.
   *
   *	If quantity limits are provided, existing Line Items that reference a Product Variant with an SKU that matches the Inventory Entry can be affected. For more information, see [Quantity limits](/../api/carts-orders-overview#quantity-limits).
   *
   *	Produces the [InventoryEntryCreated](ctp:api:type:InventoryEntryCreatedMessage) Message.
   *
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/inventory',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs,
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyLoginRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  /**
   *	Authenticates a global Customer.
   *
   *	If the Customer has multiple active Carts, the anonymous Cart is [merged](/../api/customers-overview#cart-merge-during-sign-in-and-sign-up) into the most recently modified active Cart.
   *
   *	If an account with the given credentials is not found, an [InvalidCredentials](ctp:api:type:InvalidCredentialsError) error is returned.
   *
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/login',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyMeBusinessUnitsByIDRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  /**
   *	Returns a Business Unit for a given `id`. Returns a `200` status if the Business Unit exists and the Customer has access to it, or a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error otherwise.
   *
   */
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/me/business-units/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Checks if a BusinessUnit exists with the provided `id`. Returns a `200` status if the BusinessUnit exists and the Customer has access to it, or a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error otherwise.
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/me/business-units/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      }
    }, this.args.executeRequest);
  }
  /**
   *	Updates a Business Unit for a given `id`. Returns a `200` status if the Business Unit exists and the Customer has access to it, or a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error otherwise.
   *
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/me/business-units/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs,
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyMeBusinessUnitsKeyByKeyRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  /**
   *	Returns a Business Unit for a given `key`. Returns a `200` status if the Business Unit exists and the Customer has access to it, or a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error otherwise.
   */
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/me/business-units/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Checks if a BusinessUnit exists with the provided `key`. Returns a `200` status if the Business Unit exists and the Customer has access to it, or a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error otherwise.
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/me/business-units/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      }
    }, this.args.executeRequest);
  }
  /**
   *	Updates a Business Unit for a given `key`. Returns a `200` status if the Business Unit exists and the Customer has access to it, or a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error otherwise.
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/me/business-units/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs,
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyMeBusinessUnitsRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  withId(childPathArgs) {
    return new ByProjectKeyMeBusinessUnitsByIDRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  withKey(childPathArgs) {
    return new ByProjectKeyMeBusinessUnitsKeyByKeyRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }

  /**
   *	Retrieves Business Units for the authenticated Customer. Returns a `200` status if successful, or a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error otherwise.
   *
   */
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/me/business-units',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Checks if one or more BusinessUnits exist for the provided query predicate. Returns a `200` status if any BusinessUnits match the Query Predicate and the Customer has access to them, or a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error otherwise.
   *
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/me/business-units',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Automatically assigns the Associate to the Business Unit in the default [Associate Role](ctp:api:type:AssociateRole) defined in [BusinessUnitConfiguration](ctp:api:type:BusinessUnitConfiguration). If there is no default Associate Role configured, this request fails with an [InvalidOperation](ctp:api:type:InvalidOperationError) error. When creating a Division, the Associate must have the `AddChildUnits` [Permission](ctp:api:type:Permission) in the parent unit. If the required [Permission](/projects/associate-roles#permission) is missing, an [AssociateMissingPermission](/errors#associatemissingpermission) error is returned.
   *
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/me/business-units',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs,
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyMeCartsReplicateRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  /**
   *	Creates a new Cart by replicating an existing Cart or Order of the authenticated Customer.
   *	This can be useful in cases where a customer wants to cancel a recent order to make some changes or reorder a previous order.
   *
   *	The replicated Cart preserves Customer information, Line Items and Custom Line Items, Custom Fields, Discount Codes, and other settings of the Cart or Order.
   *	If the Line Items become invalid, for example, due to removed Products or Prices, they are removed from the new Cart.
   *	If the Customer switches to another Customer Group, the new Cart is updated with the new value.
   *	It has up-to-date Tax Rates, Prices, and Line Item product data and is in `Active` [CartState](ctp:api:type:CartState).
   *
   *	The new Cart does not contain Payments or Deliveries. The [State](ctp:api:type:ItemState) of Line Items and Custom Line Items is reset to `initial`.
   *
   *	If the Cart or Order to be replicated does not belong to the authenticated Customer, the API returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error
   *
   *	Specific Error Codes:
   *
   *	- [MatchingPriceNotFound](ctp:api:type:MatchingPriceNotFoundError)
   *	- [MissingTaxRateForCountry](ctp:api:type:MissingTaxRateForCountryError)
   *
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/me/carts/replicate',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyMeCartsByIDRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  /**
   *	Returns a Cart for a given `id`. Returns a `200` status if successful.
   *
   *	A [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error is returned in the following scenarios:
   *
   *	- If no Cart exists with the provided `id`.
   *	- If the Cart exists but does not have a `customerId` that matches the [customer:{id}](/scopes#composable-commerce-oauth) scope, or `anonymousId` that matches the [anonymous_id:{id}](/scopes#composable-commerce-oauth) scope.
   *
   */
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/me/carts/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Checks if a Cart exists with the provided `id`. Returns a `200` status if the Cart exists.
   *
   *	A [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error is returned in the following scenarios:
   *
   *	- If no Cart exists with the provided `id`.
   *	- If the Cart exists but does not have a `customerId` that matches the [customer:{id}](/scopes#composable-commerce-oauth) scope, or `anonymousId` that matches the [anonymous_id:{id}](/scopes#composable-commerce-oauth) scope.
   *
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/me/carts/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      }
    }, this.args.executeRequest);
  }
  /**
   *	Updates the Cart for a given `id`. Returns a `200` status if successful.
   *
   *	A [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error is returned in the following scenarios:
   *
   *	- If no Cart exists with the provided `id`.
   *	- If the Cart exists but does not have a `customerId` that matches the [customer:{id}](/scopes#composable-commerce-oauth) scope, or `anonymousId` that matches the [anonymous_id:{id}](/scopes#composable-commerce-oauth) scope.
   *
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/me/carts/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs,
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
  /**
   *	Deletes the Cart for a given `id`. Returns a `200` status if successful.
   *
   *	A [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error is returned in the following scenarios:
   *
   *	- If no Cart exists with the provided `id`.
   *	- If the Cart exists but does not have a `customerId` that matches the [customer:{id}](/scopes#composable-commerce-oauth) scope, or `anonymousId` that matches the [anonymous_id:{id}](/scopes#composable-commerce-oauth) scope.
   *
   */
  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'DELETE',
      uriTemplate: '/{projectKey}/me/carts/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyMeCartsRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  withId(childPathArgs) {
    return new ByProjectKeyMeCartsByIDRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  replicate() {
    return new ByProjectKeyMeCartsReplicateRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }

  /**
   *	Retrieves Carts for the authenticated Customer or anonymous user.
   *
   */
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/me/carts',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Checks if a Cart exists that matches a given Query Predicate and contains either a matching `customerId` or `anonymousId`. Returns a `200` status if the Cart exists, or a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error otherwise.
   *
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/me/carts',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *
   *	Creates a Cart for the Customer or anonymous user. The `customerId` or `anonymousId` field on the Cart is automatically set based on the [customer:{id}](/scopes#composable-commerce-oauth) or [anonymous_id:{id}](/scopes#composable-commerce-oauth) scope.
   *
   *	Specific Error Codes:
   *
   *	- [DiscountCodeNonApplicable](ctp:api:type:DiscountCodeNonApplicableError)
   *	- [InvalidItemShippingDetails](ctp:api:type:InvalidItemShippingDetailsError)
   *	- [MatchingPriceNotFound](ctp:api:type:MatchingPriceNotFoundError)
   *	- [MissingTaxRateForCountry](ctp:api:type:MissingTaxRateForCountryError)
   *
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/me/carts',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs,
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyMeEmailConfirmRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  /**
   *	This is the last step in the [email verification process of a Customer](/../api/projects/customers#email-verification-of-customer).
   *
   *	After the email is verified, all email tokens issued previously through the [email verification flow](/../api/projects/customers#email-verification-of-customer) are invalidated. This invalidation of tokens is [eventually consistent](/../api/general-concepts#eventual-consistency).
   *
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/me/email/confirm',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyMeLoginRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  /**
   *	Retrieves the authenticated customer (that matches the given email/password pair).
   *
   *	If used with an optional [access token for an anonymous session](ctp:api:type:AnonymousSession), all Orders and Carts that belong to the `anonymousId` are assigned to the newly logged-in Customer.
   *
   *	- If the Customer does not have a Cart yet, the most recently modified anonymous cart becomes the Customer's Cart.
   *	- If the Customer already has a Cart, the most recently modified anonymous cart is handled in accordance with [AnonymousCartSignInMode](ctp:api:type:AnonymousCartSignInMode).
   *
   *	If an account with the given credentials is not found, an [InvalidCredentials](ctp:api:type:InvalidCredentialsError) error is returned.
   *
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/me/login',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyMeOrdersQuotesRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  /**
   *
   *	Creates an Order from a [Quote](ctp:api:type:Quote) for the authenticated Customer. To create [B2B Orders](/associates-overview#b2b-resources), the Customer must have the `CreateMyOrdersFromMyQuotes` [Permission](ctp:api:type:Permission).
   *
   *	The referenced Quote must have the `Pending` [state](ctp:api:type:QuoteState) and must be valid (not past the `validTo` date); otherwise, an [InvalidOperation](ctp:api:type:InvalidOperationError) error is returned.
   *
   *	Produces the [OrderCreated](ctp:api:type:OrderCreatedMessage) Message.
   *
   *	Specific Error Codes:
   *
   *	- [OutOfStock](ctp:api:type:OutOfStockError)
   *	- [InvalidItemShippingDetails](ctp:api:type:InvalidItemShippingDetailsError)
   *	- [CountryNotConfiguredInStore](ctp:api:type:CountryNotConfiguredInStoreError)
   *	- [AssociateMissingPermission](ctp:api:type:AssociateMissingPermissionError)
   *
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/me/orders/quotes',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyMeOrdersByIDRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  /**
   *	Retrieves an Order with the provided `id` for the authenticated Customer or anonymous user. Returns a `200` status if successful.
   *
   *	A [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error is returned in the following scenarios:
   *
   *	- If no Order exists for the provided `id`.
   *	- If the Order exists but does not have either a `customerId` that matches the [customer:{id}](/scopes#composable-commerce-oauth) scope, or an `anonymousId` that matches the [anonymous_id:{id}](/scopes#composable-commerce-oauth) scope.
   *
   */
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/me/orders/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Checks if an Order exists with the provided `id` for the authenticated Customer or anonymous user. Returns a `200` status if successful.
   *
   *	A [Not Found](/../api/errors#404-not-found) error is returned in the following scenarios:
   *
   *	- If no Order exists for the provided `id`.
   *	- If the Order exists but does not have either a `customerId` that matches the [customer:{id}](/scopes#composable-commerce-oauth) scope, or an `anonymousId` that matches the [anonymous_id:{id}](/scopes#composable-commerce-oauth) scope.
   *
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/me/orders/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      }
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyMeOrdersRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  withId(childPathArgs) {
    return new ByProjectKeyMeOrdersByIDRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  orderQuote() {
    return new ByProjectKeyMeOrdersQuotesRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }

  /**
   *	Retrieves Orders for the authenticated Customer or anonymous user.
   *
   *	A [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error is returned in the following scenarios:
   *
   *	- If no Orders exist for the provided query predicate.
   *	- If an Order exists but does not have a `customerId` that matches the [customer:{id}](/scopes#composable-commerce-oauth) scope, or `anonymousId` that matches the [anonymous_id:{id}](/scopes#composable-commerce-oauth) scope.
   *
   */
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/me/orders',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Checks if one or more Orders exist for the provided query predicate for the authenticated Customer or anonymous user. Returns a `200` status if successful.
   *
   *	A [Not Found](/../api/errors#404-not-found) error is returned in the following scenarios:
   *
   *	- If no Orders exist that match the provided query predicate.
   *	- If one or more Orders exist but don't have either a `customerId` that matches the [customer:{id}](/scopes#composable-commerce-oauth) scope, or an `anonymousId` that matches the [anonymous_id:{id}](/scopes#composable-commerce-oauth) scope.
   *
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/me/orders',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *
   *	Creates an Order from a Cart for the Customer or anonymous user. The `customerId` or `anonymousId` field on the Order is automatically set based on the [customer:{id}](/scopes#composable-commerce-oauth) or [anonymous_id:{id}](/scopes#composable-commerce-oauth) scope.
   *
   *	The Cart must have a shipping address and an active Shipping Method set. When creating [B2B Orders](/associates-overview#b2b-resources), the Customer must have the `CreateMyOrdersFromMyCarts` [Permission](ctp:api:type:Permission).
   *
   *	If the Cart's `customerId` does not match the [customer:{id}](/scopes#composable-commerce-oauth) scope, or the `anonymousId` does not match the [anonymous_id:{id}](/scopes#composable-commerce-oauth) scope, a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error is returned.
   *
   *	Creating an Order produces the [OrderCreated](ctp:api:type:OrderCreatedMessage) Message.
   *
   *	If a server-side problem occurs, indicated by a 500 Internal Server Error HTTP response, the Order creation may still successfully complete after the error is returned.
   *	If you receive this error, you should verify the status of the Order by querying a unique identifier supplied during the creation request, such as the Order number.
   *
   *	Specific Error Codes:
   *
   *	- [AssociateMissingPermission](ctp:api:type:AssociateMissingPermissionError)
   *	- [DiscountCodeNonApplicable](ctp:api:type:DiscountCodeNonApplicableError)
   *	- [InvalidItemShippingDetails](ctp:api:type:InvalidItemShippingDetailsError)
   *	- [OutOfStock](ctp:api:type:OutOfStockError)
   *	- [PriceChanged](ctp:api:type:PriceChangedError)
   *	- [ShippingMethodDoesNotMatchCart](ctp:api:type:ShippingMethodDoesNotMatchCartError)
   *	- [MatchingPriceNotFound](ctp:api:type:MatchingPriceNotFoundError)
   *	- [MissingTaxRateForCountry](ctp:api:type:MissingTaxRateForCountryError)
   *
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/me/orders',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs,
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyMePasswordResetRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  /**
   *	This is the last step in the [password reset process of a Customer](/../api/projects/customers#password-reset-of-customer).
   *
   *	Resetting a password of the Customer produces the [CustomerPasswordUpdated](ctp:api:type:CustomerPasswordUpdatedMessage) Message with `reset=true`.
   *
   *	After the password is reset, all password tokens issued previously through the [password reset flow](/../api/projects/customers#password-reset-of-customer) are invalidated. In addition, any access and refresh tokens issued previously through the [password flow](/../api/authorization#password-flow) and [refresh token flow](/../api/authorization#refresh-token-flow) are invalidated. This invalidation of tokens is [eventually consistent](/../api/general-concepts#eventual-consistency).
   *
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/me/password/reset',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyMePasswordRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  reset() {
    return new ByProjectKeyMePasswordResetRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }

  /**
   *	Changing the password of the Customer produces the [CustomerPasswordUpdated](ctp:api:type:CustomerPasswordUpdatedMessage) Message with `reset=false`.
   *
   *	If the current password does not match, an [InvalidCurrentPassword](ctp:api:type:InvalidCurrentPasswordError) error is returned.
   *
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/me/password',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyMePaymentsByIDRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  /**
   *	Retrieves a [Payment](/projects/me-payments#mypayment) with the provided `id` for the authenticated Customer or anonymous user.
   */
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/me/payments/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Checks if a [Payment](/projects/me-payments#mypayment) exists with the provided `id` for the authenticated Customer or anonymous user. Returns a `200` status if the Payment exists, or a `404` status otherwise.
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/me/payments/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      }
    }, this.args.executeRequest);
  }
  /**
   *	Updates a [Payment](/projects/me-payments#mypayment) for the authenticated Customer or anonymous user using one or more [update actions](/../api/projects/me-payments#update-actions).
   *	You can only update a Payment if it has no [Transactions](ctp:api:type:Transaction).
   *
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/me/payments/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs,
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
  /**
   *	Deletes a [Payment](/projects/me-payments#mypayment) with the provided `id` for the authenticated Customer or anonymous user.
   *	You can only delete a Payment if it has no [Transactions](ctp:api:type:Transaction).
   *
   */
  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'DELETE',
      uriTemplate: '/{projectKey}/me/payments/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyMePaymentsRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  withId(childPathArgs) {
    return new ByProjectKeyMePaymentsByIDRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }

  /**
   *	Retrieves [Payments](/projects/me-payments#mypayment) for the authenticated Customer or anonymous user.
   */
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/me/payments',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Checks if one or more [Payments](/projects/me-payments#mypayment) exist for the provided query predicate for the authenticated Customer or anonymous user. Returns a `200` status if any Payments match the query predicate, or a `404` status otherwise.
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/me/payments',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Creates a [Payment](/projects/me-payments#mypayment) for the authenticated Customer or anonymous user.
   *	Creating a Payment produces the [PaymentCreated](ctp:api:type:PaymentCreatedMessage) Message.
   *
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/me/payments',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs,
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyMeQuoteRequestsByIDRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/me/quote-requests/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Checks if a QuoteRequest exists with the provided `id`. Returns a `200` status if the QuoteRequest exists, or a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error otherwise.
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/me/quote-requests/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      }
    }, this.args.executeRequest);
  }
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/me/quote-requests/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs,
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyMeQuoteRequestsKeyByKeyRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/me/quote-requests/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Checks if a QuoteRequest exists with the provided `key`. Returns a `200` status if the QuoteRequest exists, or a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error otherwise.
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/me/quote-requests/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      }
    }, this.args.executeRequest);
  }
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/me/quote-requests/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs,
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyMeQuoteRequestsRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  withId(childPathArgs) {
    return new ByProjectKeyMeQuoteRequestsByIDRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  withKey(childPathArgs) {
    return new ByProjectKeyMeQuoteRequestsKeyByKeyRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }

  /**
   *	Retrieves Quote Requests for the authenticated Customer. Returns a `200` status if successful.
   *
   */
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/me/quote-requests',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Checks if one or more QuoteRequests exist for the provided query predicate. Returns a `200` status if any QuoteRequests match the query predicate, or a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error otherwise.
   *
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/me/quote-requests',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/me/quote-requests',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs,
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyMeQuotesByIDRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/me/quotes/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Checks if a Quote exists with the provided `id`. Returns a `200` status if the Quote exists, or a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error otherwise.
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/me/quotes/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      }
    }, this.args.executeRequest);
  }
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/me/quotes/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs,
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyMeQuotesKeyByKeyRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/me/quotes/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Checks if a Quote exists with the provided `key`. Returns a `200` status if the Quote exists, or a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error otherwise.
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/me/quotes/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      }
    }, this.args.executeRequest);
  }
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/me/quotes/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs,
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyMeQuotesRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  withId(childPathArgs) {
    return new ByProjectKeyMeQuotesByIDRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  withKey(childPathArgs) {
    return new ByProjectKeyMeQuotesKeyByKeyRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/me/quotes',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Checks if one or more Quotes exist for the provided query predicate. Returns a `200` status if any Quotes match the query predicate, or a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error otherwise.
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/me/quotes',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyMeShoppingListsByIDRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  /**
   *	Retrieves a ShoppingList with the provided `id` for the authenticated Customer or anonymous user. Returns a `200` status if successful.
   *
   *	A [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error is returned in the following scenarios:
   *
   *	- If no ShoppingList exists with the provided `id`.
   *	- If a ShoppingList exists but does not contain either an `anonymousId` that matches the [anonymous_id:{id}](/scopes#composable-commerce-oauth) scope, or a `customer` with `id` value that matches the [customer:{id}](/scopes#composable-commerce-oauth) scope.
   *
   */
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/me/shopping-lists/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Checks if a ShoppingList exists with the provided `id` for the authenticated Customer or anonymous user. Returns a `200` status if successful.
   *
   *	A [Not Found](/../api/errors#404-not-found) error is returned in the following scenarios:
   *
   *	- If no ShoppingList exists for the provided `id`.
   *	- If a ShoppingList exists but does not contain either an `anonymousId` that matches the [anonymous_id:{id}](/scopes#composable-commerce-oauth) scope, or a `customer` with `id` value that matches the [customer:{id}](/scopes#composable-commerce-oauth) scope.
   *
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/me/shopping-lists/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      }
    }, this.args.executeRequest);
  }
  /**
   *	Updates a ShoppingList for the authenticated Customer or anonymous user using one or more [update actions](/../api/projects/me-shoppingLists#update-actions).  Returns a `200` status if successful.
   *
   *	A [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error is returned in the following scenarios:
   *
   *	- If no ShoppingList exists for the provided `id`.
   *	- If a ShoppingList exists but does not contain either an `anonymousId` that matches the [anonymous_id:{id}](/scopes#composable-commerce-oauth) scope, or a `customer` with `id` value that matches the [customer:{id}](/scopes#composable-commerce-oauth) scope.
   *
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/me/shopping-lists/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs,
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
  /**
   *	Deletes a ShoppingList for the authenticated Customer or anonymous user. Returns a `200` status if successful.
   *
   *	A [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error is returned in the following scenarios:
   *
   *	- If no ShoppingList exists with the provided `id`.
   *	- If a ShoppingList exists but does not contain either an `anonymousId` that matches the [anonymous_id:{id}](/scopes#composable-commerce-oauth) scope, or a `customer` with `id` value that matches the [customer:{id}](/scopes#composable-commerce-oauth) scope.
   *
   */
  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'DELETE',
      uriTemplate: '/{projectKey}/me/shopping-lists/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyMeShoppingListsKeyByKeyRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  /**
   *	Retrieves a ShoppingList with the provided `key` for the authenticated Customer or anonymous user. Returns a `200` status if successful.
   *
   *	A [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error is returned in the following scenarios:
   *
   *	- If no ShoppingList exists with the provided `key`.
   *	- If a ShoppingList exists but does not contain either an `anonymousId` that matches the [anonymous_id:{id}](/scopes#composable-commerce-oauth) scope, or a `customer` with `id` value that matches the [customer:{id}](/scopes#composable-commerce-oauth) scope.
   *
   */
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/me/shopping-lists/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Checks if a ShoppingList exists with the provided `key` for the authenticated Customer or anonymous user. Returns a `200` status if successful.
   *
   *	A [Not Found](/../api/errors#404-not-found) error is returned in the following scenarios:
   *
   *	- If no ShoppingList exists with the provided `key`.
   *	- If a ShoppingList exists but does not contain either an `anonymousId` that matches the [anonymous_id:{id}](/scopes#composable-commerce-oauth) scope, or a `customer` with `id` value that matches the [customer:{id}](/scopes#composable-commerce-oauth) scope.
   *
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/me/shopping-lists/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      }
    }, this.args.executeRequest);
  }
  /**
   *	Updates a ShoppingList for the authenticated Customer or anonymous user using one or more [update actions](/../api/projects/me-shoppingLists#update-actions).  Returns a `200` status if successful.
   *
   *	A [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error is returned in the following scenarios:
   *
   *	- If no ShoppingList exists for the provided `key`.
   *	- If a ShoppingList exists but does not contain either an `anonymousId` that matches the [anonymous_id:{id}](/scopes#composable-commerce-oauth) scope, or a `customer` with `id` value that matches the [customer:{id}](/scopes#composable-commerce-oauth) scope.
   *
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/me/shopping-lists/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs,
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
  /**
   *	Deletes a ShoppingList for the authenticated Customer or anonymous user. Returns a `200` status if successful.
   *
   *	A [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error is returned in the following scenarios:
   *
   *	- If no ShoppingList exists for the provided `key`.
   *	- If a ShoppingList exists but does not contain either an `anonymousId` that matches the [anonymous_id:{id}](/scopes#composable-commerce-oauth) scope, or a `customer` with `id` value that matches the [customer:{id}](/scopes#composable-commerce-oauth) scope.
   *
   */
  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'DELETE',
      uriTemplate: '/{projectKey}/me/shopping-lists/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyMeShoppingListsRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  withId(childPathArgs) {
    return new ByProjectKeyMeShoppingListsByIDRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  withKey(childPathArgs) {
    return new ByProjectKeyMeShoppingListsKeyByKeyRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }

  /**
   *	Retrieves ShoppingLists for the authenticated Customer or anonymous user. Returns a `200` status if successful.
   *
   *	A [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error is returned in the following scenarios:
   *
   *	- If no ShoppingList exists for the provided query predicate.
   *	- If a ShoppingList exists but does not contain either an `anonymousId` that matches the [anonymous_id:{id}](/scopes#composable-commerce-oauth) scope, or a `customer` with `id` value that matches the [customer:{id}](/scopes#composable-commerce-oauth) scope.
   *
   */
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/me/shopping-lists',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Checks if one or more ShoppingLists exist for the provided query predicate for the authenticated Customer or anonymous user. Returns a `200` status if successful.
   *
   *	A [Not Found](/../api/errors#404-not-found) error is returned in the following scenarios:
   *
   *	- If no ShoppingList exists for the provided query predicate.
   *	- If a ShoppingList exists but does not contain either an `anonymousId` that matches the [anonymous_id:{id}](/scopes#composable-commerce-oauth) scope, or a `customer` with `id` value that matches the [customer:{id}](/scopes#composable-commerce-oauth) scope.
   *
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/me/shopping-lists',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Creates a ShoppingList for the authenticated Customer or anonymous user. The `customerId` or `anonymousId` on the ShoppingList is automatically set based on the given [customer:{id}](/scopes#composable-commerce-oauth) or [anonymous_id:{id}](/scopes#composable-commerce-oauth) scope.
   *
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/me/shopping-lists',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs,
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyMeSignupRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  /**
   *	If used with an optional [access token for an anonymous session](ctp:api:type:AnonymousSession), all Orders and Carts that belong to the `anonymousId` are assigned to the newly created Customer.
   *
   *	Creating a Customer produces the [CustomerCreated](ctp:api:type:CustomerCreatedMessage) Message.
   *
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/me/signup',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyMeRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  emailConfirm() {
    return new ByProjectKeyMeEmailConfirmRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  password() {
    return new ByProjectKeyMePasswordRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  signup() {
    return new ByProjectKeyMeSignupRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  login() {
    return new ByProjectKeyMeLoginRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  activeCart() {
    return new ByProjectKeyMeActiveCartRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  /**
   *	MyBusinessUnit creates and provides access to Business Units scoped to a specific user.
   */
  businessUnits() {
    return new ByProjectKeyMeBusinessUnitsRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  /**
   *	A shopping cart holds product variants and can be ordered.
   */
  carts() {
    return new ByProjectKeyMeCartsRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  /**
   *	An order can be created from a cart, usually after a checkout process has been completed.
   */
  orders() {
    return new ByProjectKeyMeOrdersRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  /**
   *	The My Payments endpoint creates and provides access to payments scoped to a specific user.
   */
  payments() {
    return new ByProjectKeyMePaymentsRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  /**
   *	The My Quote Requests endpoint creates and provides access to Quote Requests scoped to a specific user.
   */
  quoteRequests() {
    return new ByProjectKeyMeQuoteRequestsRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  /**
   *	The My Quote endpoint provides access to Quotes scoped to a specific user.
   */
  quotes() {
    return new ByProjectKeyMeQuotesRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  /**
   *	The My Shopping Lists endpoint creates and provides access to Shopping Lists scoped to a specific user.
   */
  shoppingLists() {
    return new ByProjectKeyMeShoppingListsRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }

  /**
   *	Returns a Customer for a given Query Predicate. Returns a `200` status if successful.
   *
   *	A [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error is returned in the following scenarios:
   *
   *	- If no Customer exists for the given Query Predicate.
   *	- If a Customer exists for the given Query Predicate, but does not have an `id` value that matches the [customer:{id}](/scopes#composable-commerce-oauth) scope.
   *
   */
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/me',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Updates the Customer specified in the [customer:{id}](/scopes#composable-commerce-oauth) scope. Returns a `200` status if successful.
   *
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/me',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
  /**
   *	Deletes the Customer specified in the [customer:{id}](/scopes#composable-commerce-oauth) scope. Returns a `200` status if successful.
   */
  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'DELETE',
      uriTemplate: '/{projectKey}/me',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyMessagesByIDRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  /**
   *	Deprecated OAuth 2.0 Scope: `view_orders:{projectKey}`
   */
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/messages/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Checks if a Message exists with the provided `id`. Returns a `200` status if the Message exists, or a `404` status otherwise.
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/messages/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      }
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyMessagesRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  withId(childPathArgs) {
    return new ByProjectKeyMessagesByIDRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }

  /**
   *	Deprecated OAuth 2.0 Scope: `view_orders:{projectKey}`
   */
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/messages',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Checks if one or more Messages exist for the provided query predicate. Returns a `200` status if any Messages match the query predicate, or a `404` status otherwise.
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/messages',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyOrdersEditsByIDApplyRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  /**
   *	Applying an OrderEdit produces the [OrderEditApplied](ctp:api:type:OrderEditAppliedMessage) Message.
   *
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/orders/edits/{ID}/apply',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyOrdersEditsByIDRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  apply() {
    return new ByProjectKeyOrdersEditsByIDApplyRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }

  /**
   *	Retrieves an OrderEdit with the provided `id`.
   */
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/orders/edits/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Checks if an OrderEdit exists with the provided `id`. Returns a `200` status if the OrderEdit exists, or a `404` status otherwise.
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/orders/edits/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      }
    }, this.args.executeRequest);
  }
  /**
   *	Updates an OrderEdit in the Project using one or more [update actions](/../api/projects/order-edits#update-actions).
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/orders/edits/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs,
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
  /**
   *	Deletes an OrderEdit in the Project.
   */
  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'DELETE',
      uriTemplate: '/{projectKey}/orders/edits/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyOrdersEditsKeyByKeyRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  /**
   *	Retrieves an OrderEdit with the provided `key`.
   */
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/orders/edits/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Checks if an OrderEdit exists with the provided `key`. Returns a `200` status if the OrderEdit exists, or a `404` status otherwise.
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/orders/edits/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      }
    }, this.args.executeRequest);
  }
  /**
   *	Updates an OrderEdit in the Project using one or more [update actions](/../api/projects/order-edits#update-actions).
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/orders/edits/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs,
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
  /**
   *	Deletes an OrderEdit in the Project.
   */
  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'DELETE',
      uriTemplate: '/{projectKey}/orders/edits/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyOrdersEditsRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  withKey(childPathArgs) {
    return new ByProjectKeyOrdersEditsKeyByKeyRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  withId(childPathArgs) {
    return new ByProjectKeyOrdersEditsByIDRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }

  /**
   *	Retrieves OrderEdits in the Project.
   */
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/orders/edits',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Checks if one or more OrderEdits exist for the provided query predicate. Returns a `200` status if any OrderEdits match the query predicate, or a `404` status otherwise.
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/orders/edits',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Creates an OrderEdit in the Project.
   *	You can either create multiple Order Edits for an Order and apply them sequentially to an Order, or create multiple Order Edits parallelly (as alternatives to each other) and apply one of them to the Order.
   *
   *	You can only create an Order Edit if the [InventoryMode](/projects/carts#inventorymode) of the Order and its [LineItems](/projects/carts#lineitem) is `None`.
   *
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/orders/edits',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs,
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyOrdersImportRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  /**
   *	Creates an Order without needing to create a Cart first.
   *	Importing an Order produces the [Order Imported](ctp:api:type:OrderImportedMessage) Message.
   *
   *	Specific Error Codes:
   *
   *	- [OutOfStock](ctp:api:type:OutOfStockError)
   *	- [CountryNotConfiguredInStore](ctp:api:type:CountryNotConfiguredInStoreError)
   *
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/orders/import',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyOrdersQuotesRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  /**
   *
   *	Creates an Order from a Quote. The referenced Quote must have the `Pending` [state](ctp:api:type:QuoteState) and must be valid (not past the `validTo` date); otherwise, an [InvalidOperation](ctp:api:type:InvalidOperationError) error is returned.
   *
   *	Produces the [OrderCreated](ctp:api:type:OrderCreatedMessage) Message.
   *
   *	Specific Error Codes:
   *
   *	- [CountryNotConfiguredInStore](ctp:api:type:CountryNotConfiguredInStoreError)
   *	- [InvalidItemShippingDetails](ctp:api:type:InvalidItemShippingDetailsError)
   *	- [InvalidOperation](ctp:api:type:InvalidOperationError)
   *	- [OutOfStock](ctp:api:type:OutOfStockError)
   *
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/orders/quotes',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyOrdersSearchRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/orders/search',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
  /**
   *	Checks whether a search index for the Project's Orders exists.
   *	Returns a `200` status if the index exists, or a `404` status otherwise.
   *
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/orders/search',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      }
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyOrdersByIDRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  /**
   *	Retrieves an Order with the provided `id`.
   */
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/orders/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Checks if an Order exists with the provided `id`. Returns a `200` status if the Order exists, or a `404` status otherwise.
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/orders/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      }
    }, this.args.executeRequest);
  }
  /**
   *	Updates an Order in the Project using one or more [update actions](/../api/projects/orders#update-actions).
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/orders/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs,
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
  /**
   *	Deletes an Order in the Project.
   *	Deleting an Order produces the [OrderDeleted](ctp:api:type:OrderDeletedMessage) Message.
   *
   */
  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'DELETE',
      uriTemplate: '/{projectKey}/orders/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyOrdersOrderNumberByOrderNumberRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  /**
   *	Retrieves an Order with the provided `orderNumber`.
   */
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/orders/order-number={orderNumber}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Checks if an Order exists with the provided `orderNumber`. Returns a `200` status if the Order exists, or a `404` status otherwise.
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/orders/order-number={orderNumber}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      }
    }, this.args.executeRequest);
  }
  /**
   *	Updates an Order in the Project using one or more [update actions](/../api/projects/orders#update-actions).
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/orders/order-number={orderNumber}',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs,
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
  /**
   *	Deletes an Order in the Project.
   *	Deleting an Order produces the [OrderDeleted](ctp:api:type:OrderDeletedMessage) Message.
   *
   */
  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'DELETE',
      uriTemplate: '/{projectKey}/orders/order-number={orderNumber}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyOrdersRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  importOrder() {
    return new ByProjectKeyOrdersImportRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  orderQuote() {
    return new ByProjectKeyOrdersQuotesRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  withOrderNumber(childPathArgs) {
    return new ByProjectKeyOrdersOrderNumberByOrderNumberRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  /**
   *	OrderEdit are containers for financial changes after an Order has been placed.
   */
  edits() {
    return new ByProjectKeyOrdersEditsRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  withId(childPathArgs) {
    return new ByProjectKeyOrdersByIDRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  /**
   *	This endpoint provides high performance search queries over Orders. The order search allows searching through all orders (currently supporting a limit of the 10.000.000 newest orders) in your project.
   *
   */
  search() {
    return new ByProjectKeyOrdersSearchRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }

  /**
   *	Retrieves Orders in the Project.
   */
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/orders',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Checks if one or more Orders exist for the provided query predicate. Returns a `200` status if any Orders match the query predicate, or a `404` status otherwise.
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/orders',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Creates an Order from a Cart.
   *
   *	The Cart must have a shipping address and an active Shipping Method set.
   *
   *	The shipping address is used for tax calculation for a Cart with `Platform` [TaxMode](ctp:api:type:TaxMode).
   *
   *	Creating an Order produces the [OrderCreated](ctp:api:type:OrderCreatedMessage) Message. If the Order is created from a Recurring Order schedule, the [OrderCreatedFromRecurringOrder](ctp:api:type:OrderCreatedFromRecurringOrderMessage) Message is generated.
   *
   *	If a server-side problem occurs, indicated by a 500 Internal Server Error HTTP response, the Order creation may still successfully complete after the error is returned.
   *	If you receive this error, you should verify the status of the Order by querying a unique identifier supplied during the creation request, such as the Order number.
   *
   *	Specific Error Codes:
   *
   *	- [OutOfStock](ctp:api:type:OutOfStockError)
   *	- [PriceChanged](ctp:api:type:PriceChangedError)
   *	- [DiscountCodeNonApplicable](ctp:api:type:DiscountCodeNonApplicableError)
   *	- [ShippingMethodDoesNotMatchCart](ctp:api:type:ShippingMethodDoesNotMatchCartError)
   *	- [InvalidItemShippingDetails](ctp:api:type:InvalidItemShippingDetailsError)
   *	- [InvalidOperation](ctp:api:type:InvalidOperationError)
   *	- [MatchingPriceNotFound](ctp:api:type:MatchingPriceNotFoundError)
   *	- [MissingTaxRateForCountry](ctp:api:type:MissingTaxRateForCountryError)
   *
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/orders',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs,
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyPaymentMethodsByIDRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  /**
   *	Retrieves a PaymentMethod with the provided `id`.
   *
   */
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/payment-methods/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Checks if a PaymentMethod exists with the provided `id`.
   *	Returns a `200` status if the PaymentMethod exists, or a `404` status otherwise.
   *
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/payment-methods/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      }
    }, this.args.executeRequest);
  }
  /**
   *	Updates a PaymentMethod in the Project using one or more [update actions](/../api/projects/payment-methods#update-actions).
   *
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/payment-methods/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs,
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
  /**
   *	Deletes a PaymentMethod in the Project.
   *	This request generates the [PaymentMethodDeleted](ctp:api:type:PaymentMethodDeletedMessage) Message.
   *
   */
  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'DELETE',
      uriTemplate: '/{projectKey}/payment-methods/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyPaymentMethodsKeyByKeyRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  /**
   *	Retrieves a PaymentMethod with the provided `key`.
   *
   */
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/payment-methods/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Checks if a PaymentMethod exists with the provided `key`.
   *	Returns a `200` status if the PaymentMethod exists, or a `404` status otherwise.
   *
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/payment-methods/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      }
    }, this.args.executeRequest);
  }
  /**
   *	Updates a PaymentMethod in the Project using one or more [update actions](/../api/projects/payment-methods#update-actions).
   *
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/payment-methods/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs,
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
  /**
   *	Deletes a PaymentMethod in the Project.
   *	This request generates the [PaymentMethodDeleted](ctp:api:type:PaymentMethodDeletedMessage) Message.
   *
   */
  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'DELETE',
      uriTemplate: '/{projectKey}/payment-methods/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyPaymentMethodsRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  withKey(childPathArgs) {
    return new ByProjectKeyPaymentMethodsKeyByKeyRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  withId(childPathArgs) {
    return new ByProjectKeyPaymentMethodsByIDRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }

  /**
   *	Retrieves all PaymentMethods in the Project.
   *
   */
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/payment-methods',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Checks if one or more PaymentMethods exist for the provided query predicate.
   *	Returns a `200` status if any PaymentMethods match the query predicate, or a `404` status otherwise.
   *
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/payment-methods',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Creates a PaymentMethod in the Project.
   *	This request generates the [PaymentMethodCreated](ctp:api:type:PaymentMethodCreatedMessage) Message.
   *
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/payment-methods',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs,
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyPaymentsByIDRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  /**
   *	Retrieves a Payment with the provided `id`.
   */
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/payments/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Checks if a Payment exists with the provided `id`. Returns a `200` status if the Payment exists, or a `404` status otherwise.
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/payments/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      }
    }, this.args.executeRequest);
  }
  /**
   *	Updates a Payment in the Project using one or more [update actions](/../api/projects/payments#update-actions).
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/payments/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs,
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
  /**
   *	Deletes a Payment in the Project.
   */
  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'DELETE',
      uriTemplate: '/{projectKey}/payments/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyPaymentsKeyByKeyRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  /**
   *	Retrieves a Payment with the provided `key`.
   */
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/payments/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Checks if a Payment exists with the provided `key`. Returns a `200` status if the Payment exists, or a `404` status otherwise.
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/payments/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      }
    }, this.args.executeRequest);
  }
  /**
   *	Updates a Payment in the Project using one or more [update actions](/../api/projects/payments#update-actions).
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/payments/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs,
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
  /**
   *	Deletes a Payment in the Project.
   */
  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'DELETE',
      uriTemplate: '/{projectKey}/payments/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyPaymentsRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  withKey(childPathArgs) {
    return new ByProjectKeyPaymentsKeyByKeyRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  withId(childPathArgs) {
    return new ByProjectKeyPaymentsByIDRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }

  /**
   *	Retrieves Payments in the Project.
   */
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/payments',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Checks if one or more Payments exist for the provided query predicate. Returns a `200` status if any Payments match the query predicate, or a `404` status otherwise.
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/payments',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Creates a Payment in the Project.
   *	Creating a Payment produces the [PaymentCreated](ctp:api:type:PaymentCreatedMessage) Message.
   *
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/payments',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs,
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyProductDiscountsMatchingRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  /**
   *	This endpoint can be used to simulate which Product Discounts would be applied if a specified Product Variant had a specified Price.
   *	Given Product and Product Variant IDs and a Price, this endpoint will return the [ProductDiscount](ctp:api:type:ProductDiscount) that would have been applied to that Price.
   *
   *	If a Product Discount could not be found that could be applied to the Price of a Product Variant, a [NoMatchingProductDiscountFound](ctp:api:type:NoMatchingProductDiscountFoundError) error is returned.
   *
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/product-discounts/matching',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyProductDiscountsByIDRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/product-discounts/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Checks if a ProductDiscount exists with the provided `id`. Returns a `200` status if the ProductDiscount exists, or a `404` status otherwise.
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/product-discounts/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      }
    }, this.args.executeRequest);
  }
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/product-discounts/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs,
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'DELETE',
      uriTemplate: '/{projectKey}/product-discounts/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyProductDiscountsKeyByKeyRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/product-discounts/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Checks if a ProductDiscount exists with the provided `key`. Returns a `200` status if the ProductDiscount exists, or a `404` status otherwise.
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/product-discounts/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      }
    }, this.args.executeRequest);
  }
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/product-discounts/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs,
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'DELETE',
      uriTemplate: '/{projectKey}/product-discounts/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyProductDiscountsRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  matching() {
    return new ByProjectKeyProductDiscountsMatchingRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  withKey(childPathArgs) {
    return new ByProjectKeyProductDiscountsKeyByKeyRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  withId(childPathArgs) {
    return new ByProjectKeyProductDiscountsByIDRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/product-discounts',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Checks if one or more ProductDiscounts exist for the provided query predicate. Returns a `200` status if any ProductDiscounts match the query predicate, or a `404` status otherwise.
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/product-discounts',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/product-discounts',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs,
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyProductProjectionsSearchRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  /**
   *	For implementing funnel search on Product Listing Pages where users select multiple filters, use this POST method.
   *	To avoid URL length restrictions, this method passes the same query parameters as defined in the [GET](ctp:api:endpoint:/{projectKey}/product-projections/search:GET) method, within the request body in URL-encoded format.
   *
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/product-projections/search',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/x-www-form-urlencoded',
        ...methodArgs?.headers
      },
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
  /**
   *	This method appends query parameters to the URL.
   *	The maximum allowed URL length is 8192 characters.
   *	Exceeding this limit will result in URL truncation, potentially leading to unexpected results.
   *	For funnel searches on Product Listing Pages, where users select multiple filters, we recommend the [POST](ctp:api:endpoint:/{projectKey}/product-projections/search:POST) method which passes the query parameters within the request body, avoiding URL length restrictions.
   *
   */
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/product-projections/search',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyProductProjectionsSuggestRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/product-projections/suggest',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyProductProjectionsByIDRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  /**
   *	Gets the current or staged representation of a [Product](ctp:api:type:Product) by its ID. When used with an API Client that has the `view_published_products:{projectKey}` scope, this endpoint only returns published (current) Product Projections.
   *
   */
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/product-projections/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Checks if the current or staged representation of a Product exists with the provided `id`. Returns a `200` status if the ProductProjection exists, or a `404` status otherwise.
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/product-projections/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      }
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyProductProjectionsKeyByKeyRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  /**
   *	Gets the current or staged representation of a [Product](ctp:api:type:Product) found by Key.
   *	When used with an API Client that has the `view_published_products:{projectKey}` scope,
   *	this endpoint only returns published (current) Product Projections.
   *
   */
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/product-projections/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Checks if the current or staged representation of a Product exists with the provided `key`. Returns a `200` status if the ProductProjection exists, or a `404` status otherwise.
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/product-projections/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      }
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyProductProjectionsRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  search() {
    return new ByProjectKeyProductProjectionsSearchRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  /**
   *	The source of data for suggestions is the searchKeyword field in a product
   */
  suggest() {
    return new ByProjectKeyProductProjectionsSuggestRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  withKey(childPathArgs) {
    return new ByProjectKeyProductProjectionsKeyByKeyRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  withId(childPathArgs) {
    return new ByProjectKeyProductProjectionsByIDRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }

  /**
   *	Use the Product Projections query endpoint to get the current or staged representations of Products.
   *	When used with an API Client that has the `view_published_products:{projectKey}` scope,
   *	this endpoint only returns published (current) Product Projections.
   *
   */
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/product-projections',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Checks if the current or staged representation of a Product exists for the provided query predicate. Returns a `200` status if any ProductProjections match the query predicate, or a `404` status otherwise.
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/product-projections',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyProductSelectionsByIDProductsRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/product-selections/{ID}/products',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyProductSelectionsByIDRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  products() {
    return new ByProjectKeyProductSelectionsByIDProductsRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/product-selections/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Checks if a ProductSelection exists with the provided `id`. Returns a `200` status if the ProductSelection exists, or a `404` status otherwise.
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/product-selections/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      }
    }, this.args.executeRequest);
  }
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/product-selections/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs,
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
  /**
   *	Deletion will only succeed if the Product Selection is not assigned to any [Store](ctp:api:type:Store).
   */
  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'DELETE',
      uriTemplate: '/{projectKey}/product-selections/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyProductSelectionsKeyByKeyProductsRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/product-selections/key={key}/products',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyProductSelectionsKeyByKeyRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  products() {
    return new ByProjectKeyProductSelectionsKeyByKeyProductsRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/product-selections/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Checks if a ProductSelection exists with the provided `key`. Returns a `200` status if the ProductSelection exists, or a `404` status otherwise.
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/product-selections/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      }
    }, this.args.executeRequest);
  }
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/product-selections/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs,
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
  /**
   *	Deletion will only succeed if the Product Selection is not assigned to any [Store](ctp:api:type:Store).
   */
  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'DELETE',
      uriTemplate: '/{projectKey}/product-selections/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyProductSelectionsRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  withKey(childPathArgs) {
    return new ByProjectKeyProductSelectionsKeyByKeyRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  withId(childPathArgs) {
    return new ByProjectKeyProductSelectionsByIDRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/product-selections',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Checks if one or more ProductSelections exist for the provided query predicate. Returns a `200` status if any ProductSelections match the query predicate, or a `404` status otherwise.
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/product-selections',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/product-selections',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs,
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyProductTailoringByIDRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/product-tailoring/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/product-tailoring/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs,
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
  /**
   *	Generates the [ProductTailoringDeleted](ctp:api:type:ProductTailoringDeletedMessage) Message.
   *
   */
  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'DELETE',
      uriTemplate: '/{projectKey}/product-tailoring/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyProductTailoringKeyByKeyRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/product-tailoring/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/product-tailoring/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs,
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
  /**
   *	Generates the [ProductTailoringDeleted](ctp:api:type:ProductTailoringDeletedMessage) Message.
   *
   */
  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'DELETE',
      uriTemplate: '/{projectKey}/product-tailoring/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyProductTailoringRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  withKey(childPathArgs) {
    return new ByProjectKeyProductTailoringKeyByKeyRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  withId(childPathArgs) {
    return new ByProjectKeyProductTailoringByIDRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/product-tailoring',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Checks if one or more ProductTailorings exist for the provided query predicate. Returns a `200` status if any ProductTailoring match the query predicate, or a `404` status otherwise.
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/product-tailoring',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Generates the [ProductTailoringCreated](ctp:api:type:ProductTailoringCreatedMessage) Message.
   *
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/product-tailoring',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs,
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyProductTypesByIDRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/product-types/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Checks if a ProductType exists with the provided `id`. Returns a `200` status if the ProductType exists, or a `404` status otherwise.
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/product-types/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      }
    }, this.args.executeRequest);
  }
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/product-types/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs,
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'DELETE',
      uriTemplate: '/{projectKey}/product-types/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyProductTypesKeyByKeyRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/product-types/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Checks if a ProductType exists with the provided `key`. Returns a `200` status if the ProductType exists, or a `404` status otherwise.
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/product-types/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      }
    }, this.args.executeRequest);
  }
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/product-types/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs,
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'DELETE',
      uriTemplate: '/{projectKey}/product-types/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyProductTypesRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  withKey(childPathArgs) {
    return new ByProjectKeyProductTypesKeyByKeyRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  withId(childPathArgs) {
    return new ByProjectKeyProductTypesByIDRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/product-types',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Checks if one or more ProductTypes exist for the provided query predicate. Returns a `200` status if any ProductTypes match the query predicate, or a `404` status otherwise.
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/product-types',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/product-types',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs,
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyProductsSearchRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  /**
   *	If indexing is in progress or if Product Search is inactive, an [ObjectNotFound](ctp:api:type:ObjectNotFoundError) error is returned.
   *	If inactive, you can [reactivate](/../api/projects/product-search#activate-the-product-search-api) it.
   *
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/products/search',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyProductsByIDImagesRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  /**
   *	Uploads a JPEG, PNG, or a GIF image file to a [ProductVariant](ctp:api:type:ProductVariant).
   *	The maximum file size of the image is **10MB**.
   *	Either `variant` or `sku` is required to update a specific ProductVariant.
   *	If neither is provided, the image is uploaded to the Master Variant of the Product.
   *
   *	The response status code depends on the size of the original image.
   *	If the image is small, the API responds with `200 OK`, and if the image is larger, it responds with `202 Accepted`.
   *	The Product returned with a `202 Accepted` status code contains a `warnings` field with an [ImageProcessingOngoing](ctp:api:type:ImageProcessingOngoingWarning) Warning.
   *
   *	Produces the [ProductImageAdded](/projects/messages/product-catalog-messages#product-image-added) Message.
   *
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/products/{ID}/images',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs,
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyProductsByIDProductSelectionsRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/products/{ID}/product-selections',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyProductsByIDRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  images() {
    return new ByProjectKeyProductsByIDImagesRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  productSelections() {
    return new ByProjectKeyProductsByIDProductSelectionsRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }

  /**
   *	If [Product price selection query parameters](/../api/pricing-and-discounts-overview#product-price-selection) are provided, the selected Prices are added to the response.
   */
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/products/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Checks if a Product exists with the provided `id`. Returns a `200` status if the Product exists, or a `404` status otherwise.
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/products/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      }
    }, this.args.executeRequest);
  }
  /**
   *	If [Product price selection query parameters](/../api/pricing-and-discounts-overview#product-price-selection) are provided, the selected Prices are added to the response.
   *
   *	A failed response can return a [DuplicatePriceScope](ctp:api:type:DuplicatePriceScopeError), [DuplicateVariantValues](ctp:api:type:DuplicateVariantValuesError), [DuplicateAttributeValue](ctp:api:type:DuplicateAttributeValueError), or [DuplicateAttributeValues](ctp:api:type:DuplicateAttributeValuesError) error.
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/products/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs,
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
  /**
   *	If [Product price selection query parameters](/../api/pricing-and-discounts-overview#product-price-selection) are provided, the selected Prices are added to the response.
   *	Produces the [ProductDeleted](/projects/messages/product-catalog-messages#product-deleted) Message.
   */
  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'DELETE',
      uriTemplate: '/{projectKey}/products/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyProductsKeyByKeyProductSelectionsRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/products/key={key}/product-selections',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyProductsKeyByKeyRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  productSelections() {
    return new ByProjectKeyProductsKeyByKeyProductSelectionsRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }

  /**
   *	If [Product price selection query parameters](/../api/pricing-and-discounts-overview#product-price-selection) are provided, the selected Prices are added to the response.
   */
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/products/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Checks if a Product exists with the provided `key`. Returns a `200` status if the Product exists, or a `404` status otherwise.
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/products/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      }
    }, this.args.executeRequest);
  }
  /**
   *	A failed response can return a [DuplicatePriceScope](ctp:api:type:DuplicatePriceScopeError), [DuplicateVariantValues](ctp:api:type:DuplicateVariantValuesError), [DuplicateAttributeValue](ctp:api:type:DuplicateAttributeValueError), or [DuplicateAttributeValues](ctp:api:type:DuplicateAttributeValuesError) error.
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/products/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs,
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
  /**
   *	If [Product price selection query parameters](/../api/pricing-and-discounts-overview#product-price-selection) are provided, the selected Prices are added to the response.
   *	Produces the [ProductDeleted](/projects/messages/product-catalog-messages#product-deleted) Message.
   */
  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'DELETE',
      uriTemplate: '/{projectKey}/products/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyProductsRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  withKey(childPathArgs) {
    return new ByProjectKeyProductsKeyByKeyRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  withId(childPathArgs) {
    return new ByProjectKeyProductsByIDRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  /**
   *	This endpoint provides high-performance search queries over Products. Product Search allows searching through all products with a current projection in your Project.
   *
   */
  search() {
    return new ByProjectKeyProductsSearchRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }

  /**
   *	If [Product price selection query parameters](/../api/pricing-and-discounts-overview#product-price-selection) are provided, the selected Prices are added to the response.
   */
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/products',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Checks if one or more Products exist for the provided query predicate. Returns a `200` status if any Products match the query predicate, or a `404` status otherwise.
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/products',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	To create a new Product, send a representation that is going to become the initial _staged_ and _current_ representation of the new Product in the catalog.
   *	If [Product price selection query parameters](/../api/pricing-and-discounts-overview#product-price-selection) are provided, selected Prices will be added to the response.
   *	Produces the [ProductCreated](/projects/messages/product-catalog-messages#product-created) Message.
   *
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/products',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs,
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyQuoteRequestsByIDRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/quote-requests/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Checks if a QuoteRequest exists with the provided `id`. Returns a `200` status if the QuoteRequest exists, or a `404` status otherwise.
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/quote-requests/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      }
    }, this.args.executeRequest);
  }
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/quote-requests/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs,
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'DELETE',
      uriTemplate: '/{projectKey}/quote-requests/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyQuoteRequestsKeyByKeyRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/quote-requests/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Checks if a QuoteRequest exists with the provided `key`. Returns a `200` status if the QuoteRequest exists, or a `404` status otherwise.
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/quote-requests/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      }
    }, this.args.executeRequest);
  }
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/quote-requests/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs,
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'DELETE',
      uriTemplate: '/{projectKey}/quote-requests/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyQuoteRequestsRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  withKey(childPathArgs) {
    return new ByProjectKeyQuoteRequestsKeyByKeyRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  withId(childPathArgs) {
    return new ByProjectKeyQuoteRequestsByIDRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/quote-requests',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Checks if one or more QuoteRequests exist for the provided query predicate. Returns a `200` status if any QuoteRequests match the query predicate, or a `404` status otherwise.
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/quote-requests',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/quote-requests',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs,
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyQuotesByIDRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/quotes/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Checks if a Quote exists with the provided `id`. Returns a `200` status if the Quote exists, or a `404` status otherwise.
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/quotes/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      }
    }, this.args.executeRequest);
  }
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/quotes/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs,
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'DELETE',
      uriTemplate: '/{projectKey}/quotes/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyQuotesKeyByKeyRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/quotes/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Checks if a Quote exists with the provided `key`. Returns a `200` status if the Quote exists, or a `404` status otherwise.
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/quotes/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      }
    }, this.args.executeRequest);
  }
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/quotes/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs,
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'DELETE',
      uriTemplate: '/{projectKey}/quotes/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyQuotesRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  withKey(childPathArgs) {
    return new ByProjectKeyQuotesKeyByKeyRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  withId(childPathArgs) {
    return new ByProjectKeyQuotesByIDRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/quotes',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Checks if one or more Quotes exist for the provided query predicate. Returns a `200` status if any Quotes match the query predicate, or a `404` status otherwise.
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/quotes',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/quotes',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs,
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyRecurrencePoliciesByIDRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  /**
   *	Retrieves a Recurrence Policy with the provided `id`.
   *
   */
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/recurrence-policies/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Checks if a Recurrence Policy exists with the provided `id`. Returns a `200` status if the Recurrence Policy exists, or a [NotFound](ctp:api:type:ResourceNotFoundError) error otherwise.
   *
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/recurrence-policies/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      }
    }, this.args.executeRequest);
  }
  /**
   *	Updates a Recurrence Policy using one or more [update actions](/../api/projects/recurrence-policies#update-actions).
   *
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/recurrence-policies/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs,
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
  /**
   *	Deletes a Recurrence Policy in the Project.
   *
   *	A Recurrence Policy can be deleted only if it is not referenced by any Embedded Price, Standalone Price, or (Custom) Line Item, otherwise a [ReferenceExists](ctp:api:type:ReferenceExistsError) error is returned.
   *
   */
  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'DELETE',
      uriTemplate: '/{projectKey}/recurrence-policies/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyRecurrencePoliciesKeyByKeyRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  /**
   *	Retrieves a Recurrence Policy with the provided `key`.
   *
   */
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/recurrence-policies/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Checks if a Recurrence Policy exists with the provided `key`. Returns a `200` status if the Recurrence Policy exists, or a [NotFound](ctp:api:type:ResourceNotFoundError) error otherwise.
   *
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/recurrence-policies/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      }
    }, this.args.executeRequest);
  }
  /**
   *	Updates a Recurrence Policy using one or more [update actions](/../api/projects/recurrence-policies#update-actions).
   *
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/recurrence-policies/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs,
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
  /**
   *	Deletes a Recurrence Policy in the Project.
   *
   *	A Recurrence Policy can be deleted only if it is not referenced by any Embedded Price, Standalone Price, or (Custom) Line Item, otherwise a [ReferenceExists](ctp:api:type:ReferenceExistsError) error is returned.
   *
   */
  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'DELETE',
      uriTemplate: '/{projectKey}/recurrence-policies/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyRecurrencePoliciesRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  withKey(childPathArgs) {
    return new ByProjectKeyRecurrencePoliciesKeyByKeyRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  withId(childPathArgs) {
    return new ByProjectKeyRecurrencePoliciesByIDRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }

  /**
   *	Retrieves Recurrence Policies in the Project.
   *
   */
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/recurrence-policies',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Checks if one or more Recurrence Policies exist for the provided query predicate. Returns a `200` status if any Recurrence Policies match the query predicate, or a [NotFound](ctp:api:type:ResourceNotFoundError) error otherwise.
   *
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/recurrence-policies',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Creates a Recurrence Policy in the Project.
   *
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/recurrence-policies',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs,
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyRecurringOrdersByIDRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  /**
   *	Retrieves a Recurring Order with the provided `id`.
   *
   */
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/recurring-orders/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Checks if a Recurring Order exists with the provided `id`. Returns a `200` status if the Recurring Order exists, or a [NotFound](ctp:api:type:ResourceNotFoundError) error otherwise.
   *
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/recurring-orders/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      }
    }, this.args.executeRequest);
  }
  /**
   *	Updates a Recurring Order using one or more [update actions](/../api/projects/recurring-orders#update-actions).
   *
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/recurring-orders/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs,
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
  /**
   *	Deletes a Recurring Order in the Project.
   *
   */
  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'DELETE',
      uriTemplate: '/{projectKey}/recurring-orders/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyRecurringOrdersKeyByKeyRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  /**
   *	Retrieves a Recurring Order with the provided `key`.
   *
   */
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/recurring-orders/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Checks if a Recurring Order exists with the provided `key`. Returns a `200` status if the Recurring Order exists, or a [NotFound](ctp:api:type:ResourceNotFoundError) error otherwise.
   *
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/recurring-orders/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      }
    }, this.args.executeRequest);
  }
  /**
   *	Updates a Recurring Order using one or more [update actions](/../api/projects/recurring-orders#update-actions).
   *
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/recurring-orders/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs,
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
  /**
   *	Deletes a Recurring Order in the Project.
   *
   */
  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'DELETE',
      uriTemplate: '/{projectKey}/recurring-orders/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyRecurringOrdersRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  withId(childPathArgs) {
    return new ByProjectKeyRecurringOrdersByIDRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  withKey(childPathArgs) {
    return new ByProjectKeyRecurringOrdersKeyByKeyRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }

  /**
   *	Retrieves Recurring Orders in the Project.
   *
   */
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/recurring-orders',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Checks if one or more Recurring Orders exist for the provided query predicate. Returns a `200` status if any Recurring Orders match the query predicate, or a [NotFound](ctp:api:type:ResourceNotFoundError) error otherwise.
   *
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/recurring-orders',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Creates a Recurring Order in the Project.
   *	Produces the [RecurringOrderCreated](ctp:api:type:RecurringOrderCreatedMessage) message.
   *
   *	The Cart is validated to ensure that it is convertible to an [Order](ctp:api:type:Order). If the validation fails, an error is returned.
   *	If the expiration date has been reached when the [Recurring Order](ctp:api:type:RecurringOrder) is processed, its [RecurringOrderState](ctp:api:type:RecurringOrderState) will be updated to `Expired`, and no Order will be created.
   *
   *	If a server-side problem occurs, indicated by a 500 Internal Server Error HTTP response, the Recurring Order creation may still successfully complete after the error is returned.
   *	If you receive this error, you should verify the status of the Recurring Order by querying a unique identifier supplied during the creation request, such as the key.
   *
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/recurring-orders',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs,
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyReviewsByIDRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/reviews/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Checks if a Review exists with the provided `id`. Returns a `200` status if the Review exists, or a `404` status otherwise.
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/reviews/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      }
    }, this.args.executeRequest);
  }
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/reviews/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs,
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'DELETE',
      uriTemplate: '/{projectKey}/reviews/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyReviewsKeyByKeyRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/reviews/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Checks if a Review exists with the provided `key`. Returns a `200` status if the Review exists, or a `404` status otherwise.
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/reviews/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      }
    }, this.args.executeRequest);
  }
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/reviews/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs,
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'DELETE',
      uriTemplate: '/{projectKey}/reviews/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyReviewsRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  withKey(childPathArgs) {
    return new ByProjectKeyReviewsKeyByKeyRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  withId(childPathArgs) {
    return new ByProjectKeyReviewsByIDRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/reviews',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Checks if one or more Reviews exist for the provided query predicate. Returns a `200` status if any Reviews match the query predicate, or a `404` status otherwise.
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/reviews',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/reviews',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs,
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyShippingMethodsMatchingCartLocationRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  /**
   *	Retrieves the active ShippingMethods that can ship to the provided [Location](ctp:api:type:Location)
   *	with a `predicate` that matches the provided Cart.
   *
   *	Each ShippingMethod contains exactly one ShippingRate with the flag `isMatching` set to `true`. This ShippingRate is used when the ShippingMethod is [added to the Cart](ctp:api:type:CartSetShippingMethodAction).
   *
   *	If a matching ShippingMethod has `isDefault` set to `true`, it is returned as the first item in the array.
   *
   */
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/shipping-methods/matching-cart-location',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Checks if an active ShippingMethod that can ship to the provided [Location](ctp:api:type:Location) exists for the provided Cart. Returns a `200 OK` status if the ShippingMethod exists or a [Not Found](/../api/errors#404-not-found) error otherwise.
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/shipping-methods/matching-cart-location',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyShippingMethodsMatchingCartRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  /**
   *	Retrieves the active ShippingMethods that can ship to the shipping address of the provided Cart.
   *
   *	Each ShippingMethod contains exactly one ShippingRate with the flag `isMatching` set to `true`. This ShippingRate is used when the ShippingMethod is [added to the Cart](ctp:api:type:CartSetShippingMethodAction).
   *
   *	If a matching ShippingMethod has `isDefault` set to `true`, it is returned as the first item in the array.
   *
   */
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/shipping-methods/matching-cart',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Checks if an active ShippingMethod exists for the provided Cart. Returns a `200 OK` status if the ShippingMethod exists or a [Not Found](/../api/errors#404-not-found) error otherwise.
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/shipping-methods/matching-cart',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyShippingMethodsMatchingLocationRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  /**
   *	Retrieves the active ShippingMethods that can ship to the provided [Location](/projects/zones#location).
   *
   *	The following applies:
   *
   *	- ShippingMethods that have a `predicate` defined are automatically disqualified.
   *	- If the `currency` parameter is provided, then the ShippingMethods must also have a rate defined in the specified currency.
   *	- Each ShippingMethod contains at least one ShippingRate with the flag `isMatching` set to `true`.
   *	- If the `currency` parameter is provided, exactly one ShippingRate will contain it.
   *	- If a matching ShippingMethod has `isDefault` set to `true`, it is returned as the first item in the array.
   *
   */
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/shipping-methods/matching-location',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Checks if an active ShippingMethod that can ship to the provided [Location](ctp:api:type:Location) exists. Returns a `200 OK` status if the ShippingMethod exists or a [Not Found](/../api/errors#404-not-found) error otherwise.
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/shipping-methods/matching-location',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyShippingMethodsMatchingOrdereditRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  /**
   *	Retrieves the active ShippingMethods that can ship to the provided [Location](ctp:api:type:Location) for an [OrderEdit](ctp:api:type:OrderEdit).
   *
   *	If a matching ShippingMethod has `isDefault` set to `true`, it is returned as the first item in the array.
   *
   *	If the OrderEdit preview cannot be generated, an [EditPreviewFailed](ctp:api:type:EditPreviewFailedError) error is returned.
   *
   */
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/shipping-methods/matching-orderedit',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Checks if an active ShippingMethod that can ship to the provided [Location](ctp:api:type:Location) exists for the provided [OrderEdit](ctp:api:type:OrderEdit). Returns a `200 OK` status if the ShippingMethod exists or a [Not Found](/../api/errors#404-not-found) error otherwise.
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/shipping-methods/matching-orderedit',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyShippingMethodsByIDRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  /**
   *	Retrieves a ShippingMethod with the provided `id`.
   */
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/shipping-methods/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Checks if a ShippingMethod exists with the provided `id`. Returns a `200 OK` status if the ShippingMethod exists or a [Not Found](/../api/errors#404-not-found) error otherwise.
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/shipping-methods/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      }
    }, this.args.executeRequest);
  }
  /**
   *	Updates a ShippingMethod in the Project using one or more [update actions](/../api/projects/shippingMethods#update-actions).
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/shipping-methods/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs,
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
  /**
   *	Deletes a ShippingMethod in the Project.
   */
  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'DELETE',
      uriTemplate: '/{projectKey}/shipping-methods/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyShippingMethodsKeyByKeyRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  /**
   *	Retrieves a ShippingMethod with the provided `key`.
   */
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/shipping-methods/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Checks if a ShippingMethod exists with the provided `key`. Returns a `200 OK` status if the ShippingMethod exists or a [Not Found](/../api/errors#404-not-found) error otherwise.
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/shipping-methods/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      }
    }, this.args.executeRequest);
  }
  /**
   *	Updates a ShippingMethod in the Project using one or more [update actions](/../api/projects/shippingMethods#update-actions).
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/shipping-methods/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs,
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
  /**
   *	Deletes a ShippingMethod in the Project.
   */
  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'DELETE',
      uriTemplate: '/{projectKey}/shipping-methods/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyShippingMethodsRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  withKey(childPathArgs) {
    return new ByProjectKeyShippingMethodsKeyByKeyRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  /**
   *	Get matching ShippingMethods for a Cart
   */
  matchingCart() {
    return new ByProjectKeyShippingMethodsMatchingCartRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  /**
   *	Get matching ShippingMethods for a Cart and Location
   */
  matchingCartLocation() {
    return new ByProjectKeyShippingMethodsMatchingCartLocationRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  /**
   *	Get matching ShippingMethods for an OrderEdit
   */
  matchingOrderedit() {
    return new ByProjectKeyShippingMethodsMatchingOrdereditRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  /**
   *	Get matching ShippingMethods for a Location
   */
  matchingLocation() {
    return new ByProjectKeyShippingMethodsMatchingLocationRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  withId(childPathArgs) {
    return new ByProjectKeyShippingMethodsByIDRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }

  /**
   *	Retrieves all ShippingMethods in the Project.
   */
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/shipping-methods',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Checks if one or more ShippingMethods exist for the provided query predicate. Returns a `200 OK` status if any ShippingMethods match the query predicate or a [Not Found](/../api/errors#404-not-found) error otherwise.
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/shipping-methods',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Creates a ShippingMethod in the Project.
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/shipping-methods',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs,
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyShoppingListsByIDRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  /**
   *	Retrieves a ShoppingList with the provided `id`.
   */
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/shopping-lists/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Checks if a ShoppingList exists with the provided `id`. Returns a `200` status if the ShoppingList exists, or a `404` status otherwise.
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/shopping-lists/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      }
    }, this.args.executeRequest);
  }
  /**
   *	Updates a ShoppingList in the Project using one or more [update actions](/../api/projects/shoppingLists#update-actions).
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/shopping-lists/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs,
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
  /**
   *	Deletes a ShoppingList in the Project.
   */
  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'DELETE',
      uriTemplate: '/{projectKey}/shopping-lists/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyShoppingListsKeyByKeyRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  /**
   *	Retrieves a ShoppingList with the provided `key`.
   */
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/shopping-lists/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Checks if a ShoppingList exists with the provided `key`. Returns a `200` status if the ShoppingList exists, or a `404` status otherwise.
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/shopping-lists/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      }
    }, this.args.executeRequest);
  }
  /**
   *	Updates a ShoppingList in the Project using one or more [update actions](/../api/projects/shoppingLists#update-actions).
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/shopping-lists/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs,
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
  /**
   *	Deletes a ShoppingList in the Project.
   */
  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'DELETE',
      uriTemplate: '/{projectKey}/shopping-lists/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyShoppingListsRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  withKey(childPathArgs) {
    return new ByProjectKeyShoppingListsKeyByKeyRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  withId(childPathArgs) {
    return new ByProjectKeyShoppingListsByIDRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }

  /**
   *	Retrieves ShoppingLists in the Project.
   */
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/shopping-lists',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Checks if one or more ShoppingLists exist for the provided query predicate. Returns a `200` status if any ShoppingLists match the query predicate, or a `404` status otherwise.
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/shopping-lists',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Create a ShoppingList in the Project.
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/shopping-lists',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs,
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyStagedQuotesByIDRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/staged-quotes/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Checks if a StagedQuote exists with the provided `id`. Returns a `200` status if the StagedQuote exists, or a `404` status otherwise.
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/staged-quotes/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      }
    }, this.args.executeRequest);
  }
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/staged-quotes/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs,
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'DELETE',
      uriTemplate: '/{projectKey}/staged-quotes/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyStagedQuotesKeyByKeyRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/staged-quotes/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Checks if a StagedQuote exists with the provided `key`. Returns a `200` status if the StagedQuote exists, or a `404` status otherwise.
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/staged-quotes/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      }
    }, this.args.executeRequest);
  }
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/staged-quotes/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs,
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'DELETE',
      uriTemplate: '/{projectKey}/staged-quotes/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyStagedQuotesRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  withKey(childPathArgs) {
    return new ByProjectKeyStagedQuotesKeyByKeyRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  withId(childPathArgs) {
    return new ByProjectKeyStagedQuotesByIDRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/staged-quotes',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Checks if one or more StagedQuotes exist for the provided query predicate. Returns a `200` status if any StagedQuotes match the query predicate, or a `404` status otherwise.
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/staged-quotes',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/staged-quotes',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs,
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyStandalonePricesByIDRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/standalone-prices/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Checks if a StandalonePrice exists with the provided `id`. Returns a `200` status if the StandalonePrice exists, or a `404` status otherwise.
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/standalone-prices/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      }
    }, this.args.executeRequest);
  }
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/standalone-prices/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs,
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
  /**
   *	Produces the [StandalonePriceDeleted](ctp:api:type:StandalonePriceDeletedMessage) Message.
   *
   */
  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'DELETE',
      uriTemplate: '/{projectKey}/standalone-prices/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyStandalonePricesKeyByKeyRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/standalone-prices/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Checks if a StandalonePrice exists with the provided `key`. Returns a `200` status if the StandalonePrice exists, or a `404` status otherwise.
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/standalone-prices/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      }
    }, this.args.executeRequest);
  }
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/standalone-prices/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs,
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
  /**
   *	Produces the [StandalonePriceDeleted](ctp:api:type:StandalonePriceDeletedMessage) Message.
   *
   */
  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'DELETE',
      uriTemplate: '/{projectKey}/standalone-prices/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyStandalonePricesRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  withKey(childPathArgs) {
    return new ByProjectKeyStandalonePricesKeyByKeyRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  withId(childPathArgs) {
    return new ByProjectKeyStandalonePricesByIDRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/standalone-prices',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Checks if one or more StandalonePrices exist for the provided query predicate. Returns a `200` status if any StandalonePrices match the query predicate, or a `404` status otherwise.
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/standalone-prices',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Creating a Standalone Price produces the [StandalonePriceCreated](ctp:api:type:StandalonePriceCreatedMessage) Message.
   *
   *	- If the Standalone Price has the same price scope as an existing Standalone Price, a [DuplicateStandalonePriceScope](ctp:api:type:DuplicateStandalonePriceScopeError) error is returned.
   *	- If the Standalone Price has overlapping validity periods within the same price scope, a [OverlappingStandalonePriceValidity](ctp:api:type:OverlappingStandalonePriceValidityError) error is returned. A Price without validity period does not conflict with a Price defined for a time period.
   *
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/standalone-prices',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs,
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyStatesByIDRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/states/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Checks if a State exists with the provided `id`. Returns a `200` status if the State exists, or a `404` status otherwise.
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/states/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      }
    }, this.args.executeRequest);
  }
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/states/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs,
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'DELETE',
      uriTemplate: '/{projectKey}/states/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyStatesKeyByKeyRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/states/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Checks if a State exists with the provided `key`. Returns a `200` status if the State exists, or a `404` status otherwise.
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/states/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      }
    }, this.args.executeRequest);
  }
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/states/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs,
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'DELETE',
      uriTemplate: '/{projectKey}/states/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyStatesRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  withKey(childPathArgs) {
    return new ByProjectKeyStatesKeyByKeyRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  withId(childPathArgs) {
    return new ByProjectKeyStatesByIDRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/states',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Checks if one or more States exist for the provided query predicate. Returns a `200` status if any States match the query predicate, or a `404` status otherwise.
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/states',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/states',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs,
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyStoresByIDRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/stores/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Checks if a Store exists with the provided `id`. Returns a `200` status if the Store exists, or a `404` status otherwise.
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/stores/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      }
    }, this.args.executeRequest);
  }
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/stores/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs,
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'DELETE',
      uriTemplate: '/{projectKey}/stores/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyStoresKeyByKeyRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/stores/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Checks if a Store exists with the provided `key`. Returns a `200` status if the Store exists, or a `404` status otherwise.
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/stores/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      }
    }, this.args.executeRequest);
  }
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/stores/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs,
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'DELETE',
      uriTemplate: '/{projectKey}/stores/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyStoresRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  withKey(childPathArgs) {
    return new ByProjectKeyStoresKeyByKeyRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  withId(childPathArgs) {
    return new ByProjectKeyStoresByIDRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/stores',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Checks if one or more Stores exist for the provided query predicate. Returns a `200` status if any Stores match the query predicate, or a `404` status otherwise.
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/stores',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/stores',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs,
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeySubscriptionsByIDHealthRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  /**
   *	This endpoint can be polled by a monitoring or alerting system that checks the health of your Subscriptions. To ease integration with such systems this endpoint does not require [Authorization](/../api/authorization).
   *
   */
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/subscriptions/{ID}/health',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      }
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeySubscriptionsByIDRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  withIdHealth() {
    return new ByProjectKeySubscriptionsByIDHealthRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/subscriptions/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      }
    }, this.args.executeRequest);
  }
  /**
   *	Checks if a Subscription exists with the provided `id`. Returns a `200` status if the Subscription exists, or a `404` status otherwise.
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/subscriptions/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      }
    }, this.args.executeRequest);
  }
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/subscriptions/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'DELETE',
      uriTemplate: '/{projectKey}/subscriptions/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeySubscriptionsKeyByKeyRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/subscriptions/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      }
    }, this.args.executeRequest);
  }
  /**
   *	Checks if a Subscription exists with the provided `key`. Returns a `200` status if the Subscription exists, or a `404` status otherwise.
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/subscriptions/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      }
    }, this.args.executeRequest);
  }
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/subscriptions/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'DELETE',
      uriTemplate: '/{projectKey}/subscriptions/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeySubscriptionsRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  withKey(childPathArgs) {
    return new ByProjectKeySubscriptionsKeyByKeyRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  withId(childPathArgs) {
    return new ByProjectKeySubscriptionsByIDRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/subscriptions',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Checks if one or more Subscriptions exist for the provided query predicate. Returns a `200` status if any Subscriptions match the query predicate, or a `404` status otherwise.
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/subscriptions',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	A test notification is sent to ensure the correct configuration of the Destination. If the notification cannot be delivered, the Subscription will not be created. The payload of the test notification is of type [ResourceCreated](/../api/projects/subscriptions#resourcecreateddeliverypayload) for the `resourceTypeId` `subscription`.
   *
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/subscriptions',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyTaxCategoriesByIDRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/tax-categories/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Checks if a TaxCategory exists with the provided `id`. Returns a `200` status if the TaxCategory exists, or a `404` status otherwise.
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/tax-categories/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      }
    }, this.args.executeRequest);
  }
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/tax-categories/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs,
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'DELETE',
      uriTemplate: '/{projectKey}/tax-categories/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyTaxCategoriesKeyByKeyRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/tax-categories/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Checks if a TaxCategory exists with the provided `key`. Returns a `200` status if the Tax Category exists, or a `404` status otherwise.
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/tax-categories/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      }
    }, this.args.executeRequest);
  }
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/tax-categories/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs,
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'DELETE',
      uriTemplate: '/{projectKey}/tax-categories/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyTaxCategoriesRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  withKey(childPathArgs) {
    return new ByProjectKeyTaxCategoriesKeyByKeyRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  withId(childPathArgs) {
    return new ByProjectKeyTaxCategoriesByIDRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/tax-categories',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Checks if one or more Tax Categories exist for the provided query predicate. Returns a `200` status if any TaxCategories match the query predicate, or a `404` status otherwise.
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/tax-categories',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/tax-categories',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs,
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyTypesByIDRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/types/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Checks if a Type exists with the provided `id`. Returns a `200` status if the Type exists, or a `404` status otherwise.
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/types/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      }
    }, this.args.executeRequest);
  }
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/types/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs,
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'DELETE',
      uriTemplate: '/{projectKey}/types/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyTypesKeyByKeyRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/types/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Checks if a Type exists with the provided `key`. Returns a `200` status if the Type exists, or a `404` status otherwise.
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/types/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      }
    }, this.args.executeRequest);
  }
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/types/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs,
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'DELETE',
      uriTemplate: '/{projectKey}/types/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyTypesRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  withKey(childPathArgs) {
    return new ByProjectKeyTypesKeyByKeyRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  withId(childPathArgs) {
    return new ByProjectKeyTypesByIDRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/types',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Checks if one or more Types exist for the provided query predicate. Returns a `200` status if any Types match the query predicate, or a `404` status otherwise.
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/types',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/types',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs,
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyZonesByIDRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  /**
   *	Retrieves a Zone with the provided `id`.
   */
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/zones/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Checks if a Zone exists with the provided `id`. Returns a `200 OK` status if the Zone exists or a [Not Found](/../api/errors#404-not-found) error otherwise.
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/zones/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      }
    }, this.args.executeRequest);
  }
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/zones/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs,
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
  /**
   *	Deletes a Zone in the Project.
   */
  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'DELETE',
      uriTemplate: '/{projectKey}/zones/{ID}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyZonesKeyByKeyRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  /**
   *	Retrieves a Zone with the provided `key`.
   */
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/zones/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Checks if a Zone exists with the provided `key`. Returns a `200 OK` status if the Zone exists or a [Not Found](/../api/errors#404-not-found) error otherwise.
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/zones/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      }
    }, this.args.executeRequest);
  }
  /**
   *	Updates a Zone in the Project using one or more [update actions](/../api/projects/zones#update-actions).
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/zones/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs,
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
  /**
   *	Deletes a Zone in the Project.
   */
  delete(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'DELETE',
      uriTemplate: '/{projectKey}/zones/key={key}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyZonesRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  withKey(childPathArgs) {
    return new ByProjectKeyZonesKeyByKeyRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  withId(childPathArgs) {
    return new ByProjectKeyZonesByIDRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }

  /**
   *	Retrieves all Zones in the Project.
   */
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}/zones',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Checks if one or more Zones exist for the provided query predicate. Returns a `200 OK` status if any Zones match the query predicate, or a [Not Found](/../api/errors#404-not-found) error otherwise.
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}/zones',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs
    }, this.args.executeRequest);
  }
  /**
   *	Creates a Zone in the Project.
   */
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}/zones',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      queryParams: methodArgs?.queryArgs,
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
/**
 **/
class ByProjectKeyRequestBuilder {
  constructor(args) {
    this.args = args;
  }
  asAssociate() {
    return new ByProjectKeyAsAssociateRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  /**
   *	An Associate Role enables permissions over a Business Unit to an Associate.
   */
  associateRoles() {
    return new ByProjectKeyAssociateRolesRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  /**
   *	A Business Unit can represent a Company or a Division.
   */
  businessUnits() {
    return new ByProjectKeyBusinessUnitsRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  /**
   *	Categories are used to organize products in a hierarchical structure.
   */
  categories() {
    return new ByProjectKeyCategoriesRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  /**
   *	A shopping cart holds product variants and can be ordered.
   */
  carts() {
    return new ByProjectKeyCartsRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  /**
   *	Cart discounts are used to change the prices of different elements within a cart.
   */
  cartDiscounts() {
    return new ByProjectKeyCartDiscountsRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  /**
   *	Channels represent a source or destination of different entities. They can be used to model warehouses or stores.
   *
   */
  channels() {
    return new ByProjectKeyChannelsRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  /**
   *	A Customer is a person purchasing products. Carts, Orders, Quotes, Reviews and Payments can be associated to a Customer.
   *
   */
  customers() {
    return new ByProjectKeyCustomersRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  /**
   *	customer-groups are used to evaluate products and channels.
   */
  customerGroups() {
    return new ByProjectKeyCustomerGroupsRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  /**
   *	Store custom JSON values.
   */
  customObjects() {
    return new ByProjectKeyCustomObjectsRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  /**
   *	Discount Codes can be added to a discount-code to enable certain discount-code discounts.
   */
  discountCodes() {
    return new ByProjectKeyDiscountCodesRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  /**
   *	Discount groups are used to group the discounts that are applied to a cart or an order.
   */
  discountGroups() {
    return new ByProjectKeyDiscountGroupsRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  /**
   *	commercetools Composable Commerce provides a GraphQL API
   */
  graphql() {
    return new ByProjectKeyGraphqlRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  /**
   *	Inventory allows you to track stock quantities.
   */
  inventory() {
    return new ByProjectKeyInventoryRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  /**
   *	Retrieves the authenticated customer.
   */
  login() {
    return new ByProjectKeyLoginRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  /**
   *	A message represents a change or an action performed on a resource (like an Order or a Product).
   */
  messages() {
    return new ByProjectKeyMessagesRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  /**
   *	An order can be created from a order, usually after a checkout process has been completed.
   */
  orders() {
    return new ByProjectKeyOrdersRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  /**
   *	A PaymentMethod stores details about the method and the PSP
   */
  paymentMethods() {
    return new ByProjectKeyPaymentMethodsRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  /**
   *	Payments hold information about the current state of receiving and/or refunding money
   */
  payments() {
    return new ByProjectKeyPaymentsRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  /**
   *	Products themselves are not sellable. Instead, they act as a parent structure for sellable Product Variants.
   *
   */
  products() {
    return new ByProjectKeyProductsRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  /**
   *	Product discounts are used to change certain product prices.
   */
  productDiscounts() {
    return new ByProjectKeyProductDiscountsRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  /**
   *	A projected representation of a product shows the product with its current or staged data. The current or staged
   *	representation of a product in a catalog is called a product projection.
   *
   */
  productProjections() {
    return new ByProjectKeyProductProjectionsRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  /**
   *	Manage individual Store assortments through Product Selections.
   *
   *	After you have created Product Selections and populated them with Products,
   *	you can manage Store assortments by assigning Product Selections to Stores.
   *	Product Selections may be used by a single Store or shared across several Stores.
   *
   *	As a good practice, we recommend first creating Products in the project, and then creating Product Selection.
   *
   */
  productSelections() {
    return new ByProjectKeyProductSelectionsRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  /**
   *	Product tailoring are used to contextualize product data for specific stores.
   */
  productTailoring() {
    return new ByProjectKeyProductTailoringRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  /**
   *	Product Types are used to describe common characteristics, most importantly common custom attributes,
   *	of many concrete products.
   *
   */
  productTypes() {
    return new ByProjectKeyProductTypesRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  /**
   *	A quote holds the negotiated offer.
   */
  quotes() {
    return new ByProjectKeyQuotesRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  /**
   *	A request for a Quote holds product variants and can be ordered.
   */
  quoteRequests() {
    return new ByProjectKeyQuoteRequestsRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  /**
   *	A staged quote holds the negotiation between the [Buyer](/../api/quotes-overview#buyer) and the [Seller](/../api/quotes-overview#seller).
   */
  stagedQuotes() {
    return new ByProjectKeyStagedQuotesRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  /**
   *	A Recurring Order can be created from an Order, usually after a checkout process has been completed or directly via the Recurring Orders API.
   *
   */
  recurringOrders() {
    return new ByProjectKeyRecurringOrdersRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  /**
   *	A Recurrence Policy is a configuration of a schedule.
   */
  recurrencePolicies() {
    return new ByProjectKeyRecurrencePoliciesRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  /**
   *	Reviews are used to evaluate products and channels.
   */
  reviews() {
    return new ByProjectKeyReviewsRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  /**
   *	ShippingMethods define where orders can be shipped and what the costs are.
   */
  shippingMethods() {
    return new ByProjectKeyShippingMethodsRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  /**
   *	shopping-lists e.g. for wishlist support
   */
  shoppingLists() {
    return new ByProjectKeyShoppingListsRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  /**
   *	commercetools Composable Commerce allows you to model states of certain objects, such as orders, line items, products,
   *	reviews, and payments in order to define finite state machines reflecting the business logic you'd like to
   *	implement.
   *
   */
  states() {
    return new ByProjectKeyStatesRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  /**
   *	Subscriptions allow you to be notified of new messages or changes via a Message Queue of your choice
   */
  subscriptions() {
    return new ByProjectKeySubscriptionsRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  /**
   *	Tax Categories define how products are to be taxed in different countries.
   */
  taxCategories() {
    return new ByProjectKeyTaxCategoriesRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  /**
   *	Types define custom fields that are used to enhance resources as you need.
   */
  types() {
    return new ByProjectKeyTypesRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  /**
   *	Zones allow defining ShippingRates for specific Locations.
   */
  zones() {
    return new ByProjectKeyZonesRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  me() {
    return new ByProjectKeyMeRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  /**
   *	Extend the behavior of an API with your business logic
   */
  extensions() {
    return new ByProjectKeyExtensionsRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  /**
   *	Manage your API Clients via an API. Useful for Infrastructure-as-Code tooling, and regularly rotating API secrets.
   *
   */
  apiClients() {
    return new ByProjectKeyApiClientsRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  /**
   *	Stores let you model the context your customers shop in.
   */
  stores() {
    return new ByProjectKeyStoresRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  inStoreKeyWithStoreKeyValue(childPathArgs) {
    return new ByProjectKeyInStoreKeyByStoreKeyRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  /**
   *	A standalone price assigns a price to a product variant for a given scope. The API will use the standalone prices associated with a Product if its field [`priceMode`](/projects/products#pricemode) is set to `Standalone` [ProductPriceMode](ctp:api:type:ProductPriceModeEnum).
   */
  standalonePrices() {
    return new ByProjectKeyStandalonePricesRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  inBusinessUnitKeyWithBusinessUnitKeyValue(childPathArgs) {
    return new ByProjectKeyInBusinessUnitKeyByBusinessUnitKeyRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs,
        ...childPathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  /**
   *	Attribute groups ... TODO
   */
  attributeGroups() {
    return new ByProjectKeyAttributeGroupsRequestBuilder({
      pathArgs: {
        ...this.args.pathArgs
      },
      executeRequest: this.args.executeRequest,
      baseUri: this.args.baseUri
    });
  }
  get(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'GET',
      uriTemplate: '/{projectKey}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      }
    }, this.args.executeRequest);
  }
  /**
   *	Checks if a Project exists for a given `projectKey`. Returns a `200` status if the Project exists, or a `404` status otherwise.
   */
  head(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'HEAD',
      uriTemplate: '/{projectKey}',
      pathVariables: this.args.pathArgs,
      headers: {
        ...methodArgs?.headers
      }
    }, this.args.executeRequest);
  }
  post(methodArgs) {
    return new ApiRequest({
      baseUri: this.args.baseUri,
      method: 'POST',
      uriTemplate: '/{projectKey}',
      pathVariables: this.args.pathArgs,
      headers: {
        'Content-Type': 'application/json',
        ...methodArgs?.headers
      },
      body: methodArgs?.body
    }, this.args.executeRequest);
  }
}

class ApiRoot {
  constructor(args) {
    _defineProperty(this, "executeRequest", void 0);
    _defineProperty(this, "baseUri", void 0);
    this.executeRequest = args.executeRequest;
    this.baseUri = args.baseUri || 'https://api.europe-west1.gcp.commercetools.com';
  }

  /**
   *	The Project endpoint is used to retrieve certain information from a project.
   */
  withProjectKey(childPathArgs) {
    return new ByProjectKeyRequestBuilder({
      pathArgs: {
        ...childPathArgs
      },
      executeRequest: this.executeRequest,
      baseUri: this.baseUri
    });
  }
}

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 *	[PagedQueryResult](/../api/general-concepts#pagedqueryresult) with results containing an array of [ApprovalFlow](ctp:api:type:ApprovalFlow).
 *
 */

/**
 *	Indicates whether the [Approval Flow](ctp:api:type:ApprovalFlow) is under review, approved, or rejected.
 *
 */
let ApprovalFlowStatusValues = /*#__PURE__*/function (ApprovalFlowStatusValues) {
  ApprovalFlowStatusValues["Approved"] = "Approved";
  ApprovalFlowStatusValues["Pending"] = "Pending";
  ApprovalFlowStatusValues["Rejected"] = "Rejected";
  return ApprovalFlowStatusValues;
}({});

/**
 *	This update action allows an [Associate](ctp:api:type:Associate) to approve an Approval Flow. The process takes into account all [Associate Roles](ctp:api:type:AssociateRole) held by the Associate, aligning with the matched [Approval Rules](ctp:api:type:ApprovalRule) and their respective approver hierarchies.
 *
 *	When every required Associate has given their approval, the Approval Flow achieves a fully approved state, automatically updating its status to `Approved`. An Associate is eligible to approve only if their roles are within tiers of the Approval Rule hierarchy that are yet to be fully approved or rejected. As such, an Associate may be able to give their approval more than once.
 *
 */

/**
 *	This update action allows an [Associate](ctp:api:type:Associate) to reject an Approval Flow, setting its status to `Rejected`.
 *	The process takes into account all [Associate Roles](ctp:api:type:AssociateRole) held by the Associate, aligning with the matched [Approval Rules](ctp:api:type:ApprovalRule) and their respective approver hierarchies.
 *	Even a single rejection in the process will result in the rejection of the entire Approval Flow.
 *
 *	An Associate is eligible to reject only if their roles are within tiers of the Approval Rule hierarchy that are yet to be rejected. An Associate may alter a prior approval into a rejection.
 *
 */

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 *	[PagedQueryResult](/../api/general-concepts#pagedqueryresult) with results containing an array of [ApprovalRule](ctp:api:type:ApprovalRule).
 *
 */

/**
 *	Indicates whether the Approval Rule should be matched against [Orders](ctp:api:type:Order) or not.
 *
 */
let ApprovalRuleStatusValues = /*#__PURE__*/function (ApprovalRuleStatusValues) {
  ApprovalRuleStatusValues["Active"] = "Active";
  ApprovalRuleStatusValues["Inactive"] = "Inactive";
  return ApprovalRuleStatusValues;
}({});

/**
 *	Setting the approvers for an [Approval Rule](ctp:api:type:ApprovalRule) generates an [ApprovalRuleApproversSet](ctp:api:type:ApprovalRuleApproversSetMessage) Message.
 *
 */

/**
 *	Setting the description for an [Approval Rule](ctp:api:type:ApprovalRule) generates an [ApprovalRuleDescriptionSet](ctp:api:type:ApprovalRuleDescriptionSetMessage) Message.
 *
 */

/**
 *	Setting the key for an [Approval Rule](ctp:api:type:ApprovalRule) generates an [ApprovalRuleKeySet](ctp:api:type:ApprovalRuleKeySetMessage) Message.
 *
 */

/**
 *	Setting the name for an [Approval Rule](ctp:api:type:ApprovalRule) generates an [ApprovalRuleNameSet](ctp:api:type:ApprovalRuleNameSetMessage) Message.
 *
 */

/**
 *	Setting the [Order Predicate](/../api/projects/predicates#order-predicates) for an [Approval Rule](ctp:api:type:ApprovalRule) generates an [ApprovalRulePredicateSet](ctp:api:type:ApprovalRulePredicateSetMessage) Message.
 *
 */

/**
 *	Sets the requesters for an [Approval Rule](ctp:api:type:ApprovalRule) generates an [ApprovalRuleRequestersSet](ctp:api:type:ApprovalRuleRequestersSetMessage) Message.
 *
 */

/**
 *	Setting the status for an [Approval Rule](ctp:api:type:ApprovalRule) generates an [ApprovalRuleStatusSet](ctp:api:type:ApprovalRuleStatusSetMessage) Message.
 *
 */

/**
 *	Describes the order in which [Associates](ctp:api:type:Associate) can approve the matched [Order](ctp:api:type:Order).
 *
 */

/**
 *	Describes the sequence in which [Associates](ctp:api:type:Associate) can approve an [Order](ctp:api:type:Order).
 *
 */

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 *	[KeyReference](ctp:api:type:KeyReference) to an [AssociateRole](ctp:api:type:AssociateRole).
 *
 */

/**
 *	[PagedQueryResult](/../api/general-concepts#pagedqueryresult) with results containing an array of [AssociateRole](ctp:api:type:AssociateRole).
 *
 */

/**
 *	[Reference](ctp:api:type:Reference) to an [AssociateRole](ctp:api:type:AssociateRole).
 *
 */

/**
 *	[ResourceIdentifier](ctp:api:type:TypeResourceIdentifier) of an [AssociateRole](ctp:api:type:AssociateRole). Either `id` or `key` is required. If both are set, an [InvalidJsonInput](/../api/errors#invalidjsoninput) error is returned.
 *
 */

/**
 *	Permissions grant granular access to [Approval Rules](ctp:api:type:ApprovalRule), [Approval Flows](ctp:api:type:ApprovalFlow), [Business Units](ctp:api:type:BusinessUnit), [Carts](ctp:api:type:Cart), [Orders](ctp:api:type:Order), [Quotes](ctp:api:type:Quote), [Quote Requests](ctp:api:type:QuoteRequest), and [Shopping Lists](ctp:api:type:ShoppingList).
 *
 */
let PermissionValues = /*#__PURE__*/function (PermissionValues) {
  PermissionValues["AcceptMyQuotes"] = "AcceptMyQuotes";
  PermissionValues["AcceptOthersQuotes"] = "AcceptOthersQuotes";
  PermissionValues["AddChildUnits"] = "AddChildUnits";
  PermissionValues["CreateApprovalRules"] = "CreateApprovalRules";
  PermissionValues["CreateMyCarts"] = "CreateMyCarts";
  PermissionValues["CreateMyOrdersFromMyCarts"] = "CreateMyOrdersFromMyCarts";
  PermissionValues["CreateMyOrdersFromMyQuotes"] = "CreateMyOrdersFromMyQuotes";
  PermissionValues["CreateMyQuoteRequestsFromMyCarts"] = "CreateMyQuoteRequestsFromMyCarts";
  PermissionValues["CreateMyShoppingLists"] = "CreateMyShoppingLists";
  PermissionValues["CreateOrdersFromOthersCarts"] = "CreateOrdersFromOthersCarts";
  PermissionValues["CreateOrdersFromOthersQuotes"] = "CreateOrdersFromOthersQuotes";
  PermissionValues["CreateOthersCarts"] = "CreateOthersCarts";
  PermissionValues["CreateOthersShoppingLists"] = "CreateOthersShoppingLists";
  PermissionValues["CreateQuoteRequestsFromOthersCarts"] = "CreateQuoteRequestsFromOthersCarts";
  PermissionValues["DeclineMyQuotes"] = "DeclineMyQuotes";
  PermissionValues["DeclineOthersQuotes"] = "DeclineOthersQuotes";
  PermissionValues["DeleteMyCarts"] = "DeleteMyCarts";
  PermissionValues["DeleteMyShoppingLists"] = "DeleteMyShoppingLists";
  PermissionValues["DeleteOthersCarts"] = "DeleteOthersCarts";
  PermissionValues["DeleteOthersShoppingLists"] = "DeleteOthersShoppingLists";
  PermissionValues["ReassignMyQuotes"] = "ReassignMyQuotes";
  PermissionValues["ReassignOthersQuotes"] = "ReassignOthersQuotes";
  PermissionValues["RenegotiateMyQuotes"] = "RenegotiateMyQuotes";
  PermissionValues["RenegotiateOthersQuotes"] = "RenegotiateOthersQuotes";
  PermissionValues["UpdateApprovalFlows"] = "UpdateApprovalFlows";
  PermissionValues["UpdateApprovalRules"] = "UpdateApprovalRules";
  PermissionValues["UpdateAssociates"] = "UpdateAssociates";
  PermissionValues["UpdateBusinessUnitDetails"] = "UpdateBusinessUnitDetails";
  PermissionValues["UpdateMyCarts"] = "UpdateMyCarts";
  PermissionValues["UpdateMyOrders"] = "UpdateMyOrders";
  PermissionValues["UpdateMyQuoteRequests"] = "UpdateMyQuoteRequests";
  PermissionValues["UpdateMyShoppingLists"] = "UpdateMyShoppingLists";
  PermissionValues["UpdateOthersCarts"] = "UpdateOthersCarts";
  PermissionValues["UpdateOthersOrders"] = "UpdateOthersOrders";
  PermissionValues["UpdateOthersQuoteRequests"] = "UpdateOthersQuoteRequests";
  PermissionValues["UpdateOthersShoppingLists"] = "UpdateOthersShoppingLists";
  PermissionValues["UpdateParentUnit"] = "UpdateParentUnit";
  PermissionValues["ViewMyCarts"] = "ViewMyCarts";
  PermissionValues["ViewMyOrders"] = "ViewMyOrders";
  PermissionValues["ViewMyQuoteRequests"] = "ViewMyQuoteRequests";
  PermissionValues["ViewMyQuotes"] = "ViewMyQuotes";
  PermissionValues["ViewMyShoppingLists"] = "ViewMyShoppingLists";
  PermissionValues["ViewOthersCarts"] = "ViewOthersCarts";
  PermissionValues["ViewOthersOrders"] = "ViewOthersOrders";
  PermissionValues["ViewOthersQuoteRequests"] = "ViewOthersQuoteRequests";
  PermissionValues["ViewOthersQuotes"] = "ViewOthersQuotes";
  PermissionValues["ViewOthersShoppingLists"] = "ViewOthersShoppingLists";
  return PermissionValues;
}({});

/**
 *	Adding a Permission to an [AssociateRole](ctp:api:type:AssociateRole) generates an [AssociateRolePermissionAdded](ctp:api:type:AssociateRolePermissionAddedMessage) Message.
 *
 */

/**
 *	Changing the `buyerAssignable` value of an AssociateRole generates an [AssociateRoleBuyerAssignableChanged](ctp:api:type:AssociateRoleBuyerAssignableChangedMessage) Message.
 *
 */

/**
 *	Removing a Permission from an [AssociateRole](ctp:api:type:AssociateRole) generates an [AssociateRolePermissionRemoved](ctp:api:type:AssociateRolePermissionRemovedMessage) Message.
 *
 */

/**
 *	Updating the name of an [AssociateRole](ctp:api:type:AssociateRole) generates an [AssociateRoleNameSet](ctp:api:type:AssociateRoleNameSetMessage) Message.
 *
 */

/**
 *	Updating the Permissions on an [AssociateRole](ctp:api:type:AssociateRole) generates an [AssociateRolePermissionsSet](ctp:api:type:AssociateRolePermissionsSetMessage) Message.
 *
 */

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 *	Determines whether an [AssociateRoleAssignment](ctp:api:type:AssociateRoleAssignment) can be inherited by child Business Units.
 *
 */
let AssociateRoleInheritanceModeValues = /*#__PURE__*/function (AssociateRoleInheritanceModeValues) {
  AssociateRoleInheritanceModeValues["Disabled"] = "Disabled";
  AssociateRoleInheritanceModeValues["Enabled"] = "Enabled";
  return AssociateRoleInheritanceModeValues;
}({});

/**
 *	Generic type to model the fields that all types of Business Units have in common.
 *
 */

/**
 *	Determines whether a Business Unit can inherit [Approval Rules](/projects/approval-rules) from a parent. Only Business Units of type `Division` can use `ExplicitAndFromParent`.
 *
 */
let BusinessUnitApprovalRuleModeValues = /*#__PURE__*/function (BusinessUnitApprovalRuleModeValues) {
  BusinessUnitApprovalRuleModeValues["Explicit"] = "Explicit";
  BusinessUnitApprovalRuleModeValues["ExplicitAndFromParent"] = "ExplicitAndFromParent";
  return BusinessUnitApprovalRuleModeValues;
}({});
/**
 *	Determines whether a Business Unit can inherit Associates from a parent.
 *
 */
let BusinessUnitAssociateModeValues = /*#__PURE__*/function (BusinessUnitAssociateModeValues) {
  BusinessUnitAssociateModeValues["Explicit"] = "Explicit";
  BusinessUnitAssociateModeValues["ExplicitAndFromParent"] = "ExplicitAndFromParent";
  return BusinessUnitAssociateModeValues;
}({});

/**
 *	Information about all roles and permissions of an Associate in a [BusinessUnit](ctp:api:type:BusinessUnit).
 *
 */

/**
 *	Generic draft type to model those fields all Business Units have in common. The additional fields required for creating a [Company](ctp:api:type:Company) or [Division](ctp:api:type:Division) are represented on [CompanyDraft](ctp:api:type:CompanyDraft) and [DivisionDraft](ctp:api:type:DivisionDraft).
 *
 */

/**
 *	[KeyReference](ctp:api:type:KeyReference) to a [BusinessUnit](ctp:api:type:BusinessUnit).
 *
 */

/**
 *	[PagedQueryResult](/../api/general-concepts#pagedqueryresult) with results containing an array of [BusinessUnit](ctp:api:type:BusinessUnit).
 *
 */

/**
 *	[Reference](ctp:api:type:Reference) to a [BusinessUnit](ctp:api:type:BusinessUnit).
 *
 */

/**
 *	[ResourceIdentifier](ctp:api:type:ResourceIdentifier) to a [BusinessUnit](ctp:api:type:BusinessUnit). Either `id` or `key` is required. If both are set, an [InvalidJsonInput](/../api/errors#invalidjsoninput) error is returned.
 *
 */

/**
 *	Indicates whether the Business Unit can be edited and used in [Carts](ctp:api:type:Cart), [Orders](ctp:api:type:Order), [Quote Requests](ctp:api:type:QuoteRequest), or [Quotes](ctp:api:type:Quote).
 *
 */
let BusinessUnitStatusValues = /*#__PURE__*/function (BusinessUnitStatusValues) {
  BusinessUnitStatusValues["Active"] = "Active";
  BusinessUnitStatusValues["Inactive"] = "Inactive";
  return BusinessUnitStatusValues;
}({});
/**
 *	Defines whether the Stores of the Business Unit are set directly on the Business Unit or are inherited from its parent unit.
 *
 */
let BusinessUnitStoreModeValues = /*#__PURE__*/function (BusinessUnitStoreModeValues) {
  BusinessUnitStoreModeValues["Explicit"] = "Explicit";
  BusinessUnitStoreModeValues["FromParent"] = "FromParent";
  return BusinessUnitStoreModeValues;
}({});
/**
 *	The type of the Business Unit indicating its position in a hierarchy.
 *
 */
let BusinessUnitTypeValues = /*#__PURE__*/function (BusinessUnitTypeValues) {
  BusinessUnitTypeValues["Company"] = "Company";
  BusinessUnitTypeValues["Division"] = "Division";
  return BusinessUnitTypeValues;
}({});

/**
 *	Business Unit type to represent the top level of a business.
 *	Contains specific fields and values that differentiate a Company from the generic [BusinessUnit](ctp:api:type:BusinessUnit).
 *
 */

/**
 *	Draft type to represent the top level of a business. Contains the fields and values of the generic [BusinessUnitDraft](ctp:api:type:BusinessUnitDraft) that are used specifically for creating a [Company](ctp:api:type:Company).
 *
 */

/**
 *	Business Unit type to model divisions that are part of the [Company](ctp:api:type:Company) or a higher-order Division.
 *	Contains specific fields and values that differentiate a Division from the generic [BusinessUnit](ctp:api:type:BusinessUnit).
 *
 */

/**
 *	Draft type to model divisions that are part of a [Company](ctp:api:type:Company) or a higher-order [Division](ctp:api:type:Division).
 *	Contains the fields and values of the generic [BusinessUnitDraft](ctp:api:type:BusinessUnitDraft) that are used specifically for creating a Division.
 *
 */

/**
 *	Adding an address to a [Business Unit](ctp:api:type:BusinessUnit) generates a [BusinessUnitAddressAdded](ctp:api:type:BusinessUnitAddressAddedMessage) Message.
 *
 */

/**
 *	Adding an Associate to a [Business Unit](ctp:api:type:BusinessUnit) generates a [BusinessUnitAssociateAdded](ctp:api:type:BusinessUnitAssociateAddedMessage) Message.
 *
 */

/**
 *	Adding a billing address to a [Business Unit](ctp:api:type:BusinessUnit) generates a [BusinessUnitBillingAddressAdded](ctp:api:type:BusinessUnitBillingAddressAddedMessage) Message.
 *
 */

/**
 *	Adding a shipping address to a [Business Unit](ctp:api:type:BusinessUnit) generates a [BusinessUnitShippingAddressAdded](ctp:api:type:BusinessUnitShippingAddressAddedMessage) Message.
 *
 */

/**
 *	Adding a [Store](ctp:api:type:Store) to a [Business Unit](ctp:api:type:BusinessUnit) generates a [BusinessUnitStoreAdded](ctp:api:type:BusinessUnitStoreAddedMessage) Message.
 *	Only applicable when `storeMode` is `Explicit`.
 *
 */

/**
 *	Changing the address on a Business Unit generates the [BusinessUnitAddressChanged](ctp:api:type:BusinessUnitAddressChangedMessage) Message.
 *
 */

/**
 *	Updates [Approval Rules](/projects/approval-rules) inheritance behavior between Business Units.
 *
 *	Only Business Units of type `Division` can be changed to `ExplicitAndFromParent`.
 *
 *	This update action generates a [BusinessUnitApprovalRuleModeChanged](ctp:api:type:BusinessUnitApprovalRuleModeChangedMessage) Message.
 *
 */

/**
 *	Updating the [Associate](ctp:api:type:Associate) on a [Business Unit](ctp:api:type:BusinessUnit) generates the [BusinessUnitAssociateChanged](ctp:api:type:BusinessUnitAssociateChangedMessage) Message.
 *
 */

/**
 *	Only Business Units of type `Division` can be changed to `ExplicitAndFromParent`.
 *	This update action generates a [BusinessUnitAssociateModeChanged](ctp:api:type:BusinessUnitAssociateModeChangedMessage) Message.
 *
 */

/**
 *	Updating the name on a [Business Unit](ctp:api:type:BusinessUnit) generates a [BusinessUnitNameChanged](ctp:api:type:BusinessUnitNameChangedMessage) Message.
 *
 */

/**
 *	This action generates a [BusinessUnitParentChanged](ctp:api:type:BusinessUnitParentChangedMessage) Message.
 *
 */

/**
 *	Changing the status of a [Business Unit](ctp:api:type:BusinessUnit) generates a [BusinessUnitStatusChanged](ctp:api:type:BusinessUnitStatusChangedMessage) Message.
 *
 */

/**
 *	Removing the address from a [Business Unit](ctp:api:type:BusinessUnit) generates the [BusinessUnitAddressRemoved](ctp:api:type:BusinessUnitAddressRemovedMessage) Message.
 *
 */

/**
 *	Removing an [Associate](ctp:api:type:Associate) from a [Business Unit](ctp:api:type:BusinessUnit) generates a [BusinessUnitAssociateRemoved](ctp:api:type:BusinessUnitAssociateRemovedMessage) Message.
 *
 */

/**
 *	Removing a billing address from a [Business Unit](ctp:api:type:BusinessUnit) generates a [BusinessUnitBillingAddressRemoved](ctp:api:type:BusinessUnitBillingAddressRemovedMessage) Message.
 *
 */

/**
 *	Removing a shipping address from a [Business Unit](ctp:api:type:BusinessUnit) generates a [BusinessUnitShippingAddressRemoved](ctp:api:type:BusinessUnitShippingAddressRemovedMessage) Message.
 *
 */

/**
 *	Removes a Store from the Business Unit.
 *	Newly created [Carts](ctp:api:type:Cart) and [Orders](ctp:api:type:Order) can no longer reference the removed Store for the Business Unit.
 *	We recommend cleaning up unordered Carts that still have the Store assigned after calling this update action since those cannot be converted to Orders.
 *	Orders created before the Store was removed remain unchanged.
 *	Generates a [BusinessUnitStoreRemoved](ctp:api:type:BusinessUnitStoreRemovedMessage) Message.
 *	Only applicable when `storeMode` is `Explicit`.
 *
 */

/**
 *	Adding a Custom Field to an Address of a Business Unit generates the [BusinessUnitAddressCustomFieldAdded](ctp:api:type:BusinessUnitAddressCustomFieldAddedMessage) Message, removing one generates the [BusinessUnitAddressCustomFieldRemoved](ctp:api:type:BusinessUnitAddressCustomFieldRemovedMessage) Message, and updating an existing one generates the [BusinessUnitAddressCustomFieldChanged](ctp:api:type:BusinessUnitAddressCustomFieldChangedMessage) Message.
 *
 */

/**
 *	Adding or updating a Custom Type on an Address of a Business Unit generates the [BusinessUnitAddressCustomTypeSet](ctp:api:type:BusinessUnitAddressCustomTypeSetMessage) Message, and removing one generates the [BusinessUnitAddressCustomTypeRemoved](ctp:api:type:BusinessUnitAddressCustomTypeRemovedMessage) Message.
 *
 */

/**
 *	Changes the Associates of a [Business Unit](ctp:api:type:BusinessUnit), generates a [BusinessUnitAssociatesSet](ctp:api:type:BusinessUnitAssociatesSetMessage) Message.
 *
 */

/**
 *	Setting the contact email on a [Business Unit](ctp:api:type:BusinessUnit) generates a [BusinessUnitContactEmailSet](ctp:api:type:BusinessUnitContactEmailSetMessage) Message.
 *
 */

/**
 *	Adding a Custom Field to a Business Unit generates the [BusinessUnitCustomFieldAdded](ctp:api:type:BusinessUnitCustomFieldAddedMessage) Message, removing one generates the [BusinessUnitCustomFieldRemoved](ctp:api:type:BusinessUnitCustomFieldRemovedMessage) Message, and updating an existing one generates the [BusinessUnitCustomFieldChanged](ctp:api:type:BusinessUnitCustomFieldChangedMessage) Message.
 *
 */

/**
 *	Adding or updating a Custom Type on a Business Unit generates the [BusinessUnitCustomTypeSet](ctp:api:type:BusinessUnitCustomTypeSetMessage) Message, removing one generates the [BusinessUnitCustomTypeRemoved](ctp:api:type:BusinessUnitCustomTypeRemovedMessage) Message.
 *
 */

/**
 *	Setting the default billing address on a [Business Unit](ctp:api:type:BusinessUnit) generates the [BusinessUnitDefaultBillingAddressSet](ctp:api:type:BusinessUnitDefaultBillingAddressSetMessage) Message.
 *
 */

/**
 *	Setting the default shipping address on a [Business Unit](ctp:api:type:BusinessUnit) generates a [BusinessUnitDefaultShippingAddressSet](ctp:api:type:BusinessUnitDefaultShippingAddressSetMessage) Message.
 *
 */

/**
 *	Only Business Units of type `Division` can be have a store mode of `FromParent`. Changing the `storeMode` to `FromParent` empties the `stores` array on the BusinessUnit.
 *	This update action generates a [BusinessUnitStoreModeChanged](ctp:api:type:BusinessUnitStoreModeChangedMessage) Message.
 *
 */

/**
 *	Sets the Stores of the Business Unit. Can only be set if the Business Unit `storeMode` is `Explicit`.
 *	[Carts](ctp:api:type:Cart) and [Orders](ctp:api:type:Order) created after the Set Stores update must use the new Stores of
 *	the Business Unit and, if set, their [Product Selections](ctp:api:type:ProductSelection), and [Channels](ctp:api:type:Channel).
 *	Orders created before the Set Stores update action remain unchanged.
 *	Setting the Stores on a Business Unit generates a [BusinessUnitStoresSet](ctp:api:type:BusinessUnitStoresSetMessage) Message.
 *
 */

/**
 *	This action generates a [BusinessUnitTypeSet](ctp:api:type:BusinessUnitTypeSetMessage) Message.
 *
 */

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 *	Indicates who created the Cart.
 *
 */
let CartOriginValues = /*#__PURE__*/function (CartOriginValues) {
  CartOriginValues["Customer"] = "Customer";
  CartOriginValues["Merchant"] = "Merchant";
  CartOriginValues["Quote"] = "Quote";
  CartOriginValues["RecurringOrder"] = "RecurringOrder";
  return CartOriginValues;
}({});

/**
 *	[PagedQueryResult](/../api/general-concepts#pagedqueryresult) with results containing an array of [Cart](ctp:api:type:Cart).
 *
 */

/**
 *	[Reference](ctp:api:type:Reference) to a [Cart](ctp:api:type:Cart).
 *
 */

/**
 *	[ResourceIdentifier](ctp:api:type:ResourceIdentifier) to a [Cart](ctp:api:type:Cart). Either `id` or `key` is required. If both are set, an [InvalidJsonInput](/../api/errors#invalidjsoninput) error is returned.
 *
 */

/**
 *	Indicates the current status of a Cart.
 *
 */
let CartStateValues = /*#__PURE__*/function (CartStateValues) {
  CartStateValues["Active"] = "Active";
  CartStateValues["Frozen"] = "Frozen";
  CartStateValues["Merged"] = "Merged";
  CartStateValues["Ordered"] = "Ordered";
  return CartStateValues;
}({});

/**
 *	A generic item that can be added to the Cart but is not bound to a Product that can be used for discounts (negative money), vouchers, complex cart rules, additional services, or fees.
 *	You control the lifecycle of this item.
 *
 */

/**
 *	Determines if Cart Discounts can be applied to a Custom Line Item in the Cart.
 *
 */
let CustomLineItemPriceModeValues = /*#__PURE__*/function (CustomLineItemPriceModeValues) {
  CustomLineItemPriceModeValues["External"] = "External";
  CustomLineItemPriceModeValues["Standard"] = "Standard";
  return CustomLineItemPriceModeValues;
}({});

/**
 *	Represents a [CartDiscount](ctp:api:type:CartDiscount) that is only associated with a single Cart or Order.
 *
 */

/**
 *	Represents a [CartDiscount](ctp:api:type:CartDiscount) that can only be associated with a single Cart or Order.
 *
 *	For an introduction to Direct Discounts and to understand how they work in Composable Commerce, see the [Direct Discounts overview](/pricing-and-discounts-overview#direct-discounts).
 *
 */

/**
 *	[Reference](ctp:api:type:Reference) to a [DirectDiscount](ctp:api:type:DirectDiscount).
 *
 */

/**
 *	Indicates the state of a Discount Code in a Cart.
 *
 *	If an Order is created from a Cart with a state other than `MatchesCart` or `ApplicationStoppedByGroupBestDeal`, a [DiscountCodeNonApplicable](ctp:api:type:DiscountCodeNonApplicableError) error is returned.
 *
 *	For Orders created from a Cart with a `ApplicationStoppedByGroupBestDeal` state, the discount code is not applied.
 *
 */
let DiscountCodeStateValues = /*#__PURE__*/function (DiscountCodeStateValues) {
  DiscountCodeStateValues["ApplicationStoppedByGroupBestDeal"] = "ApplicationStoppedByGroupBestDeal";
  DiscountCodeStateValues["ApplicationStoppedByPreviousDiscount"] = "ApplicationStoppedByPreviousDiscount";
  DiscountCodeStateValues["DoesNotMatchCart"] = "DoesNotMatchCart";
  DiscountCodeStateValues["MatchesCart"] = "MatchesCart";
  DiscountCodeStateValues["MaxApplicationReached"] = "MaxApplicationReached";
  DiscountCodeStateValues["NotActive"] = "NotActive";
  DiscountCodeStateValues["NotValid"] = "NotValid";
  return DiscountCodeStateValues;
}({});

/**
 *	Indicates the best deal logic applies to a Cart or Order and indicates the discount type that offers the best deal.
 *
 */

/**
 *	Cannot be used in [LineItemDraft](ctp:api:type:LineItemDraft) or [CustomLineItemDraft](ctp:api:type:CustomLineItemDraft).
 *
 *	Can only be set by these update actions:
 *
 *	- [Set LineItem TaxAmount](ctp:api:type:CartSetLineItemTaxAmountAction), [Set CustomLineItem TaxAmount](ctp:api:type:CartSetCustomLineItemTaxAmountAction), or [Set ShippingMethod TaxAmount](ctp:api:type:CartSetShippingMethodTaxAmountAction) on Carts
 *	- [Set LineItem TaxAmount](ctp:api:type:StagedOrderSetLineItemTaxAmountAction), [Set CustomLineItem TaxAmount](ctp:api:type:StagedOrderSetCustomLineItemTaxAmountAction), or [Set ShippingMethod TaxAmount](ctp:api:type:StagedOrderSetShippingMethodTaxAmountAction) on Order Edits
 *
 */

/**
 *	Controls calculation of taxed prices for Line Items, Custom Line Items, and Shipping Methods as explained in [Cart tax calculation](ctp:api:type:CartTaxCalculation).
 *
 */

/**
 *	Indicates how Line Items in a Cart are tracked.
 *
 */
let InventoryModeValues = /*#__PURE__*/function (InventoryModeValues) {
  InventoryModeValues["None"] = "None";
  InventoryModeValues["ReserveOnOrder"] = "ReserveOnOrder";
  InventoryModeValues["TrackOnly"] = "TrackOnly";
  return InventoryModeValues;
}({});

/**
 *	For order creation and updates, the sum of the `targets` must match the quantity of the Line Items or Custom Line Items.
 *
 */

/**
 *	Determines the address (as a reference to an address in `itemShippingAddresses`) and the quantity shipped to the address.
 *
 *	If multiple shipping addresses are present for a Line Item or Custom Line Item, sub-quantities must be specified.
 *	An array of addresses and sub-quantities is stored per Line Item or Custom Line Item.
 *
 */

/**
 *	The representation of a [Line Item](/../api/carts-orders-overview#line-items) in a [Cart](ctp:api:type:Cart) or in an [Order](ctp:api:type:Order).
 *
 */

/**
 *	For Product Variant identification, either the `productId` and `variantId`, or `sku` must be provided.
 *	Product Attributes are merged with Variant Attributes to ensure the full Attribute context of the Product Variant.
 *
 */

/**
 *	Indicates how a Line Item was added to a Cart.
 *
 */
let LineItemModeValues = /*#__PURE__*/function (LineItemModeValues) {
  LineItemModeValues["GiftLineItem"] = "GiftLineItem";
  LineItemModeValues["Standard"] = "Standard";
  return LineItemModeValues;
}({});
/**
 *	This mode indicates how the price is set for the Line Item.
 *
 */
let LineItemPriceModeValues = /*#__PURE__*/function (LineItemPriceModeValues) {
  LineItemPriceModeValues["ExternalPrice"] = "ExternalPrice";
  LineItemPriceModeValues["ExternalTotal"] = "ExternalTotal";
  LineItemPriceModeValues["Platform"] = "Platform";
  return LineItemPriceModeValues;
}({});

/**
 *	Used for [replicating an existing Cart](ctp:api:endpoint:/{projectKey}/carts/replicate:POST) or Order.
 *
 */

/**
 *	Determines how monetary values are rounded.
 *
 */
let RoundingModeValues = /*#__PURE__*/function (RoundingModeValues) {
  RoundingModeValues["HalfDown"] = "HalfDown";
  RoundingModeValues["HalfEven"] = "HalfEven";
  RoundingModeValues["HalfUp"] = "HalfUp";
  return RoundingModeValues;
}({});

/**
 *	Wraps all shipping-related information (such as address, rate, deliveries) per Shipping Method for Carts with multiple Shipping Methods.
 *
 */

/**
 *	Determines whether the selected [ShippingMethod](ctp:api:type:ShippingMethod) is allowed for the Cart. For more information, see [Predicates](/shipping-delivery-overview#predicates).
 *
 */
let ShippingMethodStateValues = /*#__PURE__*/function (ShippingMethodStateValues) {
  ShippingMethodStateValues["DoesNotMatchCart"] = "DoesNotMatchCart";
  ShippingMethodStateValues["MatchesCart"] = "MatchesCart";
  return ShippingMethodStateValues;
}({});
let ShippingModeValues = /*#__PURE__*/function (ShippingModeValues) {
  ShippingModeValues["Multiple"] = "Multiple";
  ShippingModeValues["Single"] = "Single";
  return ShippingModeValues;
}({});

/**
 *	Generic type holding specific ShippingRateInputDraft types.
 */

/**
 *	Indicates both Product Discounts and Cart Discounts apply to a Cart and Order.
 *
 */

/**
 *	Determines in which [Tax calculation mode](/carts-orders-overview#tax-calculation-mode) taxed prices are calculated.
 *
 */
let TaxCalculationModeValues = /*#__PURE__*/function (TaxCalculationModeValues) {
  TaxCalculationModeValues["LineItemLevel"] = "LineItemLevel";
  TaxCalculationModeValues["UnitPriceLevel"] = "UnitPriceLevel";
  return TaxCalculationModeValues;
}({});
/**
 *	Indicates how taxes are set on the Cart.
 *
 */
let TaxModeValues = /*#__PURE__*/function (TaxModeValues) {
  TaxModeValues["Disabled"] = "Disabled";
  TaxModeValues["External"] = "External";
  TaxModeValues["ExternalAmount"] = "ExternalAmount";
  TaxModeValues["Platform"] = "Platform";
  return TaxModeValues;
}({});

/**
 *	The tax portions are calculated from the [TaxRates](ctp:api:type:TaxRate).
 *	If a Tax Rate has [SubRates](ctp:api:type:SubRate), they are used and can be identified by name.
 *	Tax portions from Line Items with the same `rate` and `name` are accumulated to the same tax portion.
 *
 */

/**
 *	Represents the portions that sum up to the `totalGross` field of a [TaxedPrice](ctp:api:type:TaxedPrice).
 *
 *	The portions are calculated from the [TaxRates](ctp:api:type:TaxRate).
 *	If a Tax Rate has [SubRates](ctp:api:type:SubRate), they are used and can be identified by name.
 *	Tax portions from Line Items with the same `rate` and `name` will be accumulated to the same tax portion.
 *
 */

/**
 *	If the Cart already contains a [CustomLineItem](ctp:api:type:CustomLineItem) with the same `slug`, `name`, `money`, `taxCategory`, `state`,
 *	and Custom Fields, then only the quantity of the existing Custom Line Item is increased.
 *	If [CustomLineItem](ctp:api:type:CustomLineItem) `shippingDetails` are set, they are merged with the `targets` that already exist on the
 *	[ItemShippingDetails](ctp:api:type:ItemShippingDetails) of the Custom Line Item.
 *	In case of overlapping address keys the [ItemShippingTarget](ctp:api:type:ItemShippingTarget) `quantity` is summed up.
 *
 *	If the Cart already contains a Custom Line Item with the same slug that is otherwise not identical, an [InvalidOperation](ctp:api:type:InvalidOperationError) error is returned.
 *
 *	If the Tax Rate is not set, a [MissingTaxRateForCountry](ctp:api:type:MissingTaxRateForCountryError) error is returned.
 *
 */

/**
 *	To add a custom Shipping Method (independent of the [ShippingMethods](ctp:api:type:ShippingMethod) managed through
 *	the [Shipping Methods API](/projects/shippingMethods)) to the Cart, it **must have** the `Multiple` [ShippingMode](ctp:api:type:ShippingMode).
 *
 */

/**
 *	Adds a [DiscountCode](ctp:api:type:DiscountCode) to the Cart to activate the related [Cart Discounts](/../api/projects/cartDiscounts).
 *	Adding a Discount Code is only possible if no [DirectDiscount](ctp:api:type:DirectDiscount) has been applied to the Cart.
 *	Discount Codes can be added to [frozen Carts](ctp:api:type:FrozenCarts), but their [DiscountCodeState](ctp:api:type:DiscountCodeState) is then `DoesNotMatchCart`.
 *
 *	The maximum number of Discount Codes in a Cart is restricted by a [limit](/../api/limits#carts).
 *
 *	Specific Error Code: [MatchingPriceNotFound](ctp:api:type:MatchingPriceNotFoundError)
 *
 */

/**
 *	Adds an address to a Cart when shipping to multiple addresses is desired.
 *
 */

/**
 *	If the Cart contains a [LineItem](ctp:api:type:LineItem) for a Product Variant with the same [LineItemMode](ctp:api:type:LineItemMode), [Custom Fields](/../api/projects/custom-fields), supply and distribution channel, then only the quantity of the existing Line Item is increased.
 *	If [LineItem](ctp:api:type:LineItem) `shippingDetails` is set, it is merged. All addresses will be present afterwards and, for address keys present in both shipping details, the quantity will be summed up.
 *	A new Line Item is added when the `externalPrice` or `externalTotalPrice` is set in this update action.
 *	The [LineItem](ctp:api:type:LineItem) price is set as described in [Line Item price selection](/../api/pricing-and-discounts-overview#line-item-price-selection).
 *
 *	If the Tax Rate is not set, a [MissingTaxRateForCountry](ctp:api:type:MissingTaxRateForCountryError) error is returned.
 *
 *	If the Line Items do not have a Price according to the [Product](ctp:api:type:Product) `priceMode` value for a selected currency and/or country, Customer Group, or Channel, a [MatchingPriceNotFound](ctp:api:type:MatchingPriceNotFoundError) error is returned.
 *
 *	If the Line Items are added to a Cart bound to a Store with active Product Selections, the selected Product Variant must be [available in that Store](/../api/projects/stores#products-available-in-store), otherwise an [InvalidInput](ctp:api:type:InvalidInputError) error is returned.
 *
 */

/**
 *	Adds a Shipping Method for a specified shipping address to a Cart with `Multiple` [ShippingMode](ctp:api:type:ShippingMode).
 *
 */

/**
 *	Adds all [LineItems](ctp:api:type:LineItem) of a [ShoppingList](ctp:api:type:ShoppingList) to the Cart.
 *
 */

/**
 *	To override the shipping details, see [Set LineItem ShippingDetails](ctp:api:type:CartSetLineItemShippingDetailsAction).
 *
 */

/**
 *	When multiple shipping addresses are set for a Custom Line Item,
 *	use the [Add CustomLineItem](ctp:api:type:CartAddCustomLineItemAction) update action to change the shipping details.
 *	Since it is not possible for the API to infer how the overall change in the Custom Line Item quantity should be distributed over the sub-quantities,
 *	the `shippingDetails` field is kept in its current state to avoid data loss.
 *
 *	To change the Custom Line Item quantity and shipping details together,
 *	use this update action in combination with the [Set CustomLineItem ShippingDetails](ctp:api:type:CartSetCustomLineItemShippingDetailsAction) update action
 *	in a single Cart update command.
 *
 */

/**
 *	When multiple shipping addresses are set for a Line Item,
 *	use the [Remove LineItem](ctp:api:type:CartRemoveLineItemAction) and [Add LineItem](ctp:api:type:CartAddLineItemAction) update action
 *	to change the shipping details.
 *	Since it is not possible for the API to infer how the overall change in the Line Item quantity should be distributed over the sub-quantities,
 *	the `shippingDetails` field is kept in its current state to avoid data loss.
 *
 *	To change the Line Item quantity and shipping details together,
 *	use this update action in combination with the [Set LineItem ShippingDetails](ctp:api:type:CartSetLineItemShippingDetailsAction) update action
 *	in a single Cart update command.
 *
 *	The [LineItem](ctp:api:type:LineItem) price is set as described in [Line Item price selection](/../api/pricing-and-discounts-overview#line-item-price-selection).
 *
 *	This action is subject to [InventoryEntry](ctp:api:type:InventoryEntry) min/max restrictions when applicable. For more information, see [Quantity limits](/../api/carts-orders-overview#quantity-limits).
 *
 */

/**
 *	Changing the price rounding mode leads to [recalculation of taxes](/../api/carts-orders-overview#taxes).
 *
 */

/**
 *	Changing the tax calculation mode leads to [recalculation of taxes](/../api/carts-orders-overview#taxes).
 *
 */

/**
 *	- When `External` [TaxMode](ctp:api:type:TaxMode) is changed to `Platform` or `Disabled`, all previously set external Tax Rates are removed.
 *	- When set to `Platform`, Line Items, Custom Line Items, and Shipping Method require a Tax Category with a Tax Rate for the Cart's `shippingAddress`.
 *
 */

/**
 *	Changing the tax rounding mode leads to [recalculation of taxes](/../api/carts-orders-overview#taxes).
 *
 */

/**
 *	Changes the [CartState](ctp:api:type:CartState) from `Active` to `Frozen`. Results in a [Frozen Cart](ctp:api:type:FrozenCarts).
 *	Fails with [InvalidOperation](ctp:api:type:InvalidOperationError) error when the Cart is empty.
 *
 */

/**
 *	This update action does not set any Cart field in particular, but it triggers several [Cart updates](/../api/carts-orders-overview#update-a-cart)
 *	to bring prices and discounts to the latest state. Those can become stale over time when no Cart updates have been performed for a while and
 *	prices on related Products have changed in the meanwhile.
 *
 *	If the `priceMode` of the [Product](ctp:api:type:Product) related to a Line Item is of `Embedded` [ProductPriceMode](ctp:api:type:ProductPriceModeEnum),
 *	the updated `price` of that [LineItem](ctp:api:type:LineItem) may not correspond to a Price in the `variant.prices` anymore.
 *
 */

/**
 *	This update action does not support specifying quantities, unlike the [Remove LineItem](ctp:api:type:CartRemoveLineItemAction) update action.
 *
 *	If `shippingDetails` must be partially removed, use the [Change CustomLineItem Quantity](ctp:api:type:CartChangeCustomLineItemQuantityAction) update action.
 *
 */

/**
 *	An address can only be removed if it is not referenced in any [ItemShippingTarget](ctp:api:type:ItemShippingTarget) of the Cart.
 *
 */

/**
 *	The [LineItem](ctp:api:type:LineItem) price is updated as described in [Line Item price selection](/../api/pricing-and-discounts-overview#line-item-price-selection).
 *
 */

/**
 *	Removes a Shipping Method from a Cart that has the `Multiple` [ShippingMode](ctp:api:type:ShippingMode).
 *
 */

/**
 *	If the Cart is already associated with a Customer, an [InvalidOperation](ctp:api:type:InvalidOperationError) error is returned.
 *
 */

/**
 *	Updates the Business Unit on the Cart. The Cart must have an existing Business Unit assigned already.
 *
 */

/**
 *	Can be used if the Cart has the `ExternalAmount` [TaxMode](ctp:api:type:TaxMode). This update action adds the `taxedPrice` field to the Cart. It sets the `totalGross` amount, and Composable Commerce calculates the `totalNet` and `totalTax` values based on the provided `externalTotalGross`.
 *	You must use this update action after any price-affecting change occurs within the Cart.
 *
 */

/**
 *	Setting the country can lead to changes in the [LineItem](ctp:api:type:LineItem) prices.
 *
 */

/**
 *	Sets the recurrence information on the [CustomLineItem](ctp:api:type:CustomLineItem).
 *	If the Cart is already associated with a Recurring Order, this action will fail.
 *
 */

/**
 *	Can be used if the Cart has the `ExternalAmount` [TaxMode](ctp:api:type:TaxMode).
 *
 */

/**
 *	Can be used if the Cart has the `External` [TaxMode](ctp:api:type:TaxMode).
 *
 */

/**
 *	To set the Cart's custom Shipping Method (independent of the [ShippingMethods](ctp:api:type:ShippingMethod) managed through
 *	the [Shipping Methods API](/projects/shippingMethods)) the Cart must have
 *	the `Single` [ShippingMode](ctp:api:type:ShippingMode) and a `shippingAddress`.
 *
 *	To unset a custom Shipping Method on a Cart, use the [Set ShippingMethod](ctp:api:type:CartSetShippingMethodAction) update action
 *	without the `shippingMethod` field instead.
 *
 */

/**
 *	This update action can only be used if a Customer is not assigned to the Cart.
 *	If a Customer is already assigned, the Cart uses the Customer Group of the assigned Customer.
 *
 *	To reflect the new Customer Group, this update action can result in [updates to the Cart](/api/carts-orders-overview#update-a-cart). When this occurs, the following errors can be returned: [MatchingPriceNotFound](ctp:api:type:MatchingPriceNotFoundError) and [MissingTaxRateForCountry](ctp:api:type:MissingTaxRateForCountryError).
 *
 */

/**
 *	Setting the Cart's `customerId` can lead to updates on all its [LineItem](ctp:api:type:LineItem) `prices`.
 *
 *	If the Customer with the specified `id` cannot be found, this update action returns a
 *	[ReferencedResourceNotFound](ctp:api:type:ReferencedResourceNotFoundError) error.
 *
 */

/**
 *	Number of days after the last modification before a Cart is deleted.
 *
 *	If a [ChangeSubscription](ctp:api:type:ChangeSubscription) exists for Carts, a [ResourceDeletedDeliveryPayload](ctp:api:type:ResourceDeletedDeliveryPayload) is sent.
 *
 */

/**
 *	Adds a [DirectDiscount](ctp:api:type:DirectDiscount), but only if no [DiscountCode](ctp:api:type:DiscountCode) has been added to the Cart.
 *	Either a Discount Code or a Direct Discount can exist on a Cart at the same time.
 *
 */

/**
 *	Setting a distribution channel for a [LineItem](ctp:api:type:LineItem) can lead to an updated `price` as described in [Line Item price selection](/../api/pricing-and-discounts-overview#line-item-price-selection).
 *
 */

/**
 *	Sets the [LineItem](ctp:api:type:LineItem) `price` and changes the `priceMode` to `ExternalPrice` [LineItemPriceMode](ctp:api:type:LineItemPriceMode).
 *
 */

/**
 *	Sets the recurrence information on the [LineItem](ctp:api:type:LineItem).
 *	If the Cart is already associated with a Recurring Order, this action will fail.
 *
 */

/**
 *	Performing this action does not reserve stock. Stock is only reserved at Order creation if the [InventoryMode](ctp:api:type:InventoryMode) of the Cart is `TrackOnly` or `ReserveOnOrder`.
 *
 *	This action is subject to [InventoryEntry](ctp:api:type:InventoryEntry) min/max restrictions when applicable. For more information, see [Quantity limits](/../api/carts-orders-overview#quantity-limits).
 *
 */

/**
 *	Can be used if the Cart has the `ExternalAmount` [TaxMode](ctp:api:type:TaxMode). This update action sets the `taxedPrice` and `taxRate` on a Line Item and must be used after any price-affecting change occurs.
 *
 */

/**
 *	Can be used if the Cart has the `External` [TaxMode](ctp:api:type:TaxMode).
 *
 */

/**
 *	Sets the [LineItem](ctp:api:type:LineItem) `totalPrice` and `price`, and changes the `priceMode` to `ExternalTotal` [LineItemPriceMode](ctp:api:type:LineItemPriceMode).
 *
 */

/**
 *	Setting the shipping address also sets the [TaxRate](ctp:api:type:TaxRate) of Line Items and calculates the [TaxedPrice](ctp:api:type:TaxedPrice).
 *
 *	If a matching price cannot be found for the given shipping address during [Line Item price selection](/../api/pricing-and-discounts-overview#line-item-price-selection),
 *	a [MissingTaxRateForCountry](ctp:api:type:MissingTaxRateForCountryError) error is returned.
 *
 *	If you want to allow shipping to states inside a country that are not explicitly covered by a TaxRate,
 *	set the `countryTaxRateFallbackEnabled` field to `true` in the [CartsConfiguration](ctp:api:type:CartsConfiguration) by using
 *	the [Change CountryTaxRateFallbackEnabled](ctp:api:type:ProjectChangeCountryTaxRateFallbackEnabledAction) update action.
 *
 */

/**
 *	This action sets, overwrites, or removes any existing Custom Type and Custom Fields for the Cart's `shippingMethod` or `shipping`.
 *
 */

/**
 *	To set the Cart's Shipping Method the Cart must have the `Single` [ShippingMode](ctp:api:type:ShippingMode) and a `shippingAddress`.
 *
 */

/**
 *	A Shipping Method tax amount can be set if the Cart has the `ExternalAmount` [TaxMode](ctp:api:type:TaxMode).
 *
 */

/**
 *	A Shipping Method Tax Rate can be set if the Cart has the `External` [TaxMode](ctp:api:type:TaxMode).
 *
 */

/**
 *	Input used to select a [ShippingRatePriceTier](ctp:api:type:ShippingRatePriceTier).
 *	If no matching tier can be found, or the input is not set, the default price for the shipping rate is used.
 *
 */

/**
 *	Changes the [CartState](ctp:api:type:CartState) from `Frozen` to `Active`. Reactivates a [Frozen Cart](ctp:api:type:FrozenCarts).
 *	This action updates all prices in the Cart according to latest Prices on related Product Variants and Shipping Methods and by applying all discounts currently being active and applicable for the Cart.
 *
 */

/**
 *	Updates an address in `itemShippingAddresses` by keeping the Address `key`.
 *
 */

/**
 *	The scope controls which part of the product information is published.
 */
let ProductPublishScopeValues = /*#__PURE__*/function (ProductPublishScopeValues) {
  ProductPublishScopeValues["All"] = "All";
  ProductPublishScopeValues["Prices"] = "Prices";
  return ProductPublishScopeValues;
}({});

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 *	[PagedQueryResult](/../api/general-concepts#pagedqueryresult) with `results` containing an array of [CartDiscount](ctp:api:type:CartDiscount).
 *
 */

/**
 *	[Reference](ctp:api:type:Reference) to a [CartDiscount](ctp:api:type:CartDiscount).
 *
 */

/**
 *	[ResourceIdentifier](ctp:api:type:ResourceIdentifier) to a [CartDiscount](ctp:api:type:CartDiscount). Either `id` or `key` is required. If both are set, an [InvalidJsonInput](/../api/errors#invalidjsoninput) error is returned.
 *
 */

/**
 *	Discount is applied to [CustomLineItems](ctp:api:type:CustomLineItem) matching the `predicate`.
 *
 */

/**
 *	Discount is applied to [LineItems](ctp:api:type:LineItem) matching the `predicate`.
 *
 */

/**
 *	Pattern targets can be used to model Buy and Get discounts.
 *
 *	Unlike [CartDiscountLineItemsTarget](#cartdiscountlineitemstarget) and [CartDiscountCustomLineItemsTarget](#cartdiscountcustomlineitemstarget), it does not apply to a (Custom) Line Item as a whole, but to individual units of a (Custom) Line Item. The discounts can apply multiple times on the same cart, but each unit can be discounted only once.
 *
 */

/**
 *	Discount is applied to the shipping costs of the [Cart](ctp:api:type:Cart).
 *
 */

/**
 *	Discount is applied to the total price of the [Cart](ctp:api:type:Cart).
 *	The same percentage of discount applies on the [Cart](ctp:api:type:Cart) or [Order](ctp:api:type:Order) `taxedPrice` and `taxedShippingPrice`.
 *
 */

/**
 *	Discounts the [CartDiscountTarget](ctp:api:type:CartDiscountTarget) by an absolute amount (not allowed for [MultiBuyLineItemsTarget](ctp:api:type:MultiBuyLineItemsTarget) and [MultiBuyCustomLineItemsTarget](ctp:api:type:MultiBuyCustomLineItemsTarget)).
 *
 */

/**
 *	Sets the [DiscountedLineItemPrice](ctp:api:type:DiscountedLineItemPrice) of the [CartDiscountLineItemsTarget](ctp:api:type:CartDiscountLineItemsTarget) or [CartDiscountCustomLineItemsTarget](ctp:api:type:CartDiscountCustomLineItemsTarget) to the value specified in the `money` field, if it is lower than the current Line Item price for the same currency. If the Line Item price is already discounted to a price equal to or lower than the respective price in the `money` field, this Discount is not applied. If the `quantity` of the Line Item eligible for the Discount is greater than `1`, the fixed price discount is only applied to the Line Item portion for which the `money` value is lesser than their current price.
 *
 */

/**
 *	Sets the [DiscountedLineItemPrice](ctp:api:type:DiscountedLineItemPrice) of the [CartDiscountLineItemsTarget](ctp:api:type:CartDiscountLineItemsTarget) or [CartDiscountCustomLineItemsTarget](ctp:api:type:CartDiscountCustomLineItemsTarget) to the value specified in the `money` field, if it is lower than the current Line Item price for the same currency. If the Line Item price is already discounted to a price equal to or lower than the respective price in the `money` field, this Discount is not applied.
 *
 */

/**
 *	Can only be used in a [CartDiscountDraft](ctp:api:type:CartDiscountDraft) with no `target` specified.
 *	Hence, this type can not be used in the [Change Value](ctp:api:type:CartDiscountChangeValueAction) update action.
 *
 */

/**
 *	Discounts the [CartDiscountTarget](ctp:api:type:CartDiscountTarget) relative to its price.
 *
 */

/**
 *	This mode determines how absolute Discounts are applied on Line Items or Custom Line Items.
 *
 */
let DiscountApplicationModeValues = /*#__PURE__*/function (DiscountApplicationModeValues) {
  DiscountApplicationModeValues["EvenDistribution"] = "EvenDistribution";
  DiscountApplicationModeValues["IndividualApplication"] = "IndividualApplication";
  DiscountApplicationModeValues["ProportionateDistribution"] = "ProportionateDistribution";
  return DiscountApplicationModeValues;
}({});

/**
 *	This Discount target is similar to `MultiBuyLineItems`, but is applied on Custom Line Items instead of Line Items.
 *
 */

/**
 *	The pattern component it used to define a set of units based on some criteria. The criteria depends on the type of component used.
 *
 */

/**
 *	Defines which matching items are to be discounted.
 *
 */
let SelectionModeValues = /*#__PURE__*/function (SelectionModeValues) {
  SelectionModeValues["Cheapest"] = "Cheapest";
  SelectionModeValues["MostExpensive"] = "MostExpensive";
  return SelectionModeValues;
}({});
/**
 *	Describes how the Cart Discount interacts with other Discounts.
 *
 */
let StackingModeValues = /*#__PURE__*/function (StackingModeValues) {
  StackingModeValues["Stacking"] = "Stacking";
  StackingModeValues["StopAfterThisDiscount"] = "StopAfterThisDiscount";
  return StackingModeValues;
}({});

/**
 *	If a referenced Store does not exist, a [ReferencedResourceNotFound](ctp:api:type:ReferencedResourceNotFoundError) error is returned.
 *
 *	This action generates a [CartDiscountStoreAdded](ctp:api:type:CartDiscountStoreAddedMessage) Message.
 *
 */

/**
 *	Changes the [CartDiscountValue](ctp:api:type:CartDiscountValue) for [relative](ctp:api:type:CartDiscountValueRelative), [absolute](ctp:api:type:CartDiscountValueAbsolute) and [fixed price](ctp:api:type:CartDiscountValueFixed) CartDiscounts.
 *	Changing to [Gift Line Item](ctp:api:type:CartDiscountValueGiftLineItem) is not supported.
 *
 */

/**
 *	If a referenced Store does not exist, a [ReferencedResourceNotFound](ctp:api:type:ReferencedResourceNotFoundError) error is returned.
 *
 *	This action generates a [CartDiscountStoreRemoved](ctp:api:type:CartDiscountStoreRemovedMessage) Message.
 *
 */

/**
 *	If a referenced Store does not exist, a [ReferencedResourceNotFound](ctp:api:type:ReferencedResourceNotFoundError) error is returned.
 *
 *	This action generates a [CartDiscountStoresSet](ctp:api:type:CartDiscountStoresSetMessage) Message.
 *
 */

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 *	[PagedQueryResult](/../api/general-concepts#pagedqueryresult) with results containing an array of [Channel](ctp:api:type:Channel).
 *
 */

/**
 *	[Reference](ctp:api:type:Reference) to a [Channel](ctp:api:type:Channel).
 *
 */

/**
 *	[ResourceIdentifier](ctp:api:type:ResourceIdentifier) to a [Channel](ctp:api:type:Channel). Either `id` or `key` is required. If both are set, an [InvalidJsonInput](/../api/errors#invalidjsoninput) error is returned.
 *
 */

/**
 *	Describes the purpose and type of the Channel. A Channel can have one or more roles.
 *
 */
let ChannelRoleEnumValues = /*#__PURE__*/function (ChannelRoleEnumValues) {
  ChannelRoleEnumValues["InventorySupply"] = "InventorySupply";
  ChannelRoleEnumValues["OrderExport"] = "OrderExport";
  ChannelRoleEnumValues["OrderImport"] = "OrderImport";
  ChannelRoleEnumValues["Primary"] = "Primary";
  ChannelRoleEnumValues["ProductDistribution"] = "ProductDistribution";
  return ChannelRoleEnumValues;
}({});

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 *	Each query endpoint returns a paged query response containing the actual resources matching the query predicate plus information about [pagination](#pagination).
 *	This documents the fields all query responses have in common, for specific response types, see the respective API reference pages.
 *
 */

/**
 *	Dimensions of the Asset source specified by the number of pixels.
 *
 */

/**
 *	Representation of an [Asset](#asset) in a specific format, for example a video in a certain encoding, or an image in a certain resolution.
 *
 */

/**
 *	Indicates the source and method that indirectly created or modified the resource. This is present on resources created or updated after 1 April 2024.
 */

let AttributionSourceValues = /*#__PURE__*/function (AttributionSourceValues) {
  AttributionSourceValues["Export"] = "Export";
  AttributionSourceValues["Import"] = "Import";
  return AttributionSourceValues;
}({});

/**
 *	Polymorphic base type that represents a postal address and contact details.
 *	Depending on the read or write action, it can be either [Address](ctp:api:type:Address) or [AddressDraft](ctp:api:type:AddressDraft) that
 *	only differ in the data type for the optional `custom` field.
 *
 */

/**
 *	Address type returned by read methods.
 *	Optionally, the `custom` field can be present in addition to the fields of a [BaseAddress](ctp:api:type:BaseAddress).
 *
 */

/**
 *	Address type to be used on write methods.
 *	Optionally, use the `custom` field in addition to the fields of a [BaseAddress](ctp:api:type:BaseAddress).
 *
 */

/**
 *	These objects represent information about which [API Client](/../api/projects/api-clients) created or modified a resource. For more information, see [Client Logging](/../api/general-concepts#client-logging).
 *
 */

/**
 *	IDs and references that created the resource. This is present on resources created after 1 February 2019 except for [events not tracked](/general-concepts#events-tracked).
 */

/**
 *	GeoJSON Geometry represents a [Geometry Object](https://datatracker.ietf.org/doc/html/rfc7946#section-3.1) as defined in the GeoJSON standard.
 *
 */

/**
 *	A KeyReference represents a loose reference to another resource in the same Project identified by the resource's `key` field. If available, the `key` is immutable and mandatory. KeyReferences do not support [Reference Expansion](/general-concepts#reference-expansion).
 *
 */

/**
 *	IDs and references that last modified the resource. This is present on resources created or updated after 1 February 2019 except for [events not tracked](/general-concepts#events-tracked).
 */

/**
 *	JSON object where the keys are of type [Locale](ctp:api:type:Locale), and the values are the strings used for the corresponding language.
 *
 */

/**
 *	Draft object to store money in cent amounts for a specific currency.
 */

/**
 *	Determines the type of money used.
 */
let MoneyTypeValues = /*#__PURE__*/function (MoneyTypeValues) {
  MoneyTypeValues["CentPrecision"] = "centPrecision";
  MoneyTypeValues["HighPrecision"] = "highPrecision";
  return MoneyTypeValues;
}({});

/**
 *	The representation for prices embedded in [LineItems](ctp:api:type:LineItem) and in [ProductVariants](ctp:api:type:ProductVariant) when the [ProductPriceMode](ctp:api:type:ProductPriceModeEnum) is `Embedded`.
 *	For the `Standalone` ProductPriceMode refer to [StandalonePrice](ctp:api:type:StandalonePrice).
 */

/**
 *	The draft representation for prices to be embedded into [ProductVariantDrafts](ctp:api:type:ProductVariantDraft) when the [ProductPriceMode](ctp:api:type:ProductPriceModeEnum) is `Embedded`. For the `Standalone` ProductPriceMode use [StandalonePriceDraft](ctp:api:type:StandalonePriceDraft).
 */

/**
 *	A Price tier is selected instead of the default Price when a certain quantity of the [ProductVariant](ctp:api:type:ProductVariant) is [added to a Cart](/projects/carts#add-lineitem) and ordered.
 *	_For example: the Price can be lower if more than 10 items are ordered._
 *	If no Price tier is found for the Order quantity, the base Price is used.
 *	A Price tier is applied for the entire quantity of a Product Variant put as [LineItem](/projects/carts#lineitem) in a Cart as soon as the minimum quantity for the Price tier is reached.
 *	The Price tier is applied per Line Item of the Product Variant. If, for example, the same Product Variant appears in the same Cart as several Line Items, (what can be achieved by different values of a Custom Field on the Line Items) for each Line Item the minimum quantity must be reached to get the Price tier.
 *
 */

/**
 *	Specifies a Price tier that applies when the minimum quantity for the [LineItem](ctp:api:type:LineItem) of a ProductVariant with the related Price is reached in a Cart.
 *
 */

/**
 *	A Reference represents a loose reference to another resource in the same Project identified by its `id`. The `typeId` indicates the type of the referenced resource. Each resource type has its corresponding Reference type, like [ChannelReference](ctp:api:type:ChannelReference).  A referenced resource can be embedded through [Reference Expansion](/general-concepts#reference-expansion). The expanded reference is the value of an additional `obj` field then.
 *
 */

/**
 *	Type of resource the value should reference. Supported resource type identifiers are:
 *
 */
let ReferenceTypeIdValues = /*#__PURE__*/function (ReferenceTypeIdValues) {
  ReferenceTypeIdValues["ApprovalFlow"] = "approval-flow";
  ReferenceTypeIdValues["ApprovalRule"] = "approval-rule";
  ReferenceTypeIdValues["AssociateRole"] = "associate-role";
  ReferenceTypeIdValues["AttributeGroup"] = "attribute-group";
  ReferenceTypeIdValues["BusinessUnit"] = "business-unit";
  ReferenceTypeIdValues["Cart"] = "cart";
  ReferenceTypeIdValues["CartDiscount"] = "cart-discount";
  ReferenceTypeIdValues["Category"] = "category";
  ReferenceTypeIdValues["Channel"] = "channel";
  ReferenceTypeIdValues["Customer"] = "customer";
  ReferenceTypeIdValues["CustomerEmailToken"] = "customer-email-token";
  ReferenceTypeIdValues["CustomerGroup"] = "customer-group";
  ReferenceTypeIdValues["CustomerPasswordToken"] = "customer-password-token";
  ReferenceTypeIdValues["DirectDiscount"] = "direct-discount";
  ReferenceTypeIdValues["DiscountCode"] = "discount-code";
  ReferenceTypeIdValues["DiscountGroup"] = "discount-group";
  ReferenceTypeIdValues["Extension"] = "extension";
  ReferenceTypeIdValues["InventoryEntry"] = "inventory-entry";
  ReferenceTypeIdValues["KeyValueDocument"] = "key-value-document";
  ReferenceTypeIdValues["Order"] = "order";
  ReferenceTypeIdValues["OrderEdit"] = "order-edit";
  ReferenceTypeIdValues["Payment"] = "payment";
  ReferenceTypeIdValues["PaymentMethod"] = "payment-method";
  ReferenceTypeIdValues["Product"] = "product";
  ReferenceTypeIdValues["ProductDiscount"] = "product-discount";
  ReferenceTypeIdValues["ProductPrice"] = "product-price";
  ReferenceTypeIdValues["ProductSelection"] = "product-selection";
  ReferenceTypeIdValues["ProductTailoring"] = "product-tailoring";
  ReferenceTypeIdValues["ProductType"] = "product-type";
  ReferenceTypeIdValues["Quote"] = "quote";
  ReferenceTypeIdValues["QuoteRequest"] = "quote-request";
  ReferenceTypeIdValues["RecurrencePolicy"] = "recurrence-policy";
  ReferenceTypeIdValues["RecurringOrder"] = "recurring-order";
  ReferenceTypeIdValues["Review"] = "review";
  ReferenceTypeIdValues["ShippingMethod"] = "shipping-method";
  ReferenceTypeIdValues["ShoppingList"] = "shopping-list";
  ReferenceTypeIdValues["StagedQuote"] = "staged-quote";
  ReferenceTypeIdValues["StandalonePrice"] = "standalone-price";
  ReferenceTypeIdValues["State"] = "state";
  ReferenceTypeIdValues["Store"] = "store";
  ReferenceTypeIdValues["Subscription"] = "subscription";
  ReferenceTypeIdValues["TaxCategory"] = "tax-category";
  ReferenceTypeIdValues["Type"] = "type";
  ReferenceTypeIdValues["Zone"] = "zone";
  return ReferenceTypeIdValues;
}({});

/**
 *	Draft type to create a [Reference](ctp:api:type:Reference) or a [KeyReference](ctp:api:type:KeyReference) to a resource. Provide either the `id` or (wherever supported) the `key` of the resource to reference, but depending on the API endpoint the response returns either a Reference or a KeyReference. For example, the field `parent` of a [CategoryDraft](ctp:api:type:CategoryDraft) takes a ResourceIdentifier for its value while the value of the corresponding field of a [Category](ctp:api:type:Category) is a Reference.
 *
 *	Each resource type has its corresponding ResourceIdentifier, like [ChannelResourceIdentifier](ctp:api:type:ChannelResourceIdentifier).
 *
 */

/**
 *	Scoped Price is contained in a [ProductVariant](ctp:api:type:ProductVariant) which is returned in response to a
 *	[Product Projection Search](ctp:api:type:ProductProjectionSearchFilterScopedPrice) request when [Scoped Price Search](/../api/pricing-and-discounts-overview#scoped-price-search) is used.
 *
 */

/**
 *	Base polymorphic read-only money type that stores currency in cent precision or high precision, that is in sub-cents.
 *
 */

/**
 *	Object that stores money in cent amounts of a specific currency.
 */

/**
 *	Object that stores money as a fraction of the smallest indivisible unit of a specific currency.
 */

/**
 *	Base polymorphic money type containing common fields for [Money](ctp:api:type:Money) and [HighPrecisionMoneyDraft](ctp:api:type:HighPrecisionMoneyDraft).
 *
 *	- To set money in cent precision, use [Money](ctp:api:type:Money).
 *	- To set money in high precision, use [HighPrecisionMoneyDraft](ctp:api:type:HighPrecisionMoneyDraft).
 *
 */

/**
 *	This draft type is the alternative to [Money](ctp:api:type:Money).
 *
 */

/**
 *	Draft object to store money as a fraction of the smallest indivisible unit for a specific currency.
 */

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

let AnonymousCartSignInModeValues = /*#__PURE__*/function (AnonymousCartSignInModeValues) {
  AnonymousCartSignInModeValues["MergeWithExistingCustomerCart"] = "MergeWithExistingCustomerCart";
  AnonymousCartSignInModeValues["UseAsNewActiveCustomerCart"] = "UseAsNewActiveCustomerCart";
  return AnonymousCartSignInModeValues;
}({});
let AuthenticationModeValues = /*#__PURE__*/function (AuthenticationModeValues) {
  AuthenticationModeValues["ExternalAuth"] = "ExternalAuth";
  AuthenticationModeValues["Password"] = "Password";
  return AuthenticationModeValues;
}({});

/**
 *	If `stores` is not empty, the Customer is specific to those Stores.
 *
 */

/**
 *	[Reference](ctp:api:type:Reference) to a [CustomerToken](ctp:api:type:CustomerToken) for email verification.
 *
 */

/**
 *	[PagedQueryResult](/../api/general-concepts#pagedqueryresult) with results containing an array of [Customer](ctp:api:type:Customer).
 *
 */

/**
 *	[Reference](ctp:api:type:Reference) to a [CustomerToken](ctp:api:type:CustomerToken) for password reset.
 *
 */

/**
 *	[Reference](ctp:api:type:Reference) to a [Customer](ctp:api:type:Customer).
 *
 */

/**
 *	[ResourceIdentifier](ctp:api:type:ResourceIdentifier) to a [Customer](ctp:api:type:Customer). Either `id` or `key` is required. If both are set, an [InvalidJsonInput](/../api/errors#invalidjsoninput) error is returned.
 *
 */

/**
 *	Adding an address to the Customer produces the [CustomerAddressAdded](ctp:api:type:CustomerAddressAddedMessage) Message.
 *
 */

/**
 *	Adds an Address from the `addresses` array to `billingAddressIds`. Either `addressId` or `addressKey` is required.
 *
 */

/**
 *	Assigns a Customer Group to a Customer. This action generates the [CustomerGroupAssignmentAdded](ctp:api:type:CustomerGroupAssignmentAddedMessage) Message.
 *
 */

/**
 *	Adds an Address from the `addresses` array to `shippingAddressIds`. Either `addressId` or `addressKey` is required.
 *
 */

/**
 *	Associates the Customer with a Store.
 *
 */

/**
 *	Changing an address of the Customer produces the [CustomerAddressChanged](ctp:api:type:CustomerAddressChangedMessage) Message.
 *
 *	Either `addressId` or `addressKey` is required.
 *
 */

/**
 *	Changes the `email` of the Customer and sets the `isEmailVerified` property to `false`. This update action generates a [CustomerEmailChanged](ctp:api:type:CustomerEmailChangedMessage) Message.
 *
 */

/**
 *	Removing an address from the Customer produces the [CustomerAddressRemoved](ctp:api:type:CustomerAddressRemovedMessage) Message.
 *
 *	Either `addressId` or `addressKey` is required.
 *
 */

/**
 *	Removes a billing address from `billingAddressesIds`.
 *	If the billing address is the default billing address, the `defaultBillingAddressId` is unset. Either `addressId` or `addressKey` is required.
 *
 */

/**
 *	Unassigns a Customer Group from a Customer. This action generates the [CustomerGroupAssignmentRemoved](ctp:api:type:CustomerGroupAssignmentRemovedMessage) Message.
 *
 */

/**
 *	Removes a shipping address from `shippingAddressesIds`.
 *	If the shipping address is the default shipping address, the `defaultShippingAddressId` is unset. Either `addressId` or `addressKey` is required.
 *
 */

/**
 *	Removes the association to a Store from the Customer.
 *	If no more Stores are assigned, the Customer becomes a [global Customer](/../api/customers-overview#global-versus-store-specific-customers).
 *
 */

/**
 *	Adding a Custom Field to an Address of a Customer generates the [CustomerAddressCustomFieldAdded](ctp:api:type:CustomerAddressCustomFieldAddedMessage) Message, removing one generates the [CustomerAddressCustomFieldRemoved](ctp:api:type:CustomerAddressCustomFieldRemovedMessage) Message, and updating an existing one generates the [CustomerAddressCustomFieldChanged](ctp:api:type:CustomerAddressCustomFieldChangedMessage) Message.
 *
 */

/**
 *	Adding or updating a Custom Type on an Address of a Customer generates the [CustomerAddressCustomTypeSet](ctp:api:type:CustomerAddressCustomTypeSetMessage) Message, and removing one generates the [CustomerAddressCustomTypeRemoved](ctp:api:type:CustomerAddressCustomTypeRemovedMessage) Message.
 *
 */

/**
 *	Setting a company name produces the [CustomerCompanyNameSet](ctp:api:type:CustomerCompanyNameSetMessage) Message.
 *
 */

/**
 *	Adding a Custom Field to a Customer generates the [CustomerCustomFieldAdded](ctp:api:type:CustomerCustomFieldAddedMessage) Message, removing one generates the [CustomerCustomFieldRemoved](ctp:api:type:CustomerCustomFieldRemovedMessage) Message, and updating an existing one generates the [CustomerCustomFieldChanged](ctp:api:type:CustomerCustomFieldChangedMessage) Message.
 *
 */

/**
 *	Adding or updating a Custom Type on a Customer generates the [CustomerCustomTypeSet](ctp:api:type:CustomerCustomTypeSetMessage) Message, removing one generates the [CustomerCustomTypeRemoved](ctp:api:type:CustomerCustomTypeRemovedMessage) Message.
 *
 */

/**
 *	Setting the Customer Group of the Customer produces the [CustomerGroupSet](ctp:api:type:CustomerGroupSetMessage) Message.
 *
 *	To reflect the new Customer Group, this update action can result in [updates](/api/carts-orders-overview#update-a-cart) to the most recently modified active Cart. When this occurs, the following errors can be returned: [MatchingPriceNotFound](ctp:api:type:MatchingPriceNotFoundError) and [MissingTaxRateForCountry](ctp:api:type:MissingTaxRateForCountryError).
 *
 */

/**
 *	Assigns multiple Customer Groups to a Customer. This action generates the [CustomerGroupAssignmentsSetMessage](ctp:api:type:CustomerGroupAssignmentsSetMessage) Message.
 *
 */

/**
 *	Sets a new ID that can be used to refer to a Customer in a human-reabable way (for use in emails, invoices, etc).
 *
 */

/**
 *	Setting the date of birth of the Customer produces the [CustomerDateOfBirthSet](ctp:api:type:CustomerDateOfBirthSetMessage) Message.
 *
 */

/**
 *	Sets the default billing address from `addresses`.
 *	The action adds the `id` of the specified Address to the `billingAddressIds` if not contained already. Either `addressId` or `addressKey` is required.
 *
 *	This action generates the [CustomerDefaultBillingAddressSet](ctp:api:type:CustomerDefaultBillingAddressSetMessage) Message.
 *
 */

/**
 *	Sets the default shipping address from `addresses`.
 *	The action adds the `id` of the specified address to the `shippingAddressIds` if not contained already. Either `addressId` or `addressKey` is required.
 *
 *	This action generates the [CustomerDefaultShippingAddressSet](ctp:api:type:CustomerDefaultShippingAddressSetMessage) Message.
 *
 */

/**
 *	Setting the first name of the Customer produces the [CustomerFirstNameSet](ctp:api:type:CustomerFirstNameSetMessage) Message.
 *
 */

/**
 *	Setting the last name of the Customer produces the [CustomerLastNameSet](ctp:api:type:CustomerLastNameSetMessage) Message.
 *
 */

/**
 *	Sets the Stores the Customer account is associated with.
 *	If no Stores are specified, the Customer becomes a [global Customer](/../api/customers-overview#global-versus-store-specific-customers).
 *
 *	This action generates the [CustomerStoresSet](ctp:api:type:CustomerStoresSetMessage) Message.
 *
 */

/**
 *	Setting the title of the Customer produces the [CustomerTitleSet](ctp:api:type:CustomerTitleSetMessage) Message.
 *
 */

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 *	An Extension gets called during any of the following requests of an API call, but before the result is persisted.
 *
 */
let ExtensionActionValues = /*#__PURE__*/function (ExtensionActionValues) {
  ExtensionActionValues["Create"] = "Create";
  ExtensionActionValues["Update"] = "Update";
  return ExtensionActionValues;
}({});

/**
 *	Generic type for destinations.
 */

/**
 *	We recommend creating an Identify and Access Management (IAM) user with an `accessKey` and `accessSecret` pair, specifically for each Extension that only has the `lambda:InvokeFunction` permission on this function.
 *
 */

/**
 *	[PagedQueryResult](/../api/general-concepts#pagedqueryresult) with `results` containing an array of [Extension](ctp:api:type:Extension).
 *
 */

/**
 *	Extensions are available for:
 *
 */
let ExtensionResourceTypeIdValues = /*#__PURE__*/function (ExtensionResourceTypeIdValues) {
  ExtensionResourceTypeIdValues["BusinessUnit"] = "business-unit";
  ExtensionResourceTypeIdValues["Cart"] = "cart";
  ExtensionResourceTypeIdValues["Customer"] = "customer";
  ExtensionResourceTypeIdValues["CustomerGroup"] = "customer-group";
  ExtensionResourceTypeIdValues["Order"] = "order";
  ExtensionResourceTypeIdValues["Payment"] = "payment";
  ExtensionResourceTypeIdValues["PaymentMethod"] = "payment-method";
  ExtensionResourceTypeIdValues["Quote"] = "quote";
  ExtensionResourceTypeIdValues["QuoteRequest"] = "quote-request";
  ExtensionResourceTypeIdValues["ShoppingList"] = "shopping-list";
  ExtensionResourceTypeIdValues["StagedQuote"] = "staged-quote";
  return ExtensionResourceTypeIdValues;
}({});

/**
 *	For GoogleCloudFunction destinations, you need to grant permissions to the `extensions@commercetools-platform.iam.gserviceaccount.com` service account to invoke your function. If your function's version is 1st gen, grant the service account the IAM role `Cloud Functions Invoker`. For version 2nd gen, assign the IAM role `Cloud Run Invoker` using the Cloud Run console.
 *
 */

/**
 *	We recommend an encrypted `HTTPS` connection for production setups. However, we also accept unencrypted `HTTP` connections for development purposes. HTTP redirects will not be followed and cache headers will be ignored.
 *
 */

/**
 *	The `Authorization` header will be set to the content of `headerValue`. The authentication scheme (such as `Basic` or `Bearer`) should be included in the `headerValue`.
 *
 *	For example, the `headerValue` for [Basic Authentication](https://datatracker.ietf.org/doc/html/rfc7617) should be set to `Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==`.
 *
 */

/**
 *	To protect your Azure Function, set its `authLevel` to `function` and provide the function's key to be used inside the `x-functions-key` header. For more information, see the [Azure Functions documentation](https://docs.microsoft.com/en-us/azure/azure-functions/functions-bindings-http-webhook#keys).
 *
 *	To protect the secret key from being exposed, remove the code parameter and secret key from the URL. For example, use `https://foo.azurewebsites.net/api/bar` instead of
 *	`https://foo.azurewebsites.net/api/bar?code=secret`.
 *
 */

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 *	The `customerId` is determined by a [password flow token](/../api/authorization#password-flow) and
 *	automatically set on the resulting [Cart](ctp:api:type:Cart).
 *	The `anonymousId` is determined by a [token for an anonymous session](ctp:api:type:AnonymousSession) and
 *	automatically set on the resulting [Cart](ctp:api:type:Cart).
 *
 */

/**
 *	Draft type to represent the top level of a business.
 *	Contains the fields and values of the generic [MyBusinessUnitDraft](ctp:api:type:BusinessUnitDraft) that are used specifically for creating a [Company](ctp:api:type:Company).
 *
 */

/**
 *	Draft type to model divisions that are part of the [Company](ctp:api:type:Company) or a higher-order [Division](ctp:api:type:Division).
 *	Contains the fields and values of the generic [MyBusinessUnitDraft](ctp:api:type:MyBusinessUnitDraft) that are used specifically for creating a Division.
 *
 */

/**
 *	For Product Variant identification, either the `productId` and `variantId`, or `sku` must be provided.
 *
 */

/**
 *	[PagedQueryResult](/../api/general-concepts#pagedqueryresult) with `results` containing an array of [MyPayment](ctp:api:type:MyPayment).
 *
 */

/**
 *	[QuoteStates](ctp:api:type:QuoteState) that can be set using the [Change My Quote State](ctp:api:type:MyQuoteChangeMyQuoteStateAction) update action.
 *
 */
let MyQuoteStateValues = /*#__PURE__*/function (MyQuoteStateValues) {
  MyQuoteStateValues["Accepted"] = "Accepted";
  MyQuoteStateValues["Declined"] = "Declined";
  return MyQuoteStateValues;
}({});

/**
 *	A [MyShoppingListDraft](ctp:api:type:MyShoppingListDraft) is the object submitted as payload to the [Create MyShoppingList request](ctp:api:endpoint:/{projectKey}/me/shopping-lists:POST).
 *	The `customer` field of [ShoppingList](ctp:api:type:ShoppingList) is automatically set with
 *	a [password flow token](/authorization#password-flow).
 *	The `anonymousId` is automatically set with a [token for an anonymous session](/authorization#tokens-for-anonymous-sessions).
 *	The `key` and `slug` fields can not be set.
 *
 */

/**
 *	Adding an address to a [Business Unit](ctp:api:type:BusinessUnit) generates a [BusinessUnitAddressAdded](ctp:api:type:BusinessUnitAddressAddedMessage) Message.
 *
 */

/**
 *	Adding a billing address to a [Business Unit](ctp:api:type:BusinessUnit) generates a [BusinessUnitBillingAddressAdded](ctp:api:type:BusinessUnitBillingAddressAddedMessage) Message.
 *
 */

/**
 *	Adding a shipping address to a [Business Unit](ctp:api:type:BusinessUnit) generates a [BusinessUnitShippingAddressAdded](ctp:api:type:BusinessUnitShippingAddressAddedMessage) Message.
 *
 */

/**
 *	Changing the address on a Business Unit generates the [BusinessUnitAddressChanged](ctp:api:type:BusinessUnitAddressChangedMessage) Message.
 *
 */

/**
 *	Updating the [Associate](ctp:api:type:Associate) on a [Business Unit](ctp:api:type:BusinessUnit) generates the [BusinessUnitAssociateChanged](ctp:api:type:BusinessUnitAssociateChangedMessage) Message.
 *
 */

/**
 *	Updating the name on a [Business Unit](ctp:api:type:BusinessUnit) generates a [BusinessUnitNameChanged](ctp:api:type:BusinessUnitNameChangedMessage) Message.
 *
 */

/**
 *	Changing the parent of a [Business Unit](ctp:api:type:BusinessUnit) generates a [BusinessUnitParentChanged](ctp:api:type:BusinessUnitParentChangedMessage) Message.
 *
 */

/**
 *	Removing the address from a [Business Unit](ctp:api:type:BusinessUnit) generates the [BusinessUnitAddressRemoved](ctp:api:type:BusinessUnitAddressRemovedMessage) Message.
 *
 */

/**
 *	Removing an [Associate](ctp:api:type:Associate) from a [Business Unit](ctp:api:type:BusinessUnit) generates a [BusinessUnitAssociateRemoved](ctp:api:type:BusinessUnitAssociateRemovedMessage) Message.
 *
 */

/**
 *	Removing a billing address from a [Business Unit](ctp:api:type:BusinessUnit) generates a [BusinessUnitBillingAddressRemoved](ctp:api:type:BusinessUnitBillingAddressRemovedMessage) Message.
 *
 */

/**
 *	Removing a shipping address from a [Business Unit](ctp:api:type:BusinessUnit) generates a [BusinessUnitShippingAddressRemoved](ctp:api:type:BusinessUnitShippingAddressRemovedMessage) Message.
 *
 */

/**
 *	Adding a Custom Field to an Address of a Business Unit generates the [BusinessUnitAddressCustomFieldAdded](ctp:api:type:BusinessUnitAddressCustomFieldAddedMessage) Message, removing one generates the [BusinessUnitAddressCustomFieldRemoved](ctp:api:type:BusinessUnitAddressCustomFieldRemovedMessage) Message, and updating an existing one generates the [BusinessUnitAddressCustomFieldChanged](ctp:api:type:BusinessUnitAddressCustomFieldChangedMessage) Message.
 *
 */

/**
 *	Adding or updating a Custom Type to an Address of a Business Unit generates the [BusinessUnitAddressCustomTypeSet](ctp:api:type:BusinessUnitAddressCustomTypeSetMessage) Message, and removing one generates the [BusinessUnitAddressCustomTypeRemoved](ctp:api:type:BusinessUnitAddressCustomTypeRemovedMessage) Message.
 *
 */

/**
 *	Setting the contact email on a [Business Unit](ctp:api:type:BusinessUnit) generates a [BusinessUnitContactEmailSet](ctp:api:type:BusinessUnitContactEmailSetMessage) Message.
 *
 */

/**
 *	Adding a Custom Field to a Business Unit generates the [BusinessUnitCustomFieldAdded](ctp:api:type:BusinessUnitCustomFieldAddedMessage) Message, removing one generates the [BusinessUnitCustomFieldRemoved](ctp:api:type:BusinessUnitCustomFieldRemovedMessage) Message, and updating an existing one generates the [BusinessUnitCustomFieldChanged](ctp:api:type:BusinessUnitCustomFieldChangedMessage) Message.
 *
 */

/**
 *	Adding or updating a Custom Type on a Business Unit generates the [BusinessUnitCustomTypeSet](ctp:api:type:BusinessUnitCustomTypeSetMessage) Message, removing one generates the [BusinessUnitCustomTypeRemoved](ctp:api:type:BusinessUnitCustomTypeRemovedMessage) Message.
 *
 */

/**
 *	Setting the default billing address on a [Business Unit](ctp:api:type:BusinessUnit) generates the [BusinessUnitDefaultBillingAddressSet](ctp:api:type:BusinessUnitDefaultBillingAddressSetMessage) Message.
 *
 */

/**
 *	Setting the default shipping address on a [Business Unit](ctp:api:type:BusinessUnit) generates a [BusinessUnitDefaultShippingAddressSet](ctp:api:type:BusinessUnitDefaultShippingAddressSetMessage) Message.
 *
 */

/**
 *	Adds a [DiscountCode](ctp:api:type:DiscountCode) to the Cart to activate the related [CartDiscounts](/../api/projects/cartDiscounts).
 *	Adding a Discount Code is only possible if no [DirectDiscount](ctp:api:type:DirectDiscount) has been applied to the Cart.
 *	Discount Codes can be added to [frozen Carts](ctp:api:type:FrozenCarts), but their [DiscountCodeState](ctp:api:type:DiscountCodeState) is then `DoesNotMatchCart`.
 *
 *	The maximum number of Discount Codes in a Cart is restricted by a [limit](/../api/limits#carts).
 *
 *	Specific Error Code: [MatchingPriceNotFound](ctp:api:type:MatchingPriceNotFoundError)
 *
 */

/**
 *	Adds an address to a Cart when shipping to multiple addresses is desired.
 *
 */

/**
 *	If the Cart contains a [LineItem](ctp:api:type:LineItem) for a Product Variant with the same [LineItemMode](ctp:api:type:LineItemMode), [Custom Fields](/../api/projects/custom-fields), supply and distribution channel, then only the quantity of the existing Line Item is increased.
 *	If [LineItem](ctp:api:type:LineItem) `shippingDetails` is set, it is merged. All addresses will be present afterwards and, for address keys present in both shipping details, the quantity will be summed up.
 *	The [LineItem](ctp:api:type:LineItem) price is set as described in [Line Item price selection](/../api/pricing-and-discounts-overview#line-item-price-selection).
 *
 *	If the Tax Rate is not set, a [MissingTaxRateForCountry](ctp:api:type:MissingTaxRateForCountryError) error is returned.
 *
 *	If the Line Items do not have a Price according to the [Product](ctp:api:type:Product) `priceMode` value for a selected currency and/or country, Customer Group, or Channel, a [MatchingPriceNotFound](ctp:api:type:MatchingPriceNotFoundError) error is returned.
 *
 */

/**
 *	To override the shipping details, see [Set LineItem ShippingDetails](ctp:api:type:MyCartSetLineItemShippingDetailsAction).
 *
 */

/**
 *	When multiple shipping addresses are set for a Line Item,
 *	use the [Remove LineItem](ctp:api:type:CartRemoveLineItemAction) and [Add LineItem](ctp:api:type:CartAddLineItemAction) update action
 *	to change the shipping details.
 *	Since it is not possible for the API to infer how the overall change in the Line Item quantity should be distributed over the sub-quantities,
 *	the `shippingDetails` field is kept in its current state to avoid data loss.
 *
 *	To change the Line Item quantity and shipping details together,
 *	use this update action in combination with the [Set LineItem ShippingDetails](ctp:api:type:CartSetLineItemShippingDetailsAction) update action
 *	in a single Cart update command.
 *
 *	When the action applies to [LineItems](ctp:api:type:LineItem) with `ExternalTotal` [LineItemPriceMode](ctp:api:type:LineItemPriceMode),
 *	it will be changed to `ExternalPrice` and the existing `externalPrice` value, i.e. `LineItem.price`, will be retained.
 *	The LineItem total will be calculated by the system instead, so that the `externalTotalPrice` will be dropped.
 *
 *	This action is subject to [InventoryEntry](ctp:api:type:InventoryEntry) min/max restrictions when applicable. For more information, see [Quantity limits](/../api/carts-orders-overview#quantity-limits).
 *
 */

/**
 *	- When `External` [TaxMode](ctp:api:type:TaxMode) is changed to `Platform` or `Disabled`, all previously set external Tax Rates are removed.
 *	- When set to `Platform`, Line Items, Custom Line Items, and Shipping Method require a Tax Category with a Tax Rate for the Cart's `shippingAddress`.
 *
 */

/**
 *	This update action does not set any Cart field in particular, but it triggers several [Cart updates](/../api/carts-orders-overview#update-a-cart)
 *	to bring prices and discounts to the latest state. Those can become stale over time when no Cart updates have been performed for a while and
 *	prices on related Products have changed in the meanwhile.
 *
 *	If the `priceMode` of the [Product](ctp:api:type:Product) related to a Line Item is of `Embedded` [ProductPriceMode](ctp:api:type:ProductPriceModeEnum),
 *	the updated `price` of that [LineItem](ctp:api:type:LineItem) may not correspond to a Price in the `variant.prices` anymore.
 *
 */

/**
 *	An address can only be removed if it is not referenced in any [ItemShippingTarget](ctp:api:type:ItemShippingTarget) of the Cart.
 *
 */

/**
 *	The [LineItem](ctp:api:type:LineItem) price is updated as described in [Line Item price selection](/../api/pricing-and-discounts-overview#line-item-price-selection).
 *
 */

/**
 *	Updates the Business Unit on the Cart. The Cart must have an existing Business Unit assigned already.
 *
 */

/**
 *	Setting the country can lead to changes in the [LineItem](ctp:api:type:LineItem) prices.
 *
 */

/**
 *	Sets the recurrence information on the [CustomLineItem](ctp:api:type:CustomLineItem).
 *	If the Cart is already associated with a Recurring Order, this action will fail.
 *
 */

/**
 *	Number of days after the last modification before a Cart is deleted.
 *
 *	If a [ChangeSubscription](ctp:api:type:ChangeSubscription) exists for Carts, a [ResourceDeletedDeliveryPayload](ctp:api:type:ResourceDeletedDeliveryPayload) is sent.
 *
 */

/**
 *	Setting a distribution channel for a [LineItem](ctp:api:type:LineItem) can lead to an updated `price` as described in [Line Item price selection](/../api/pricing-and-discounts-overview#line-item-price-selection).
 *
 */

/**
 *	Sets the recurrence information on the [LineItem](ctp:api:type:LineItem).
 *	If the Cart is already associated with a Recurring Order, this action will fail.
 *
 */

/**
 *	Performing this action does not reserve stock. Stock is only reserved at Order creation if the [InventoryMode](ctp:api:type:InventoryMode) of the Cart is `TrackOnly` or `ReserveOnOrder`.
 *
 *	This action is subject to [InventoryEntry](ctp:api:type:InventoryEntry) min/max restrictions when applicable. For more information, see [Quantity limits](/../api/carts-orders-overview#quantity-limits).
 *
 */

/**
 *	Setting the shipping address also sets the [TaxRate](ctp:api:type:TaxRate) of Line Items and calculates the [TaxedPrice](ctp:api:type:TaxedPrice).
 *
 *	If a matching price cannot be found for the given shipping address during [Line Item price selection](/../api/pricing-and-discounts-overview#line-item-price-selection),
 *	a [MissingTaxRateForCountry](ctp:api:type:MissingTaxRateForCountryError) error is returned.
 *
 *	If you want to allow shipping to states inside a country that are not explicitly covered by a TaxRate,
 *	set the `countryTaxRateFallbackEnabled` field to `true` in the [CartsConfiguration](ctp:api:type:CartsConfiguration) by using
 *	the [Change CountryTaxRateFallbackEnabled](ctp:api:type:ProjectChangeCountryTaxRateFallbackEnabledAction) update action.
 *
 */

/**
 *	To set the Cart's Shipping Method the Cart must have the `Single` [ShippingMode](ctp:api:type:ShippingMode) and a `shippingAddress`.
 *
 */

/**
 *	Updates an address in `itemShippingAddresses` by keeping the Address `key`.
 *
 */

/**
 *	Adding an address to the Customer produces the [CustomerAddressAdded](ctp:api:type:CustomerAddressAddedMessage) Message.
 *
 */

/**
 *	Adds an address from the `addresses` array to `billingAddressIds`. Either `addressId` or `addressKey` is required.
 *
 */

/**
 *	Adds an address from the `addresses` array to `shippingAddressIds`. Either `addressId` or `addressKey` is required.
 *
 */

/**
 *	Changing an address of the Customer produces the [CustomerAddressChanged](ctp:api:type:CustomerAddressChangedMessage) Message.
 *
 *	Either `addressId` or `addressKey` is required.
 *
 */

/**
 *	Changing the email of the Customer produces the [CustomerEmailChanged](ctp:api:type:CustomerEmailChangedMessage) Message.
 *
 */

/**
 *	Removing an address of the Customer produces the [CustomerAddressRemoved](ctp:api:type:CustomerAddressRemovedMessage) Message.
 *
 *	Either `addressId` or `addressKey` is required.
 *
 */

/**
 *	Removes an existing billing address from `billingAddressesIds`.
 *	If the billing address is the default billing address, the `defaultBillingAddressId` is unset. Either `addressId` or `addressKey` is required.
 *
 */

/**
 *	Removes an existing shipping address from `shippingAddressesIds`.
 *	If the shipping address is the default shipping address, the `defaultShippingAddressId` is unset. Either `addressId` or `addressKey` is required.
 *
 */

/**
 *	Setting the `companyName` field on the Customer produces the [CustomerCompanyNameSet](ctp:api:type:CustomerCompanyNameSetMessage) Message.
 *
 */

/**
 *	Adding a Custom Field to a Customer generates the [CustomerCustomFieldAdded](ctp:api:type:CustomerCustomFieldAddedMessage) Message, removing one generates the [CustomerCustomFieldRemoved](ctp:api:type:CustomerCustomFieldRemovedMessage) Message, and updating an existing one generates the [CustomerCustomFieldChanged](ctp:api:type:CustomerCustomFieldChangedMessage) Message.
 *
 */

/**
 *	Adding or updating a Custom Type on a Customer generates the [CustomerCustomTypeSet](ctp:api:type:CustomerCustomTypeSetMessage) Message, removing one generates the [CustomerCustomTypeRemoved](ctp:api:type:CustomerCustomTypeRemovedMessage) Message.
 *
 */

/**
 *	Setting the date of birth of the Customer produces the [CustomerDateOfBirthSet](ctp:api:type:CustomerDateOfBirthSetMessage) Message.
 *
 */

/**
 *	Sets the default billing address from `addresses`.
 *	If the address is not currently a billing address, it is added to `billingAddressIds`. Either `addressId` or `addressKey` is required.
 *
 */

/**
 *	Sets the default shipping address from `addresses`.
 *	If the address is not currently a shipping address, it is added to `shippingAddressIds`. Either `addressId` or `addressKey` is required.
 *
 */

/**
 *	Setting the first name of the Customer produces the [CustomerFirstNameSet](ctp:api:type:CustomerFirstNameSetMessage) Message.
 *
 */

/**
 *	Setting the last name of the Customer produces the [CustomerLastNameSet](ctp:api:type:CustomerLastNameSetMessage) Message.
 *
 */

/**
 *	Setting the title of the Customer produces the [CustomerTitleSetMessage](ctp:api:type:CustomerTitleSetMessage).
 *
 */

/**
 *	Adding a Transaction to a Payment generates the [PaymentTransactionAdded](ctp:api:type:PaymentTransactionAddedMessage) Message.
 *	Once a Transaction is added to the Payment, it can no longer be updated or deleted using the My Payments API.
 *
 */

/**
 *	Can be used to update the Payment if a customer changes the [Cart](ctp:api:type:Cart), or adds or removes a [CartDiscount](ctp:api:type:CartDiscount) during checkout.
 *
 */

/**
 *	Adding a Custom Field to a PaymentMethodInfo generates the [PaymentMethodInfoCustomFieldAdded](ctp:api:type:PaymentMethodInfoCustomFieldAddedMessage) Message, removing one generates the [PaymentMethodInfoCustomFieldRemoved](ctp:api:type:PaymentMethodInfoCustomFieldRemovedMessage) Message, and updating an existing one generates the [PaymentMethodInfoCustomFieldChanged](ctp:api:type:PaymentMethodInfoCustomFieldChangedMessage) Message.
 *
 */

/**
 *	Adding or updating a Custom Type on a PaymentMethodInfo generates the [PaymentMethodInfoCustomTypeSet](ctp:api:type:PaymentMethodInfoCustomTypeSetMessage) Message, removing one generates the [PaymentMethodInfoCustomTypeRemoved](ctp:api:type:PaymentMethodInfoCustomTypeRemovedMessage) Message.
 *
 */

/**
 *	This action generates the [PaymentMethodInfoInterfaceAccountSet](ctp:api:type:PaymentMethodInfoInterfaceAccountSetMessage) Message.
 *
 */

/**
 *	When accepting, declining, or renegotiating [B2B Quotes](/../api/associates-overview#b2b-resources), the Customer must have the `AcceptMyQuotes`, `DeclineMyQuotes`, or `RenegotiateMyQuotes` [Permission](ctp:api:type:Permission), respectively. If the required [Permission](/projects/associate-roles#permission) is missing, an [AssociateMissingPermission](/errors#associatemissingpermission) error is returned.
 */

/**
 *	Transitions the `quoteRequestState` of the Quote Request to `Cancelled`. Can only be used when the Quote Request is in state `Submitted`.
 *
 */

/**
 *	Number of days after the last modification before a Shopping List is deleted.
 *
 */

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 *	Possible values for the `customType` property on [simple expressions](/../api/projects/order-search#simple-expressions) indicating the data type of the `field`.
 */
let OrderSearchCustomTypeValues = /*#__PURE__*/function (OrderSearchCustomTypeValues) {
  OrderSearchCustomTypeValues["BooleanType"] = "BooleanType";
  OrderSearchCustomTypeValues["DateTimeType"] = "DateTimeType";
  OrderSearchCustomTypeValues["DateType"] = "DateType";
  OrderSearchCustomTypeValues["EnumType"] = "EnumType";
  OrderSearchCustomTypeValues["LocalizedEnumType"] = "LocalizedEnumType";
  OrderSearchCustomTypeValues["LocalizedStringType"] = "LocalizedStringType";
  OrderSearchCustomTypeValues["NumberType"] = "NumberType";
  OrderSearchCustomTypeValues["SetTypeDateTimeType"] = "SetType.DateTimeType";
  OrderSearchCustomTypeValues["SetTypeDateType"] = "SetType.DateType";
  OrderSearchCustomTypeValues["SetTypeEnumType"] = "SetType.EnumType";
  OrderSearchCustomTypeValues["SetTypeLocalizedEnumType"] = "SetType.LocalizedEnumType";
  OrderSearchCustomTypeValues["SetTypeLocalizedStringType"] = "SetType.LocalizedStringType";
  OrderSearchCustomTypeValues["SetTypeNumberType"] = "SetType.NumberType";
  OrderSearchCustomTypeValues["SetTypeStringType"] = "SetType.StringType";
  OrderSearchCustomTypeValues["SetTypeTimeType"] = "SetType.TimeType";
  OrderSearchCustomTypeValues["StringType"] = "StringType";
  OrderSearchCustomTypeValues["TimeType"] = "TimeType";
  return OrderSearchCustomTypeValues;
}({});
let OrderSearchMatchTypeValues = /*#__PURE__*/function (OrderSearchMatchTypeValues) {
  OrderSearchMatchTypeValues["All"] = "all";
  OrderSearchMatchTypeValues["Any"] = "any";
  return OrderSearchMatchTypeValues;
}({});
let OrderSearchSortModeValues = /*#__PURE__*/function (OrderSearchSortModeValues) {
  OrderSearchSortModeValues["Avg"] = "avg";
  OrderSearchSortModeValues["Max"] = "max";
  OrderSearchSortModeValues["Min"] = "min";
  OrderSearchSortModeValues["Sum"] = "sum";
  return OrderSearchSortModeValues;
}({});
let OrderSearchSortOrderValues = /*#__PURE__*/function (OrderSearchSortOrderValues) {
  OrderSearchSortOrderValues["Asc"] = "asc";
  OrderSearchSortOrderValues["Desc"] = "desc";
  return OrderSearchSortOrderValues;
}({});

/**
 *	Custom Line Items contain generic user-defined items that are not linked to Products.
 *
 */

/**
 *	Contains information on how items are shipped to Customers, for example, a delivery note.
 *
 */

/**
 *	Represents a snapshot of a Product Variant at the time it was imported with the Order. The Product Variant can be specified by providing a `productId` and `variant.id`, or by providing a `variant.sku`.
 *
 */

/**
 *	A snapshot of an Order at the time it was imported.
 *
 */

/**
 *	[PagedQueryResult](/../api/general-concepts#pagedqueryresult) with `results` containing an array of [Order](ctp:api:type:Order).
 *
 */

/**
 *	[Reference](ctp:api:type:Reference) to an [Order](ctp:api:type:Order).
 *
 */

/**
 *	Indicates the state of the Order.
 *
 */
let OrderStateValues = /*#__PURE__*/function (OrderStateValues) {
  OrderStateValues["Cancelled"] = "Cancelled";
  OrderStateValues["Complete"] = "Complete";
  OrderStateValues["Confirmed"] = "Confirmed";
  OrderStateValues["Open"] = "Open";
  return OrderStateValues;
}({});

/**
 *	Information regarding the appearance, content, and shipment of a Parcel.
 *
 */

/**
 *	Indicates the payment status for the Order.
 *
 */
let PaymentStateValues = /*#__PURE__*/function (PaymentStateValues) {
  PaymentStateValues["BalanceDue"] = "BalanceDue";
  PaymentStateValues["CreditOwed"] = "CreditOwed";
  PaymentStateValues["Failed"] = "Failed";
  PaymentStateValues["Paid"] = "Paid";
  PaymentStateValues["Pending"] = "Pending";
  return PaymentStateValues;
}({});

/**
 *	Contains the Product Variant to be used in the [LineItemImportDraft](ctp:api:type:LineItemImportDraft).
 *
 */

/**
 *	Stores information about returns connected to an Order.
 *
 */

let ReturnPaymentStateValues = /*#__PURE__*/function (ReturnPaymentStateValues) {
  ReturnPaymentStateValues["Initial"] = "Initial";
  ReturnPaymentStateValues["NonRefundable"] = "NonRefundable";
  ReturnPaymentStateValues["NotRefunded"] = "NotRefunded";
  ReturnPaymentStateValues["Refunded"] = "Refunded";
  return ReturnPaymentStateValues;
}({});
let ReturnShipmentStateValues = /*#__PURE__*/function (ReturnShipmentStateValues) {
  ReturnShipmentStateValues["Advised"] = "Advised";
  ReturnShipmentStateValues["BackInStock"] = "BackInStock";
  ReturnShipmentStateValues["Returned"] = "Returned";
  ReturnShipmentStateValues["Unusable"] = "Unusable";
  return ReturnShipmentStateValues;
}({});
/**
 *	Indicates the shipment status of the Order.
 *
 */
let ShipmentStateValues = /*#__PURE__*/function (ShipmentStateValues) {
  ShipmentStateValues["Backorder"] = "Backorder";
  ShipmentStateValues["Canceled"] = "Canceled";
  ShipmentStateValues["Delayed"] = "Delayed";
  ShipmentStateValues["Delivered"] = "Delivered";
  ShipmentStateValues["Partial"] = "Partial";
  ShipmentStateValues["Pending"] = "Pending";
  ShipmentStateValues["Ready"] = "Ready";
  ShipmentStateValues["Shipped"] = "Shipped";
  return ShipmentStateValues;
}({});

/**
 *	Becomes the `shippingInfo` of the imported Order.
 *
 */

/**
 *	Contains synchronization activity information of the Order (like export or import).
 *
 */

/**
 *	Information that helps track a Parcel.
 *
 */

/**
 *	A [Delivery](ctp:api:type:Delivery) can only be added to an [Order](ctp:api:type:Order) if
 *	its `shippingInfo` (for `shippingMode` = `Single`), or its `shipping` (for `shippingMode` = `Multiple`) exists.
 *
 *	Produces the [Delivery Added](ctp:api:type:DeliveryAddedMessage) Message.
 *
 */

/**
 *	Adds an address to an Order when shipping to multiple addresses is desired.
 *
 */

/**
 *	To add a Parcel, at least one [Delivery](ctp:api:type:Delivery) must exist.
 *
 *	Produces the [Parcel Added To Delivery](ctp:api:type:ParcelAddedToDeliveryMessage) Message.
 *
 */

/**
 *	Produces the [Return Info Added](ctp:api:type:ReturnInfoAddedMessage) Message.
 *
 */

/**
 *	Produces the [Order State Changed](ctp:api:type:OrderStateChangedMessage) Message.
 *
 */

/**
 *	Produces the [Order Payment State Changed](ctp:api:type:OrderPaymentStateChangedMessage) Message.
 *
 */

/**
 *	Produces the [Order Shipment State Changed](ctp:api:type:OrderShipmentStateChangedMessage) Message.
 *
 */

/**
 *	The import of States does not follow any predefined rules and should be only used if no transitions are defined.
 *	The `quantity` in the [ItemStates](ctp:api:type:ItemState) must match the sum of all Custom Line Item states' quantities.
 *
 */

/**
 *	The import of States does not follow any predefined rules and should be only used if no transitions are defined.
 *	The `quantity` in the [ItemStates](ctp:api:type:ItemState) must match the sum of all Line Items states' quantities.
 *
 */

/**
 *	Produces the [DeliveryRemoved](ctp:api:type:DeliveryRemovedMessage) Message.
 *
 */

/**
 *	An address can only be removed if it is not referenced in any [ItemShippingTarget](ctp:api:type:ItemShippingTarget) of the Cart.
 *	In such case, change the Line Item shipping address to a different `addressKey` first using the [Set LineItemShippingDetails](ctp:api:type:OrderSetLineItemShippingDetailsAction) update action, before you remove the obsolete address.
 *
 */

/**
 *	Produces the [ParcelRemovedFromDelivery](ctp:api:type:ParcelRemovedFromDeliveryMessage) Message.
 *
 */

/**
 *	This action updates the `billingAddress` on the Order, but it does not change the billing address on the referenced [Cart](ctp:api:type:Cart) from which the Order is created.
 *
 *	Produces the [Order Billing Address Set](ctp:api:type:OrderBillingAddressSetMessage) Message.
 *
 */

/**
 *	Updates the Business Unit on the Order. Setting the Order's `businessUnit` does not recalculate prices or discounts on the Order.
 *
 *	Produces the [OrderBusinessUnitSet](ctp:api:type:OrderBusinessUnitSetMessage) Message.
 *
 */

/**
 *	This action updates the `customerEmail` on the Order, but it does not change the Customer email on the [Cart](ctp:api:type:Cart) the Order has been created from.
 *
 *	Produces the [Order Customer Email Set](ctp:api:type:OrderCustomerEmailSetMessage) Message.
 *
 */

/**
 *	Setting the Order's `customerId` does not recalculate prices or discounts on the Order.
 *	If the Customer belongs to a Customer Group, `customerGroup` on the [Order](ctp:api:type:Order) is updated automatically.
 *
 *	Produces the [OrderCustomerSet](ctp:api:type:OrderCustomerSetMessage) Message.
 *
 */

/**
 *	Produces the [DeliveryAddressSet](ctp:api:type:DeliveryAddressSetMessage) Message.
 *
 */

/**
 *	Produces the [Delivery Items Updated](ctp:api:type:DeliveryItemsUpdatedMessage) Message.
 *
 */

/**
 *	Produces the [ParcelItemsUpdated](ctp:api:type:ParcelItemsUpdatedMessage) Message.
 *
 */

/**
 *	Produces the [ParcelMeasurementsUpdated](ctp:api:type:ParcelMeasurementsUpdatedMessage) Message.
 *
 */

/**
 *	Produces the [ParcelTrackingDataUpdated](ctp:api:type:ParcelTrackingDataUpdatedMessage) Message.
 *
 */

/**
 *	Produces the [PurchaseOrderNumberSet](ctp:api:type:OrderPurchaseOrderNumberSetMessage) Message.
 *
 */

/**
 *	Produces the [Return Info Set](ctp:api:type:ReturnInfoSetMessage) Message.
 *
 */

/**
 *	To set a [ReturnPaymentState](ctp:api:type:ReturnPaymentState), the [Order](ctp:api:type:Order) `returnInfo` must have at least one [ReturnItem](ctp:api:type:ReturnItem).
 *
 */

/**
 *	To set a `ReturnShipmentState`, the [Order](ctp:api:type:Order) `returnInfo` must have at least one [ReturnItem](ctp:api:type:ReturnItem).
 *
 *	Produces the [Order Return Shipment State Changed](ctp:api:type:OrderReturnShipmentStateChangedMessage) Message.
 *
 */

/**
 *	This action updates the `shippingAddress` on the Order, but it does not change the shipping address on the referenced [Cart](ctp:api:type:Cart) from which the Order is created.
 *	Also, it does not recalculate the Cart as taxes may not fit to the shipping address anymore.
 *
 *	Produces the [Order Shipping Address Set](ctp:api:type:OrderShippingAddressSetMessage) Message.
 *
 */

/**
 *	This action sets, overwrites, or removes any existing Custom Type and Custom Fields for the Order's `shippingMethod` or `shipping`.
 *
 */

/**
 *	Sets the [Store](ctp:api:type:Store) the Order is assigned to.
 *	It should be used to migrate Orders to a new Store.
 *	No validations are performed (such as that the Customer is allowed to create Orders in the Store).
 *
 *	Produces the [Order Store Set](ctp:api:type:OrderStoreSetMessage) Message.
 *	Returns a `400` error if `store` references the same Store the Order is currently assigned to, including if you try to remove the value when no Store is currently assigned.
 *
 */

/**
 *	Produces the [Custom Line Item State Transition](ctp:api:type:CustomLineItemStateTransitionMessage) Message.
 *
 */

/**
 *	Produces the [Line Item State Transition](ctp:api:type:LineItemStateTransitionMessage) Message.
 *
 */

/**
 *	If the existing [State](ctp:api:type:State) has set `transitions`, there must be a direct transition to the new State.
 *	If `transitions` is not set, no validation is performed.
 *
 *	This update action produces the [Order State Transition](ctp:api:type:OrderStateTransitionMessage) Message.
 *
 */

/**
 *	Updates an address in `itemShippingAddresses` by keeping the Address `key`.
 *
 */

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 *	Represents a snapshot of the PaymentMethod data used for a Payment.
 *
 */

/**
 *	[PagedQueryResult](/../api/general-concepts#pagedqueryresult) with `results` containing an array of [Payment](ctp:api:type:Payment).
 *
 */

/**
 *	[Reference](ctp:api:type:Reference) to a [Payment](ctp:api:type:Payment).
 *
 */

/**
 *	[ResourceIdentifier](ctp:api:type:ResourceIdentifier) of a [Payment](ctp:api:type:Payment). Either `id` or `key` is required. If both are set, an [InvalidJsonInput](/../api/errors#invalidjsoninput) error is returned.
 *
 */

/**
 *	Represents a financial transaction typically created as a result of a notification from the payment service.
 *
 */

/**
 *	Transactions can be in one of the following States:
 *
 */
let TransactionStateValues = /*#__PURE__*/function (TransactionStateValues) {
  TransactionStateValues["Failure"] = "Failure";
  TransactionStateValues["Initial"] = "Initial";
  TransactionStateValues["Pending"] = "Pending";
  TransactionStateValues["Success"] = "Success";
  return TransactionStateValues;
}({});
let TransactionTypeValues = /*#__PURE__*/function (TransactionTypeValues) {
  TransactionTypeValues["Authorization"] = "Authorization";
  TransactionTypeValues["CancelAuthorization"] = "CancelAuthorization";
  TransactionTypeValues["Charge"] = "Charge";
  TransactionTypeValues["Chargeback"] = "Chargeback";
  TransactionTypeValues["Refund"] = "Refund";
  return TransactionTypeValues;
}({});

/**
 *	Adding a Payment interaction generates the [PaymentInteractionAdded](ctp:api:type:PaymentInteractionAddedMessage) Message.
 *
 */

/**
 *	Adding a Transaction to a Payment generates the [PaymentTransactionAdded](ctp:api:type:PaymentTransactionAddedMessage) Message.
 *
 */

/**
 *	Can be used to update the Payment if a customer changes the [Cart](ctp:api:type:Cart), or adds or removes a [CartDiscount](ctp:api:type:CartDiscount) during checkout.
 *
 */

/**
 *	Changing the [TransactionState](ctp:api:type:TransactionState) generates the [PaymentTransactionStateChanged](ctp:api:type:PaymentTransactionStateChangedMessage) Message.
 *
 */

/**
 *	If the Payment is already associated with a Customer, an [InvalidOperation](ctp:api:type:InvalidOperationError) error is returned.
 *
 */

/**
 *	This action generates the [PaymentInterfaceIdSet](ctp:api:type:PaymentInterfaceIdSetMessage) Message.
 *
 */

/**
 *	This action lets you update multiple fields of a PaymentMethodInfo in one operation. Only fields with explicitly provided values will be updated.
 *
 */

/**
 *	Adding a Custom Field to a PaymentMethodInfo generates the [PaymentMethodInfoCustomFieldAdded](ctp:api:type:PaymentMethodInfoCustomFieldAddedMessage) Message, removing one generates the [PaymentMethodInfoCustomFieldRemoved](ctp:api:type:PaymentMethodInfoCustomFieldRemovedMessage) Message, and updating an existing one generates the [PaymentMethodInfoCustomFieldChanged](ctp:api:type:PaymentMethodInfoCustomFieldChangedMessage) Message.
 *
 */

/**
 *	Adding or updating a Custom Type on a PaymentMethodInfo generates the [PaymentMethodInfoCustomTypeSet](ctp:api:type:PaymentMethodInfoCustomTypeSetMessage) Message, removing one generates the [PaymentMethodInfoCustomTypeRemoved](ctp:api:type:PaymentMethodInfoCustomTypeRemovedMessage) Message.
 *
 */

/**
 *	This action generates the [PaymentMethodInfoInterfaceAccountSet](ctp:api:type:PaymentMethodInfoInterfaceAccountSetMessage) Message.
 *
 */

/**
 *	This action generates the [PaymentMethodInfoInterfaceSet](ctp:api:type:PaymentMethodInfoInterfaceSetMessage) Message.
 *
 */

/**
 *	This action generates the [PaymentMethodInfoMethodSet](ctp:api:type:PaymentMethodInfoMethodSetMessage) Message.
 *
 */

/**
 *	This action generates the [PaymentMethodInfoNameSet](ctp:api:type:PaymentMethodInfoNameSetMessage) Message.
 *
 */

/**
 *	This action generates the [PaymentMethodInfoTokenSet](ctp:api:type:PaymentMethodInfoTokenSetMessage) Message.
 *
 */

/**
 *	Produces the [PaymentStatusInterfaceCodeSet](ctp:api:type:PaymentStatusInterfaceCodeSetMessage) Message.
 */

/**
 *	If the Payment has no current [State](ctp:api:type:State), `initial` must be `true` for the new State.
 *	If the existing State has transitions set, the new State must be a valid transition.
 *	If the existing State has no transitions set, no validations are performed when transitioning to the new State.
 *
 *	Transitioning the State of a Payment produces the [PaymentStatusStateTransition](ctp:api:type:PaymentStatusStateTransitionMessage) Message.
 *
 */

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 *	[PagedQueryResult](/../api/general-concepts#pagedqueryresult) with `results` containing an array of [PaymentMethod](ctp:api:type:PaymentMethod).
 *
 */

/**
 *	[Reference](ctp:api:type:Reference) to a [PaymentMethod](ctp:api:type:PaymentMethod).
 *
 */

let PaymentMethodStatusValues = /*#__PURE__*/function (PaymentMethodStatusValues) {
  PaymentMethodStatusValues["Active"] = "Active";
  PaymentMethodStatusValues["Inactive"] = "Inactive";
  return PaymentMethodStatusValues;
}({});

/**
 *	Adding a Custom Field to a PaymentMethod generates the [PaymentMethodCustomFieldAdded](ctp:api:type:PaymentMethodCustomFieldAddedMessage) Message, removing one generates the [PaymentMethodCustomFieldRemoved](ctp:api:type:PaymentMethodCustomFieldRemovedMessage) Message, and updating an existing one generates the [PaymentMethodCustomFieldChanged](ctp:api:type:PaymentMethodCustomFieldChangedMessage) Message.
 *
 */

/**
 *	Adding or updating a Custom Type on a PaymentMethod generates the [PaymentMethodCustomTypeSet](ctp:api:type:PaymentMethodCustomTypeSetMessage) Message, removing one generates the [PaymentMethodCustomTypeRemoved](ctp:api:type:PaymentMethodCustomTypeRemovedMessage) Message.
 *
 */

/**
 *	This action generates the [PaymentMethodDefaultSet](ctp:api:type:PaymentMethodDefaultSetMessage) Message.
 *
 *	An inactive Payment Method cannot be set as the default, and the action will return an [InvalidOperation](ctp:api:type:InvalidOperationError) error.
 *
 */

/**
 *	This action generates the [PaymentMethodInterfaceAccountSet](ctp:api:type:PaymentMethodInterfaceAccountSetMessage) Message.
 *
 */

/**
 *	This action generates the [PaymentMethodKeySet](ctp:api:type:PaymentMethodKeySetMessage) Message.
 *
 */

/**
 *	This action generates the [PaymentMethodMethodSet](ctp:api:type:PaymentMethodMethodSetMessage) Message.
 *
 */

/**
 *	This update action generates the [PaymentMethodNameSet](ctp:api:type:PaymentMethodNameSetMessage) Message.
 *
 */

/**
 *	This action generates the [PaymentMethodPaymentInterfaceSet](ctp:api:type:PaymentMethodPaymentInterfaceSetMessage) Message.
 *
 */

/**
 *	This action generates the [PaymentMethodPaymentMethodStatusSet](ctp:api:type:PaymentMethodPaymentMethodStatusSetMessage) Message.
 *
 *	A default Payment Method cannot be set as inactive, and the action will return an [InvalidOperation](ctp:api:type:InvalidOperationError) error.
 *
 */

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 *	JSON object where the keys are [Category](ctp:api:type:Category) `id`, and the values are order hint values: strings representing a number between `0` and `1`, but not ending in `0`. Order hints allow controlling the order of Products and how they appear in Categories. Products without order hints have an order score below `0`. Order hints are not unique. If a subset of Products have the same value for order hint in a specific category, the behavior is undetermined.
 */

let FacetTypesValues = /*#__PURE__*/function (FacetTypesValues) {
  FacetTypesValues["Filter"] = "filter";
  FacetTypesValues["Range"] = "range";
  FacetTypesValues["Terms"] = "terms";
  return FacetTypesValues;
}({});

/**
 *	An abstract sellable good with a set of Attributes defined by a Product Type.
 *	Products themselves are not sellable. Instead, they act as a parent structure for Product Variants.
 *	Each Product must have at least one Product Variant, which is called the Master Variant.
 *	A single Product representation contains the _current_ and the _staged_ representation of its product data.
 *
 */

/**
 *	Contains the `current` and `staged` [ProductData](ctp:api:type:ProductData).
 *
 */

/**
 *	Contains all the data of a Product and its Product Variants.
 *
 */

/**
 *	[PagedQueryResult](/../api/general-concepts#pagedqueryresult) with `results` containing an array of [Product](ctp:api:type:Product).
 *
 */

/**
 *	This mode determines the type of Prices used for [price selection](/../api/pricing-and-discounts-overview#price-selection) by Line Items and Products.
 *	For more information about the difference between the Prices, see [Pricing](/../api/pricing-and-discounts-overview).
 *
 */
let ProductPriceModeEnumValues = /*#__PURE__*/function (ProductPriceModeEnumValues) {
  ProductPriceModeEnumValues["Embedded"] = "Embedded";
  ProductPriceModeEnumValues["Standalone"] = "Standalone";
  return ProductPriceModeEnumValues;
}({});

/**
 *	The response returned to a [Product Projection Search](/../api/projects/product-projection-search#product-projection-search) request.
 *	The object contains the [query results](/../api/projects/product-projection-search#query-results) with Product Projections where at least one ProductVariant matches the search query, as well as the [facet results](/../api/projects/product-projection-search#facet-results), if requested.
 *
 */

/**
 *	[Reference](ctp:api:type:Reference) to a [Product](ctp:api:type:Product).
 *
 */

/**
 *	[ResourceIdentifier](ctp:api:type:ResourceIdentifier) to a [Product](ctp:api:type:Product). Either `id` or `key` is required. If both are set, an [InvalidJsonInput](/../api/errors#invalidjsoninput) error is returned.
 *
 */

/**
 *	A concrete sellable good for which inventory can be tracked. Product Variants are generally mapped to specific SKUs.
 *
 */

/**
 *	The [InventoryEntry](ctp:api:type:InventoryEntry) information of the Product Variant. If there is a supply [Channel](ctp:api:type:Channel) for the InventoryEntry, then `channels` is returned. If not, then `isOnStock`, `restockableInDays`, and `availableQuantity` are returned.
 *
 */

/**
 *	JSON object where the keys are supply [Channel](/projects/channels) `id`, and the values are [ProductVariantChannelAvailability](/projects/products#productvariantchannelavailability).
 *
 */

/**
 *	Creates a Product Variant when included in the `masterVariant` and `variants` fields of the [ProductDraft](ctp:api:type:ProductDraft).
 *
 */

/**
 *	Search keywords are JSON objects primarily used by [Search Term Suggestions](/projects/search-term-suggestions), but are also considered for a [full text search](/projects/product-projection-search#full-text-search) in the Product Projection Search API.
 *	The keys are of type [Locale](ctp:api:type:Locale), and the values are an array of [SearchKeyword](ctp:api:type:SearchKeyword).
 *
 */

/**
 *	Define arbitrary tokens that are used to match the input.
 *
 */

/**
 *	Data type to which the facet is applied.
 *
 */
let TermFacetResultTypeValues = /*#__PURE__*/function (TermFacetResultTypeValues) {
  TermFacetResultTypeValues["Boolean"] = "boolean";
  TermFacetResultTypeValues["Date"] = "date";
  TermFacetResultTypeValues["Datetime"] = "datetime";
  TermFacetResultTypeValues["Number"] = "number";
  TermFacetResultTypeValues["Text"] = "text";
  TermFacetResultTypeValues["Time"] = "time";
  return TermFacetResultTypeValues;
}({});

/**
 *	Creates tokens by splitting the `text` field in [SearchKeyword](ctp:api:type:SearchKeyword) by whitespaces.
 *
 */

/**
 *	Either `variantId` or `sku` is required.
 *
 */

/**
 *	Either `variantId` or `sku` is required. Produces the [ProductImageAdded](/projects/messages/product-catalog-messages#product-image-added) Message.
 *
 */

/**
 *	Adds the given Price to the `prices` array of the [ProductVariant](ctp:api:type:ProductVariant).
 *	Either `variantId` or `sku` is required.
 *
 */

/**
 *	Produces the [ProductAddedToCategory](/projects/messages/product-catalog-messages#product-added-to-category) Message.
 */

/**
 *	Either `variantId` or `sku` is required. The Asset to update must be specified using either `assetId` or `assetKey`.
 *
 */

/**
 *	Either `variantId` or `sku` is required.
 *
 */

/**
 *	Assigns the specified Product Variant to the `masterVariant` and removes the same from `variants` at the same time. The current Master Variant becomes part of the `variants` array.
 *	Either `variantId` or `sku` is required.
 *
 */

/**
 *	Produces the [ProductSlugChanged](ctp:api:type:ProductSlugChangedMessage) Message.
 */

/**
 *	Either `variantId` or `sku` is required.
 *
 */

/**
 *	Publishes product data from the Product's staged projection to its current projection.
 *	Produces the [ProductPublished](ctp:api:type:ProductPublishedMessage) Message.
 */

/**
 *	Either `variantId` or `sku` is required. The Asset to remove must be specified using either `assetId` or `assetKey`.
 *
 */

/**
 *	Produces the [ProductRemovedFromCategory](ctp:api:type:ProductRemovedFromCategoryMessage) Message.
 */

/**
 *	Removes a Product image and deletes it from the Content Delivery Network (CDN) if it had been [uploaded to our CDN](/../api/projects/products#upload-product-image).
 *	External images will not be deleted.
 *	The API deletes the removed image from the CDN in an [eventual consistent](/../api/general-concepts#eventual-consistency) way.
 *	Either `variantId` or `sku` is required.
 *
 */

/**
 *	Either `id` or `sku` is required.
 *	Produces the [ProductVariantDeleted](ctp:api:type:ProductVariantDeletedMessage) Message.
 *	If the Product Variant to remove is part of a [ProductSelectionAssignment](ctp:api:type:ProductSelectionAssignment)
 *	its SKU will be automatically removed from the respective [ProductVariantSelection](ctp:api:type:ProductVariantSelection).
 *
 */

/**
 *	Reverts the staged version of a Product to the current version. Produces the [ProductRevertedStagedChanges](ctp:api:type:ProductRevertedStagedChangesMessage) Message.
 *
 */

/**
 *	Reverts the staged version of a ProductVariant to the current version.
 *
 */

/**
 *	Either `variantId` or `sku` is required. The [Asset](ctp:api:type:Asset) to update must be specified using either `assetId` or `assetKey`.
 *
 */

/**
 *	Either `variantId` or `sku` is required. The [Asset](ctp:api:type:Asset) to update must be specified using either `assetId` or `assetKey`.
 *
 */

/**
 *	Either `variantId` or `sku` is required. The [Asset](ctp:api:type:Asset) to update must be specified using either `assetId` or `assetKey`.
 *
 */

/**
 *	Either `variantId` or `sku` is required.
 *
 */

/**
 *	Either `variantId` or `sku` is required. The [Asset](ctp:api:type:Asset) to update must be specified using either `assetId` or `assetKey`.
 *
 */

/**
 *	Either `variantId` or `sku` is required. The Asset to update must be specified using either `assetId` or `assetKey`.
 *
 */

/**
 *	Either `variantId` or `sku` is required.
 *
 */

/**
 *	Adds, removes, or changes a Variant Attribute in all Product Variants at the same time.
 *	This action is useful for setting values for Attributes with the [Constraint](ctp:api:type:AttributeConstraintEnum) `SameForAll`.
 */

/**
 *	Produces the [ProductPriceExternalDiscountSet](ctp:api:type:ProductPriceExternalDiscountSetMessage) Message.
 *
 */

/**
 *	Either `variantId` or `sku` is required.
 *
 */

/**
 *	Sets the key of an [Embedded Price](ctp:api:type:Price). Produces the [ProductPriceKeySet](ctp:api:type:ProductPriceKeySetMessage) Message.
 *
 */

/**
 *	Controls whether the Prices of a Product Variant are embedded into the Product or standalone.
 *
 */

/**
 *	Either `variantId` or `sku` is required.
 *
 */

/**
 *	Either `variantId` or `sku` is required.
 *
 */

/**
 *	SKU cannot be changed or removed if it is associated with an [InventoryEntry](ctp:api:type:InventoryEntry).
 *	If the SKU to set or unset is part of a [ProductSelectionAssignment](ctp:api:type:ProductSelectionAssignment)
 *	it will be automatically added or removed from the respective [ProductVariantSelection](ctp:api:type:ProductVariantSelection).
 *
 */

/**
 *	Cannot be staged. Published Products are immediately updated.
 *
 */

/**
 *	If the existing [State](ctp:api:type:State) has set `transitions`, there must be a direct transition to the new State. If `transitions` is not set, no validation is performed. Produces the [ProductStateTransition](ctp:api:type:ProductStateTransitionMessage) Message.
 *
 */

/**
 *	Removes the current [projection](/../api/projects/productProjections#current--staged) of the Product. The staged projection is unaffected. To retrieve unpublished Products, the `staged` parameter must be set to `false` when [querying](ctp:api:endpoint:/{projectKey}/product-projections:GET)/[searching](/projects/product-projection-search#product-projection-search) Product Projections. Produces the [ProductUnpublished](ctp:api:type:ProductUnpublishedMessage) Message.
 *
 *	When a Product is unpublished, any associated Line Items already present in a Cart remain unaffected and can still be ordered. To prevent this, do the following:
 *
 *	- If the Product uses Embedded Prices, [remove the Embedded Prices](ctp:api:type:ProductRemovePriceAction) from the unpublished Product.
 *	- If the Product uses Standalone Prices, [inactivate](ctp:api:type:StandalonePriceChangeActiveAction) or [delete](/projects/standalone-prices#delete-standaloneprice) the Standalone Prices.
 *
 */

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 *	The query parameters used for [data integration with Product Projection parameters](/../api/projects/product-search#with-product-projection-parameters).
 *
 */

let ProductSearchFacetCountLevelEnumValues = /*#__PURE__*/function (ProductSearchFacetCountLevelEnumValues) {
  ProductSearchFacetCountLevelEnumValues["Products"] = "products";
  ProductSearchFacetCountLevelEnumValues["Variants"] = "variants";
  return ProductSearchFacetCountLevelEnumValues;
}({});
let ProductSearchFacetDistinctBucketSortByValues = /*#__PURE__*/function (ProductSearchFacetDistinctBucketSortByValues) {
  ProductSearchFacetDistinctBucketSortByValues["Count"] = "count";
  ProductSearchFacetDistinctBucketSortByValues["Key"] = "key";
  return ProductSearchFacetDistinctBucketSortByValues;
}({});

/**
 *	Values for `from` and `to` must be a number or [DateTime](ctp:api:type:DateTime).
 */

/**
 *	Result of a [distinct facet](/../api/projects/product-search#distinct-facets) or a [ranges facet](/../api/projects/product-search#ranges-facets).
 *
 */

/**
 *	Result of a [count facet](/../api/projects/product-search#count-facets).
 *
 */

/**
 *	Result of a [stats facet](/../api/projects/product-search#stats-facets).
 *	The data type of `min` `max`, `mean`, and `sum` matches the data type of the `field` in the [facet expression](ctp:api:type:ProductSearchFacetStatsExpression).
 *
 */

let ProductSearchFacetScopeEnumValues = /*#__PURE__*/function (ProductSearchFacetScopeEnumValues) {
  ProductSearchFacetScopeEnumValues["All"] = "all";
  ProductSearchFacetScopeEnumValues["Query"] = "query";
  return ProductSearchFacetScopeEnumValues;
}({});

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 *	[PagedQueryResult](/general-concepts#pagedqueryresult) containing an array of [AssignedProductSelection](ctp:api:type:AssignedProductSelection).
 *
 */

/**
 *
 *	Given the mode of Product Selection, this assignment refers to, it may contain:
 *
 *	- `variantSelection` field for a Product Selection with `Individual` [ProductSelectionMode](ctp:api:type:ProductSelectionMode).
 *	- `variantExclusion` field for a Product Selection with `IndividualExclusion` [ProductSelectionMode](ctp:api:type:ProductSelectionMode).
 */

/**
 *	Product Selections can have the following modes:
 *
 */
let ProductSelectionModeValues = /*#__PURE__*/function (ProductSelectionModeValues) {
  ProductSelectionModeValues["Individual"] = "Individual";
  ProductSelectionModeValues["IndividualExclusion"] = "IndividualExclusion";
  return ProductSelectionModeValues;
}({});

/**
 *	[PagedQueryResult](/general-concepts#pagedqueryresult) containing an array of [ProductSelection](ctp:api:type:ProductSelection).
 *
 */

/**
 *	[PagedQueryResult](/general-concepts#pagedqueryresult) containing an array of [AssignedProductReference](ctp:api:type:AssignedProductReference).
 *
 */

/**
 *	[Reference](ctp:api:type:Reference) to a [ProductSelection](ctp:api:type:ProductSelection).
 *
 */

/**
 *	[ResourceIdentifier](ctp:api:type:ResourceIdentifier) to a [ProductSelection](ctp:api:type:ProductSelection). Either `id` or `key` is required. If both are set, an [InvalidJsonInput](/../api/errors#invalidjsoninput) error is returned.
 *
 */

/**
 *	Only Product Variants with the explicitly listed SKUs are part of a Product Selection with `IndividualExclusion` [ProductSelectionMode](ctp:api:type:ProductSelectionMode).
 *
 */

/**
 *	Polymorphic base type for Product Variant Selections. The actual type is determined by the `type` field.
 *
 */

/**
 *	All Product Variants except the explicitly stated SKUs are part of the Product Selection.
 *
 */

/**
 *	Only Product Variants with explicitly stated SKUs are part of the Product Selection.
 *
 */

let ProductVariantSelectionTypeEnumValues = /*#__PURE__*/function (ProductVariantSelectionTypeEnumValues) {
  ProductVariantSelectionTypeEnumValues["Exclusion"] = "exclusion";
  ProductVariantSelectionTypeEnumValues["IncludeAllExcept"] = "includeAllExcept";
  ProductVariantSelectionTypeEnumValues["IncludeOnly"] = "includeOnly";
  ProductVariantSelectionTypeEnumValues["Inclusion"] = "inclusion";
  return ProductVariantSelectionTypeEnumValues;
}({});

/**
 *	[PagedQueryResult](/general-concepts#pagedqueryresult) containing an array of [ProductSelectionAssignment](ctp:api:type:ProductSelectionAssignment).
 *
 */

/**
 *	Adds a Product to the Product Selection.
 *
 *	If the specified Product is already assigned to the Product Selection, but the existing Product Selection has a different Product Variant Selection, a [ProductPresentWithDifferentVariantSelection](ctp:api:type:ProductPresentWithDifferentVariantSelectionError) error is returned.
 *
 */

/**
 *	Excludes a Product from a Product Selection with `IndividualExclusion` [ProductSelectionMode](ctp:api:type:ProductSelectionMode).
 *
 *	If the specified Product is already assigned to the Product Selection, but the existing Product Selection has a different Product Variant Exclusion, a [ProductPresentWithDifferentVariantSelection](ctp:api:type:ProductPresentWithDifferentVariantSelectionError) error is returned.
 *
 */

/**
 *	Updates the Product Variant Exclusion of an existing [Product Selection Assignment](ctp:api:type:ProductSelectionAssignment).
 *	A [ProductVariantExclusion](ctp:api:type:ProductVariantExclusion) can only be set if the [Product](ctp:api:type:Product) has already been excluded from the [Product Selection](ctp:api:type:ProductSelection) with `IndividualExclusion` [ProductSelectionMode](ctp:api:type:ProductSelectionMode).
 *
 *	If the specified Product is not assigned to the Product Selection, a [ProductAssignmentMissing](ctp:api:type:ProductAssignmentMissingError) error is returned.
 *
 */

/**
 *	Updates the Product Variant Selection of an existing [Product Selection Assignment](ctp:api:type:ProductSelectionAssignment).
 *	A [ProductVariantSelection](ctp:api:type:ProductVariantSelection) can only be set if the [Product](ctp:api:type:Product) has already been included in the Product Selection with `Individual` [ProductSelectionMode](ctp:api:type:ProductSelectionMode).
 *
 *	If the specified Product is not assigned to the Product Selection, a [ProductAssignmentMissing](ctp:api:type:ProductAssignmentMissingError) error is returned.
 *
 */

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 *	Specifies how an Attribute (or a set of Attributes) should be validated across all variants of a Product:
 *
 */
let AttributeConstraintEnumValues = /*#__PURE__*/function (AttributeConstraintEnumValues) {
  AttributeConstraintEnumValues["CombinationUnique"] = "CombinationUnique";
  AttributeConstraintEnumValues["None"] = "None";
  AttributeConstraintEnumValues["SameForAll"] = "SameForAll";
  AttributeConstraintEnumValues["Unique"] = "Unique";
  return AttributeConstraintEnumValues;
}({});
let AttributeConstraintEnumDraftValues = /*#__PURE__*/function (AttributeConstraintEnumDraftValues) {
  AttributeConstraintEnumDraftValues["None"] = "None";
  return AttributeConstraintEnumDraftValues;
}({});

/**
 *	Specify the Attribute to be created with the [ProductTypeDraft](ctp:api:type:ProductTypeDraft).
 *
 */

let AttributeLevelEnumValues = /*#__PURE__*/function (AttributeLevelEnumValues) {
  AttributeLevelEnumValues["Product"] = "Product";
  AttributeLevelEnumValues["Variant"] = "Variant";
  return AttributeLevelEnumValues;
}({});

/**
 *	A localized enum value must be unique within the enum, else a [DuplicateEnumValues](ctp:api:type:DuplicateEnumValuesError) error is returned.
 *
 */

/**
 *	A plain enum value must be unique within the enum, else a [DuplicateEnumValues](ctp:api:type:DuplicateEnumValuesError) error is returned.
 *
 */

/**
 *	Name of the resource type that the value should reference. Supported resource type identifiers:
 *
 */
let AttributeReferenceTypeIdValues = /*#__PURE__*/function (AttributeReferenceTypeIdValues) {
  AttributeReferenceTypeIdValues["AssociateRole"] = "associate-role";
  AttributeReferenceTypeIdValues["BusinessUnit"] = "business-unit";
  AttributeReferenceTypeIdValues["Cart"] = "cart";
  AttributeReferenceTypeIdValues["CartDiscount"] = "cart-discount";
  AttributeReferenceTypeIdValues["Category"] = "category";
  AttributeReferenceTypeIdValues["Channel"] = "channel";
  AttributeReferenceTypeIdValues["Customer"] = "customer";
  AttributeReferenceTypeIdValues["CustomerGroup"] = "customer-group";
  AttributeReferenceTypeIdValues["KeyValueDocument"] = "key-value-document";
  AttributeReferenceTypeIdValues["Order"] = "order";
  AttributeReferenceTypeIdValues["Product"] = "product";
  AttributeReferenceTypeIdValues["ProductType"] = "product-type";
  AttributeReferenceTypeIdValues["Review"] = "review";
  AttributeReferenceTypeIdValues["ShippingMethod"] = "shipping-method";
  AttributeReferenceTypeIdValues["State"] = "state";
  AttributeReferenceTypeIdValues["Zone"] = "zone";
  return AttributeReferenceTypeIdValues;
}({});

/**
 *	Umbrella type for specific attribute types discriminated by property `name`.
 */

/**
 *	Attribute type for boolean values. Valid values for the Attribute are `true` and `false`.
 *
 */

/**
 *	Attribute type for [DateTime](ctp:api:type:DateTime) type values.
 *
 */

/**
 *	Attribute type for [Date](ctp:api:type:Date) type values.
 *
 */

/**
 *	Attribute type for plain enum values. Useful for predefined language-agnostic values selectable in drop downs when only one value should be selected. Use [AttributeSetType](ctp:api:type:AttributeSetType) of AttributeEnumType instead if multiple values can be selected from the list.
 *
 */

/**
 *	Attribute type for [LocalizedString](ctp:api:type:LocalizedString) type values.
 *
 */

/**
 *	Attribute type for localized enum values. Useful for predefined language-specific values selectable in drop-down menus if only one value can be selected. Use [AttributeSetType](ctp:api:type:AttributeSetType) of AttributeLocalizedEnumValue instead if multiple values can be selected.
 *
 */

/**
 *	Attribute type for [Money](ctp:api:type:Money) type values.
 *
 */

/**
 *	Attribute type for nesting Attributes based on some existing ProductType. It does not support `isSearchable` and is not supported in queries. The only supported AttributeConstraint is `None`.
 *
 */

/**
 *	Attribute type for numeric values.
 *
 */

/**
 *	Attribute type for [Reference](ctp:api:type:Reference) type values.
 *
 */

/**
 *	AttributeType that defines a set (without duplicate elements) with values of the given `elementType`. It does not support `isRequired`. Since this type itself is an AttributeType, it is possible to construct an AttributeSetType of an AttributeSetType of any AttributeType, and to continue with this iteration until terminating with any non-AttributeSetType. In case the AttributeSetType iteration terminates with an [AttributeNestedType](ctp:api:type:AttributeNestedType), the iteration can have 5 steps at maximum.
 *
 */

/**
 *	Attribute type for plain text string values.
 *
 */

/**
 *	Attribute type for [Time](ctp:api:type:Time) type values.
 *
 */

/**
 *	[PagedQueryResult](/../api/general-concepts#pagedqueryresult) with results containing an array of [ProductType](ctp:api:type:ProductType).
 *
 */

/**
 *	[Reference](ctp:api:type:Reference) to a [ProductType](ctp:api:type:ProductType).
 *
 */

/**
 *	[ResourceIdentifier](ctp:api:type:ResourceIdentifier) to a [ProductType](ctp:api:type:ProductType). Either `id` or `key` is required. If both are set, an [InvalidJsonInput](/../api/errors#invalidjsoninput) error is returned.
 *
 */

/**
 *	A text input hint is a string with one of the following values:
 *
 */
let TextInputHintValues = /*#__PURE__*/function (TextInputHintValues) {
  TextInputHintValues["MultiLine"] = "MultiLine";
  TextInputHintValues["SingleLine"] = "SingleLine";
  return TextInputHintValues;
}({});

/**
 *	Adds a localizable enum to the values of [AttributeLocalizedEnumType](ctp:api:type:AttributeLocalizedEnumType). It can update an AttributeLocalizedEnumType AttributeDefinition or an [AttributeSetType](ctp:api:type:AttributeSetType) of AttributeLocalizedEnumType AttributeDefinition.
 *
 */

/**
 *	Adds an enum to the values of [AttributeEnumType](ctp:api:type:AttributeEnumType) AttributeDefinition, or [AttributeSetType](ctp:api:type:AttributeSetType) of AttributeEnumType AttributeDefinition.
 *
 */

/**
 *	Updates the `attributeConstraint` of an [AttributeDefinition](ctp:api:type:AttributeDefinition). For now only following changes are supported: `SameForAll` to `None` and `Unique` to `None`.
 *
 */

/**
 *	Renames an AttributeDefinition and also renames all corresponding Attributes on all [Products](/projects/products) with this ProductType. The renaming of the Attributes is [eventually consistent](/general-concepts#eventual-consistency).
 *
 *	If the AttributeDefinition name to be changed does not exist, an [AttributeNameDoesNotExist](ctp:api:type:AttributeNameDoesNotExistError) error is returned.
 *
 */

/**
 *	Updates the key of a single enum `value` in an [AttributeEnumType](ctp:api:type:AttributeEnumType) AttributeDefinition, [AttributeLocalizedEnumType](ctp:api:type:AttributeLocalizedEnumType) AttributeDefinition, [AttributeSetType](ctp:api:type:AttributeSetType) of AttributeEnumType AttributeDefinition, or AttributeSetType of AttributeLocalizedEnumType AttributeDefinition.
 *
 *	If the AttributeDefinition does not contain an enum with the referenced key, a [EnumKeyDoesNotExist](ctp:api:type:EnumKeyDoesNotExistError) error is returned.
 *
 *	All Products will be updated to the new key in an [eventually consistent](/general-concepts#eventual-consistency) way.
 *
 */

/**
 *	Updates the `inputHint` of an [AttributeDefinition](ctp:api:type:AttributeDefinition).
 *
 */

/**
 *	Following this update the Products are reindexed asynchronously to reflect this change on the search endpoint. When enabling search on an existing Attribute type definition, the constraint regarding the maximum size of a searchable Attribute will not be enforced. Instead, AttributeDefinitions exceeding this limit will be treated as not searchable and will not be available for full-text search.
 *
 */

/**
 *	Updates the label of a single enum `value` in an [AttributeLocalizedEnumType](ctp:api:type:AttributeLocalizedEnumType) AttributeDefinition, or [AttributeSetType](ctp:api:type:AttributeSetType) of AttributeLocalizedEnumType AttributeDefinition.
 *
 *	All Products will be updated to the new label in an [eventually consistent](/general-concepts#eventual-consistency) way.
 *
 */

/**
 *	Updates the order of localized enum `values` in an [AttributeLocalizedEnumType](ctp:api:type:AttributeLocalizedEnumType) AttributeDefinition. It can update an AttributeLocalizedEnumType AttributeDefinition or an [AttributeSetType](ctp:api:type:AttributeSetType) of AttributeLocalizedEnumType AttributeDefinition.
 *
 */

/**
 *	Updates the label of a single enum `value` in an [AttributeEnumType](ctp:api:type:AttributeEnumType) AttributeDefinition, or [AttributeSetType](ctp:api:type:AttributeSetType) of AttributeEnumType AttributeDefinition.
 *
 *	All Products will be updated to the new label in an [eventually consistent](/general-concepts#eventual-consistency) way.
 *
 */

/**
 *	Updates the order of enum `values` in an [AttributeEnumType](ctp:api:type:AttributeEnumType) AttributeDefinition. It can update an AttributeEnumType AttributeDefinition or an [AttributeSetType](ctp:api:type:AttributeSetType) of AttributeEnumType AttributeDefinition.
 *
 */

/**
 *	Removes an AttributeDefinition and also deletes all corresponding Attributes on all [Products](/projects/products) with this ProductType. The removal of the Attributes is [eventually consistent](/general-concepts#eventual-consistency).
 *
 *	The `CombinationUnique` constraint is not checked when an Attribute is removed, and uniqueness violations may occur when you remove an Attribute with a `CombinationUnique` constraint.
 *
 */

/**
 *	Removes enum values from an AttributeDefinition of [AttributeEnumType](ctp:api:type:AttributeEnumType), [AttributeLocalizedEnumType](ctp:api:type:AttributeLocalizedEnumType), [AttributeSetType](ctp:api:type:AttributeSetType) of AttributeEnumType, or AttributeSetType of AttributeLocalizedEnumType.
 *
 *	If the Attribute is **not** required, the Attributes of all Products using those enum keys will also be removed in an [eventually consistent](/general-concepts#eventual-consistency) way. If the Attribute is required, the operation returns an [EnumValueIsUsed](ctp:api:type:EnumValueIsUsedError) error.
 *
 */

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 *	The current indexing status of Business Unit Search.
 *
 */
let BusinessUnitIndexingStatusValues = /*#__PURE__*/function (BusinessUnitIndexingStatusValues) {
  BusinessUnitIndexingStatusValues["Failed"] = "Failed";
  BusinessUnitIndexingStatusValues["Indexing"] = "Indexing";
  BusinessUnitIndexingStatusValues["Ready"] = "Ready";
  BusinessUnitIndexingStatusValues["Scheduled"] = "Scheduled";
  return BusinessUnitIndexingStatusValues;
}({});
/**
 *	The current indexing status of Customer Search.
 *
 */
let CustomerIndexingStatusValues = /*#__PURE__*/function (CustomerIndexingStatusValues) {
  CustomerIndexingStatusValues["Failed"] = "Failed";
  CustomerIndexingStatusValues["Indexing"] = "Indexing";
  CustomerIndexingStatusValues["Ready"] = "Ready";
  CustomerIndexingStatusValues["Scheduled"] = "Scheduled";
  return CustomerIndexingStatusValues;
}({});
/**
 *	Default value for [Business Unit Status](ctp:api:type:BusinessUnitStatus) configured though [Project settings](/../api/projects/project#change-my-business-unit-status-on-creation).
 */
let BusinessUnitConfigurationStatusValues = /*#__PURE__*/function (BusinessUnitConfigurationStatusValues) {
  BusinessUnitConfigurationStatusValues["Active"] = "Active";
  BusinessUnitConfigurationStatusValues["Inactive"] = "Inactive";
  return BusinessUnitConfigurationStatusValues;
}({});
/**
 *	Specifies the status of the [Business Unit Search](/../api/projects/business-unit-search) index.
 *	You can change the status using the [Change Business Unit Search Status](ctp:api:type:ProjectChangeBusinessUnitSearchStatusAction) update action.
 *
 */
let BusinessUnitSearchStatusValues = /*#__PURE__*/function (BusinessUnitSearchStatusValues) {
  BusinessUnitSearchStatusValues["Activated"] = "Activated";
  BusinessUnitSearchStatusValues["Deactivated"] = "Deactivated";
  return BusinessUnitSearchStatusValues;
}({});
/**
 *	Specifies the status of the [Customer Search](/../api/projects/customer-search) index.
 *	You can change the status using the [Change Customer Search Status](ctp:api:type:ProjectChangeCustomerSearchStatusAction) update action.
 *
 */
let CustomerSearchStatusValues = /*#__PURE__*/function (CustomerSearchStatusValues) {
  CustomerSearchStatusValues["Activated"] = "Activated";
  CustomerSearchStatusValues["Deactivated"] = "Deactivated";
  return CustomerSearchStatusValues;
}({});

/**
 *	Represents a RFC 7662 compliant [OAuth 2.0 Token Introspection](https://datatracker.ietf.org/doc/html/rfc7662) endpoint. For more information, see [Requesting an access token using an external OAuth 2.0 server](/../api/authorization#request-an-access-token-using-an-external-oauth-server).
 *
 *	You can only configure **one** external OAuth 2.0 endpoint per Project. To authenticate using multiple external services (such as social network logins), use a middle layer authentication service.
 *
 */

/**
 *	Specifies the status of the [Order Search](/../api/projects/order-search) index.
 */
let OrderSearchStatusValues = /*#__PURE__*/function (OrderSearchStatusValues) {
  OrderSearchStatusValues["Activated"] = "Activated";
  OrderSearchStatusValues["Deactivated"] = "Deactivated";
  return OrderSearchStatusValues;
}({});
let ProductSearchIndexingModeValues = /*#__PURE__*/function (ProductSearchIndexingModeValues) {
  ProductSearchIndexingModeValues["ProductProjectionsSearch"] = "ProductProjectionsSearch";
  ProductSearchIndexingModeValues["ProductsSearch"] = "ProductsSearch";
  return ProductSearchIndexingModeValues;
}({});

/**
 *	Controls indexing of resources to be provided on high performance read-only search endpoints.
 *
 */

/**
 *	Status of resource indexing.
 */
let SearchIndexingConfigurationStatusValues = /*#__PURE__*/function (SearchIndexingConfigurationStatusValues) {
  SearchIndexingConfigurationStatusValues["Activated"] = "Activated";
  SearchIndexingConfigurationStatusValues["Deactivated"] = "Deactivated";
  SearchIndexingConfigurationStatusValues["Indexing"] = "Indexing";
  return SearchIndexingConfigurationStatusValues;
}({});

/**
 *	The [ShippingRate](ctp:api:type:ShippingRate) maps to an abstract Cart categorization expressed by strings (for example, `Light`, `Medium`, or `Heavy`).
 *	Only keys defined in the `values` array can be used to create a tier or to set a value of the `shippingRateInput` on the [Cart](ctp:api:type:Cart).
 *	Keys must be unique.
 *
 */

/**
 *	The [ShippingRate](ctp:api:type:ShippingRate) maps to an abstract [Cart](ctp:api:type:Cart) categorization expressed by integers (such as shipping scores or weight ranges).
 *
 */

/**
 *	The [ShippingRate](ctp:api:type:ShippingRate) maps to the value of the Cart and is used to select a tier.
 *	The value of the [Cart](ctp:api:type:Cart) is the sum of all Line Item totals and Custom Line Item totals (via the `totalPrice` field) after any Product Discounts and Cart Discounts have been applied.
 *	If chosen, it is not possible to set a value for the `shippingRateInput` on the [Cart](ctp:api:type:Cart).
 *
 */

/**
 *	Removing a language used by a [Store](ctp:api:type:Store) returns a [LanguageUsedInStores](ctp:api:type:LanguageUsedInStoresError) error.
 *
 */

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 *	[PagedQueryResult](/../api/general-concepts#pagedqueryresult) with results containing an array of [Quote](ctp:api:type:Quote).
 *
 */

/**
 *	[Reference](ctp:api:type:Reference) to a [Quote](ctp:api:type:Quote).
 *
 */

/**
 *	[ResourceIdentifier](ctp:api:type:ResourceIdentifier) to a [Quote](ctp:api:type:Quote).
 *
 */

/**
 *	Predefined states tracking the status of the Quote.
 *
 */
let QuoteStateValues = /*#__PURE__*/function (QuoteStateValues) {
  QuoteStateValues["Accepted"] = "Accepted";
  QuoteStateValues["Declined"] = "Declined";
  QuoteStateValues["DeclinedForRenegotiation"] = "DeclinedForRenegotiation";
  QuoteStateValues["Pending"] = "Pending";
  QuoteStateValues["RenegotiationAddressed"] = "RenegotiationAddressed";
  QuoteStateValues["Withdrawn"] = "Withdrawn";
  return QuoteStateValues;
}({});

/**
 *	Changes the owner of a Quote to a different Customer.
 *	Customer Group is not updated.
 *	This update action produces the [Quote Customer Changed](ctp:api:type:QuoteCustomerChangedMessage) Message.
 *
 */

/**
 *	Represents the Buyer requesting renegotiation for a Quote. Valid for Quotes in a `Pending` [state](ctp:api:type:QuoteState).
 *
 */

/**
 *	If the existing [State](ctp:api:type:State) has set `transitions`, there must be a direct transition to the new State. If `transitions` is not set, no validation is performed. This update action produces the [Quote State Transition](ctp:api:type:QuoteStateTransitionMessage) Message.
 *
 */

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 *	[PagedQueryResult](/../api/general-concepts#pagedqueryresult) with results containing an array of [QuoteRequest](ctp:api:type:QuoteRequest).
 *
 */

/**
 *	[Reference](ctp:api:type:Reference) to a [QuoteRequest](ctp:api:type:QuoteRequest).
 *
 */

/**
 *	[ResourceIdentifier](ctp:api:type:ResourceIdentifier) to a [QuoteRequest](ctp:api:type:QuoteRequest).
 *
 */

/**
 *	Predefined states tracking the status of the Quote Request in the negotiation process.
 *
 */
let QuoteRequestStateValues = /*#__PURE__*/function (QuoteRequestStateValues) {
  QuoteRequestStateValues["Accepted"] = "Accepted";
  QuoteRequestStateValues["Cancelled"] = "Cancelled";
  QuoteRequestStateValues["Closed"] = "Closed";
  QuoteRequestStateValues["Rejected"] = "Rejected";
  QuoteRequestStateValues["Submitted"] = "Submitted";
  return QuoteRequestStateValues;
}({});

/**
 *	Changes the owner of a Quote Request to a different Customer.
 *	Customer Group is not updated.
 *	This update action produces the [Quote Request Customer Changed](ctp:api:type:QuoteRequestCustomerChangedMessage) Message.
 *
 */

/**
 *	Transitions the Quote Request to a different state.
 *	A Buyer is only allowed to cancel a Quote Request when it is in `Submitted` state.
 *
 */

/**
 *	If the existing [State](ctp:api:type:State) has set `transitions`, there must be a direct transition to the new State. If `transitions` is not set, no validation is performed. This update action produces the [Quote Request State Transition](ctp:api:type:QuoteRequestStateTransitionMessage) Message.
 *
 */

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 *	Supported interval units for [Recurrence Policies](ctp:api:type:RecurrencePolicy) which are used in [Recurring Orders](ctp:api:type:RecurringOrder).
 *
 */
let IntervalUnitValues = /*#__PURE__*/function (IntervalUnitValues) {
  IntervalUnitValues["Days"] = "Days";
  IntervalUnitValues["Months"] = "Months";
  IntervalUnitValues["Weeks"] = "Weeks";
  return IntervalUnitValues;
}({});

/**
 *	[PagedQueryResult](/../api/general-concepts#pagedqueryresult) with results containing an array of [RecurrencePolicy](ctp:api:type:RecurrencePolicy).
 *
 */

/**
 *	[Reference](ctp:api:type:Reference) to a [RecurrencePolicy](ctp:api:type:RecurrencePolicy).
 *
 */

/**
 *	[ResourceIdentifier](ctp:api:type:ResourceIdentifier) to a [RecurrencePolicy](ctp:api:type:RecurrencePolicy). Either `id` or `key` is required. If both are set, an [InvalidJsonInput](/../api/errors#invalidjsoninput) error is returned.
 *
 */

/**
 *	Schedule of a [Recurring Order](ctp:api:type:RecurringOrder) that occurs on a specific day of each month.
 *	This type is returned in the [RecurrencePolicy](ctp:api:type:RecurrencePolicy) for an active [Recurring Order](ctp:api:type:RecurringOrder).
 *
 */

/**
 *	Determines the schedule for a [Recurring Order](ctp:api:type:RecurringOrder) to occur on a specific day of each month.
 *
 *	- Orders will be created even if the specified day is a weekend or holiday.
 *	- To place orders on different dates within the same month (for example, the 1st and 15th), create separate [Recurring Orders](ctp:api:type:RecurringOrder)—each with its own schedule.
 *
 */

/**
 *	Schedule of a [RecurringOrder](ctp:api:type:RecurringOrder) that occurs at a fixed interval—for example, every two weeks or every month.
 *
 */

/**
 *	Determines the schedule for a [Recurring Order](ctp:api:type:RecurringOrder) to occur at a fixed interval—for example, every two weeks or every month.
 *
 */

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 *	Information about recurring orders and frequencies.
 *
 */

/**
 *	Information about recurring orders and frequencies.
 *
 */

/**
 *	Information about recurring orders and frequencies.
 *
 */

/**
 *	Information about recurring orders and frequencies.
 *
 */

/**
 *	Indicates how the price of a [Line Item](ctp:api:type:LineItem) or [Custom Line Item](ctp:api:type:CustomLineItem) is selected during Order creation.
 *
 */
let PriceSelectionModeValues = /*#__PURE__*/function (PriceSelectionModeValues) {
  PriceSelectionModeValues["Dynamic"] = "Dynamic";
  PriceSelectionModeValues["Fixed"] = "Fixed";
  return PriceSelectionModeValues;
}({});

/**
 *	Recurring Orders are automatically assigned the Store and/or Business Unit from the associated Cart.
 *
 */

/**
 *	[PagedQueryResult](/../api/general-concepts#pagedqueryresult) with `results` containing an array of [RecurringOrder](ctp:api:type:RecurringOrder).
 *
 */

/**
 *	[Reference](ctp:api:type:Reference) to a [RecurringOrder](ctp:api:type:RecurringOrder).
 *
 */

/**
 *	[ResourceIdentifier](ctp:api:type:ResourceIdentifier) to a [RecurringOrder](ctp:api:type:RecurringOrder). Either `id` or `key` is required. If both are set, an [InvalidJsonInput](/../api/errors#invalidjsoninput) error is returned.
 *
 */

/**
 *	Indicates the state of the [RecurringOrder](ctp:api:type:RecurringOrder).
 *
 */
let RecurringOrderStateValues = /*#__PURE__*/function (RecurringOrderStateValues) {
  RecurringOrderStateValues["Active"] = "Active";
  RecurringOrderStateValues["Canceled"] = "Canceled";
  RecurringOrderStateValues["Expired"] = "Expired";
  RecurringOrderStateValues["Failed"] = "Failed";
  RecurringOrderStateValues["Paused"] = "Paused";
  return RecurringOrderStateValues;
}({});

/**
 *	Defines the new state for the Recurring Order—for possible values, see [RecurringOrderActive](ctp:api:type:RecurringOrderActive), [RecurringOrderPaused](ctp:api:type:RecurringOrderPaused), [RecurringOrderExpired](ctp:api:type:RecurringOrderExpired), and [RecurringOrderCanceled](ctp:api:type:RecurringOrderCanceled).
 *
 */

/**
 *	Changes the Recurring Order state to active.
 *
 */

/**
 *	Changes the Recurring Order state to canceled.
 *
 */

/**
 *	Changes the Recurring Order state to expired.
 *
 */

/**
 *	Changes the Recurring Order state to paused.
 *
 */

/**
 *	Defines how the next orders are going to be skipped.
 *
 */

/**
 *	Configuration to track skips for a [RecurringOrder](ctp:api:type:RecurringOrder).
 *
 */

/**
 *	Defines how the next orders are going to be skipped.
 *
 */

/**
 *	Configuration that uses a counter to track the number of Orders that will be skipped.
 *
 */

/**
 *	Adding a Custom Field to a Recurring Order generates the [RecurringOrderCustomFieldAdded](ctp:api:type:RecurringOrderCustomFieldAddedMessage) Message, removing one generates the [RecurringOrderCustomFieldRemoved](ctp:api:type:RecurringOrderCustomFieldRemovedMessage) Message, and updating an existing one generates the [RecurringOrderCustomFieldChanged](ctp:api:type:RecurringOrderCustomFieldChangedMessage) Message.
 *
 */

/**
 *	Adding or updating a Custom Type on a Recurring Order generates the [RecurringOrderCustomTypeSet](ctp:api:type:RecurringOrderCustomTypeSetMessage) Message, removing one generates the [RecurringOrderCustomTypeRemoved](ctp:api:type:RecurringOrderCustomTypeRemovedMessage) Message.
 *
 */

/**
 *	Setting the expiration date and time generates the [RecurringOrderExpiresAtSet](ctp:api:type:RecurringOrderExpiresAtSetMessage) Message.
 *
 */

/**
 *	This update action generates the [RecurringOrderKeySet](ctp:api:type:RecurringOrderKeySetMessage) Message.
 *
 */

/**
 *	To set the [schedule](ctp:api:type:RecurrencePolicySchedule), the [Recurring Order](ctp:api:type:RecurringOrder) must be active, with no active [Skip Configuration](ctp:api:type:SkipConfiguration) and with available prices for all Cart items for the new schedule.
 *	Setting the schedule generates the [RecurringOrderScheduleSet](ctp:api:type:RecurringOrderScheduleSetMessage) Message.
 *
 */

/**
 *	To set the start date and time, the [Recurring Order](ctp:api:type:RecurringOrder) must not have been started yet.
 *	Setting the start date and time generates the [RecurringOrderStartsAtSet](ctp:api:type:RecurringOrderStartsAtSetMessage) Message.
 *
 */

/**
 *	Setting the [RecurringOrderState](ctp:api:type:RecurringOrderState) generates the [RecurringOrderStateChanged](ctp:api:type:RecurringOrderStateChangedMessage) Message.
 *
 */

/**
 *	If the existing [State](ctp:api:type:State) has set `transitions`, there must be a direct transition to the new State.
 *	If `transitions` is not set, no validation is performed.
 *
 *	This update action produces the [Recurring Order State Transition](ctp:api:type:RecurringOrderStateTransitionMessage) Message.
 *
 */

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 *	Possible values for the `fieldType` property on [simple expressions](/../api/search-query-language#simple-expressions) indicating the data type of the `field`.
 */
let SearchFieldTypeValues = /*#__PURE__*/function (SearchFieldTypeValues) {
  SearchFieldTypeValues["Boolean"] = "boolean";
  SearchFieldTypeValues["Date"] = "date";
  SearchFieldTypeValues["Datetime"] = "datetime";
  SearchFieldTypeValues["Enum"] = "enum";
  SearchFieldTypeValues["Lenum"] = "lenum";
  SearchFieldTypeValues["Ltext"] = "ltext";
  SearchFieldTypeValues["Money"] = "money";
  SearchFieldTypeValues["Number"] = "number";
  SearchFieldTypeValues["Reference"] = "reference";
  SearchFieldTypeValues["SetBoolean"] = "set_boolean";
  SearchFieldTypeValues["SetDate"] = "set_date";
  SearchFieldTypeValues["SetDatetime"] = "set_datetime";
  SearchFieldTypeValues["SetEnum"] = "set_enum";
  SearchFieldTypeValues["SetLenum"] = "set_lenum";
  SearchFieldTypeValues["SetLtext"] = "set_ltext";
  SearchFieldTypeValues["SetMoney"] = "set_money";
  SearchFieldTypeValues["SetNumber"] = "set_number";
  SearchFieldTypeValues["SetReference"] = "set_reference";
  SearchFieldTypeValues["SetText"] = "set_text";
  SearchFieldTypeValues["SetTime"] = "set_time";
  SearchFieldTypeValues["Text"] = "text";
  SearchFieldTypeValues["Time"] = "time";
  return SearchFieldTypeValues;
}({});
let SearchMatchTypeValues = /*#__PURE__*/function (SearchMatchTypeValues) {
  SearchMatchTypeValues["All"] = "all";
  SearchMatchTypeValues["Any"] = "any";
  return SearchMatchTypeValues;
}({});
/**
 *	For set-type fields, only a single value of the set is taken into account for sorting.
 *	The sort mode determines whether the minimum or maximum value, or a calculated statistical value should be used as sorting value.
 *
 */
let SearchSortModeValues = /*#__PURE__*/function (SearchSortModeValues) {
  SearchSortModeValues["Avg"] = "avg";
  SearchSortModeValues["Max"] = "max";
  SearchSortModeValues["Min"] = "min";
  SearchSortModeValues["Sum"] = "sum";
  return SearchSortModeValues;
}({});
let SearchSortOrderValues = /*#__PURE__*/function (SearchSortOrderValues) {
  SearchSortOrderValues["Asc"] = "asc";
  SearchSortOrderValues["Desc"] = "desc";
  return SearchSortOrderValues;
}({});

/**
 *	Sorting parameters provided with a Search request.
 *
 */

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 *	[PagedQueryResult](/general-concepts#pagedqueryresult) with `results` containing an array of [ShippingMethod](ctp:api:type:ShippingMethod).
 *
 */

/**
 *	[Reference](ctp:api:type:Reference) to a [ShippingMethod](ctp:api:type:ShippingMethod).
 *
 */

/**
 *	[ResourceIdentifier](ctp:api:type:ResourceIdentifier) to a [ShippingMethod](ctp:api:type:ShippingMethod). Either `id` or `key` is required. If both are set, an [InvalidJsonInput](/../api/errors#invalidjsoninput) error is returned.
 *
 */

/**
 *	The [ShippingRate](ctp:api:type:ShippingRate) maps to an abstract Cart categorization expressed by strings (for example, `Light`, `Medium`, or `Heavy`).
 *
 */

/**
 *	The [ShippingRate](ctp:api:type:ShippingRate) maps to an abstract Cart categorization expressed by integers (such as shipping scores or weight ranges).
 *	Either `price` or `priceFunction` is required.
 *
 */

/**
 *
 *	The [ShippingRate](ctp:api:type:ShippingRate) maps to the value of the Cart and is used to select a tier.
 *	The value of the [Cart](ctp:api:type:Cart) is the sum of all Line Item totals and Custom Line Item totals (via the `totalPrice` field) after any Product Discounts and Cart Discounts have been applied.
 *	If chosen, it is not possible to set a value for the `shippingRateInput` on the [Cart](ctp:api:type:Cart).
 *	Tiers contain the `centAmount` (a value of `100` in the currency `USD` corresponds to `$ 1.00`), and start at `1`.'
 *
 */

let ShippingRateTierTypeValues = /*#__PURE__*/function (ShippingRateTierTypeValues) {
  ShippingRateTierTypeValues["CartClassification"] = "CartClassification";
  ShippingRateTierTypeValues["CartScore"] = "CartScore";
  ShippingRateTierTypeValues["CartValue"] = "CartValue";
  return ShippingRateTierTypeValues;
}({});

/**
 *	Defines shipping rates in different currencies for a specific [Zone](ctp:api:type:Zone).
 *
 */

/**
 *	This action sets, overwrites, or removes any existing [Custom Field](/projects/custom-fields) for an existing ShippingMethod.
 *
 */

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 *	[PagedQueryResult](/../api/general-concepts#pagedqueryresult) with results containing an array of [StagedQuote](ctp:api:type:StagedQuote).
 *
 */

/**
 *	[Reference](ctp:api:type:Reference) to a [StagedQuote](ctp:api:type:StagedQuote).
 *
 */

/**
 *	[ResourceIdentifier](ctp:api:type:ResourceIdentifier) to a [StagedQuote](ctp:api:type:StagedQuote).
 *
 */

/**
 *	Predefined states tracking the status of the Staged Quote.
 *
 */
let StagedQuoteStateValues = /*#__PURE__*/function (StagedQuoteStateValues) {
  StagedQuoteStateValues["Closed"] = "Closed";
  StagedQuoteStateValues["InProgress"] = "InProgress";
  StagedQuoteStateValues["Sent"] = "Sent";
  return StagedQuoteStateValues;
}({});

/**
 *	If the existing [State](ctp:api:type:State) has set `transitions`, there must be a direct transition to the new State. If `transitions` is not set, no validation is performed. This update action produces the [Staged Quote State Transition](ctp:api:type:StagedQuoteStateTransitionMessage) Message.
 *
 */

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 *	[PagedQueryResult](/../api/general-concepts#pagedqueryresult) with `results` containing an array of [State](ctp:api:type:State).
 *
 */

/**
 *	[Reference](ctp:api:type:Reference) to a [State](ctp:api:type:State).
 *
 */

/**
 *	[ResourceIdentifier](ctp:api:type:ResourceIdentifier) to a [State](ctp:api:type:State). Either `id` or `key` is required. If both are set, an [InvalidJsonInput](/../api/errors#invalidjsoninput) error is returned.
 *
 */

/**
 *	For some resource types, a State can fulfill the following predefined roles:
 *
 */
let StateRoleEnumValues = /*#__PURE__*/function (StateRoleEnumValues) {
  StateRoleEnumValues["Return"] = "Return";
  StateRoleEnumValues["ReviewIncludedInStatistics"] = "ReviewIncludedInStatistics";
  return StateRoleEnumValues;
}({});
/**
 *	Resource or object type the State can be assigned to.
 *
 */
let StateTypeEnumValues = /*#__PURE__*/function (StateTypeEnumValues) {
  StateTypeEnumValues["LineItemState"] = "LineItemState";
  StateTypeEnumValues["OrderState"] = "OrderState";
  StateTypeEnumValues["PaymentState"] = "PaymentState";
  StateTypeEnumValues["ProductState"] = "ProductState";
  StateTypeEnumValues["QuoteRequestState"] = "QuoteRequestState";
  StateTypeEnumValues["QuoteState"] = "QuoteState";
  StateTypeEnumValues["RecurringOrderState"] = "RecurringOrderState";
  StateTypeEnumValues["ReviewState"] = "ReviewState";
  StateTypeEnumValues["StagedQuoteState"] = "StagedQuoteState";
  return StateTypeEnumValues;
}({});

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 *	Defines the method of authentication for AWS SQS and SNS Destinations.
 */
let AwsAuthenticationModeValues = /*#__PURE__*/function (AwsAuthenticationModeValues) {
  AwsAuthenticationModeValues["Credentials"] = "Credentials";
  AwsAuthenticationModeValues["Iam"] = "IAM";
  return AwsAuthenticationModeValues;
}({});

/**
 *	Notification about changes to a resource. The payload format differs for resource [creation](ctp:api:type:ResourceCreatedDeliveryPayload),
 *	[update](ctp:api:type:ResourceUpdatedDeliveryPayload),
 *	and [deletion](ctp:api:type:ResourceDeletedDeliveryPayload).
 *
 */

/**
 *	Resource types supported by [ChangeSubscriptions](ctp:api:type:ChangeSubscription):
 *
 */
let ChangeSubscriptionResourceTypeIdValues = /*#__PURE__*/function (ChangeSubscriptionResourceTypeIdValues) {
  ChangeSubscriptionResourceTypeIdValues["ApprovalFlow"] = "approval-flow";
  ChangeSubscriptionResourceTypeIdValues["ApprovalRule"] = "approval-rule";
  ChangeSubscriptionResourceTypeIdValues["AssociateRole"] = "associate-role";
  ChangeSubscriptionResourceTypeIdValues["AttributeGroup"] = "attribute-group";
  ChangeSubscriptionResourceTypeIdValues["BusinessUnit"] = "business-unit";
  ChangeSubscriptionResourceTypeIdValues["Cart"] = "cart";
  ChangeSubscriptionResourceTypeIdValues["CartDiscount"] = "cart-discount";
  ChangeSubscriptionResourceTypeIdValues["Category"] = "category";
  ChangeSubscriptionResourceTypeIdValues["Channel"] = "channel";
  ChangeSubscriptionResourceTypeIdValues["Customer"] = "customer";
  ChangeSubscriptionResourceTypeIdValues["CustomerEmailToken"] = "customer-email-token";
  ChangeSubscriptionResourceTypeIdValues["CustomerGroup"] = "customer-group";
  ChangeSubscriptionResourceTypeIdValues["CustomerPasswordToken"] = "customer-password-token";
  ChangeSubscriptionResourceTypeIdValues["DiscountCode"] = "discount-code";
  ChangeSubscriptionResourceTypeIdValues["DiscountGroup"] = "discount-group";
  ChangeSubscriptionResourceTypeIdValues["Extension"] = "extension";
  ChangeSubscriptionResourceTypeIdValues["InventoryEntry"] = "inventory-entry";
  ChangeSubscriptionResourceTypeIdValues["KeyValueDocument"] = "key-value-document";
  ChangeSubscriptionResourceTypeIdValues["Order"] = "order";
  ChangeSubscriptionResourceTypeIdValues["OrderEdit"] = "order-edit";
  ChangeSubscriptionResourceTypeIdValues["Payment"] = "payment";
  ChangeSubscriptionResourceTypeIdValues["Product"] = "product";
  ChangeSubscriptionResourceTypeIdValues["ProductDiscount"] = "product-discount";
  ChangeSubscriptionResourceTypeIdValues["ProductSelection"] = "product-selection";
  ChangeSubscriptionResourceTypeIdValues["ProductTailoring"] = "product-tailoring";
  ChangeSubscriptionResourceTypeIdValues["ProductType"] = "product-type";
  ChangeSubscriptionResourceTypeIdValues["Quote"] = "quote";
  ChangeSubscriptionResourceTypeIdValues["QuoteRequest"] = "quote-request";
  ChangeSubscriptionResourceTypeIdValues["RecurrencePolicy"] = "recurrence-policy";
  ChangeSubscriptionResourceTypeIdValues["RecurringOrder"] = "recurring-order";
  ChangeSubscriptionResourceTypeIdValues["Review"] = "review";
  ChangeSubscriptionResourceTypeIdValues["ShippingMethod"] = "shipping-method";
  ChangeSubscriptionResourceTypeIdValues["ShoppingList"] = "shopping-list";
  ChangeSubscriptionResourceTypeIdValues["StagedQuote"] = "staged-quote";
  ChangeSubscriptionResourceTypeIdValues["StandalonePrice"] = "standalone-price";
  ChangeSubscriptionResourceTypeIdValues["State"] = "state";
  ChangeSubscriptionResourceTypeIdValues["Store"] = "store";
  ChangeSubscriptionResourceTypeIdValues["Subscription"] = "subscription";
  ChangeSubscriptionResourceTypeIdValues["TaxCategory"] = "tax-category";
  ChangeSubscriptionResourceTypeIdValues["Type"] = "type";
  ChangeSubscriptionResourceTypeIdValues["Zone"] = "zone";
  return ChangeSubscriptionResourceTypeIdValues;
}({});

/**
 *	The [CloudEventsFormat](ctp:api:type:CloudEventsFormat) represents event data in a way that conforms to a common specification. The payload can be found inside the `data` field.
 *
 */

/**
 *	The CloudEventsFormat can be used with any [Destination](#destination-1), and the payload is delivered in the `JSON Event Format`. [AzureEventGridDestination](ctp:api:type:AzureEventGridDestination) offers native support to filter and route CloudEvents.
 *
 */

/**
 *	[Azure Event Grid](https://azure.microsoft.com/en-us/products/event-grid/) can be used to push notifications to Azure Functions, HTTP endpoints (webhooks), and several other Azure tools. Event Grid can only be used with the [CloudEventsFormat](ctp:api:type:CloudEventsFormat).
 *	To set up a Subscription with Azure Event Grid, first create a topic in the [Azure Portal](https://azure.microsoft.com/en-us/get-started/azure-portal/). To allow Composable Commerce to push notifications to your topic, provide an [access key](https://docs.microsoft.com/en-us/azure/event-grid/get-access-keys).
 *
 */

/**
 *	[Azure Service Bus](https://azure.microsoft.com/en-us/products/service-bus/) can be used as a pull-queue with [Queues](https://learn.microsoft.com/en-us/azure/service-bus-messaging/service-bus-queues-topics-subscriptions#queues), or to fan-out notifications with [Topics and Subscriptions](https://learn.microsoft.com/en-us/azure/service-bus-messaging/service-bus-queues-topics-subscriptions).
 *	To set up a Subscription with Azure Service Bus, first create a queue/topic in the [Azure Portal](https://azure.microsoft.com/en-us/get-started/azure-portal/) with a Shared Access Policy including the `Send` permission.
 *
 */

/**
 *	This destination can be used to push notifications to [Confluent Cloud](https://www.confluent.io/confluent-cloud/).
 *	To set up a Subscription of this type, first, create a topic in Confluent Cloud.
 *	Then, to allow Composable Commerce to push notifications to your topic, generate [API keys](https://docs.confluent.io/cloud/current/access-management/authenticate/api-keys/api-keys.html) for your topic, and create the Subscription destination using the generated credentials.
 *
 *	The Composable Commerce producer uses the following values: `SASL_SSL` for`security.protocol`, `PLAIN` for`sasl.mechanism`, and the default value (1048576) for `max.request.size`.
 *
 */

/**
 *	[AWS EventBridge](https://aws.amazon.com/eventbridge/) can be used to push events and messages to a serverless event bus that can forward them to AWS SQS, SNS, Lambda, and other AWS services based on forwarding rules.
 *	Once the Subscription is created, an equivalent "partner event source" is created in AWS EventBridge. This event source must be associated with an event bus for the Subscription setup to be complete.
 *
 */

/**
 *	For EventSubscription, the format of the payload is custom for each specific notification.
 *
 */

/**
 *	Resource types supported by [EventSubscriptions](ctp:api:type:EventSubscription).
 *
 */
let EventSubscriptionResourceTypeIdValues = /*#__PURE__*/function (EventSubscriptionResourceTypeIdValues) {
  EventSubscriptionResourceTypeIdValues["Checkout"] = "checkout";
  EventSubscriptionResourceTypeIdValues["ImportApi"] = "import-api";
  return EventSubscriptionResourceTypeIdValues;
}({});
/**
 *	Type of events supported by [EventSubscriptions](ctp:api:type:EventSubscription).
 *
 */
let EventTypeValues = /*#__PURE__*/function (EventTypeValues) {
  EventTypeValues["CheckoutOrderCreationFailed"] = "CheckoutOrderCreationFailed";
  EventTypeValues["CheckoutPaymentAuthorizationCancelled"] = "CheckoutPaymentAuthorizationCancelled";
  EventTypeValues["CheckoutPaymentAuthorizationFailed"] = "CheckoutPaymentAuthorizationFailed";
  EventTypeValues["CheckoutPaymentAuthorized"] = "CheckoutPaymentAuthorized";
  EventTypeValues["CheckoutPaymentCancelAuthorizationFailed"] = "CheckoutPaymentCancelAuthorizationFailed";
  EventTypeValues["CheckoutPaymentChargeFailed"] = "CheckoutPaymentChargeFailed";
  EventTypeValues["CheckoutPaymentCharged"] = "CheckoutPaymentCharged";
  EventTypeValues["CheckoutPaymentRefundFailed"] = "CheckoutPaymentRefundFailed";
  EventTypeValues["CheckoutPaymentRefunded"] = "CheckoutPaymentRefunded";
  EventTypeValues["ImportContainerCreated"] = "ImportContainerCreated";
  EventTypeValues["ImportContainerDeleted"] = "ImportContainerDeleted";
  EventTypeValues["ImportOperationRejected"] = "ImportOperationRejected";
  EventTypeValues["ImportUnresolved"] = "ImportUnresolved";
  EventTypeValues["ImportValidationFailed"] = "ImportValidationFailed";
  EventTypeValues["ImportWaitForMasterVariant"] = "ImportWaitForMasterVariant";
  return EventTypeValues;
}({});

/**
 *	Destination for [Google Cloud Pub/Sub](https://cloud.google.com/pubsub/) that can be used
 *	for [Pull subscriptions](https://cloud.google.com/pubsub/docs/pull) as well as for [Push subscriptions](https://cloud.google.com/pubsub/docs/push).
 *	The `topic` must give the `pubsub.topics.publish` permission to the service account `subscriptions@commercetools-platform.iam.gserviceaccount.com`.
 *	If used with the [CloudEventsFormat](#cloudeventsformat), the notification conforms to the [PubSub Protocol Binding](https://github.com/google/knative-gcp/blob/master/docs/spec/pubsub-protocol-binding.md) of the [Structured Content Mode](https://github.com/google/knative-gcp/blob/master/docs/spec/pubsub-protocol-binding.md#32-structured-content-mode).
 *
 */

/**
 *	Messages will be delivered even if the Messages Query HTTP API [is not enabled](/../api/projects/messages#enable-querying-messages-via-the-api).
 *
 *	For MessageSubscriptions, the format of the payload is [MessageDeliveryPayload](ctp:api:type:MessageDeliveryPayload).
 *
 */

/**
 *	Resource types supported by [MessageSubscriptions](ctp:api:type:MessageSubscription):
 *
 */
let MessageSubscriptionResourceTypeIdValues = /*#__PURE__*/function (MessageSubscriptionResourceTypeIdValues) {
  MessageSubscriptionResourceTypeIdValues["ApprovalFlow"] = "approval-flow";
  MessageSubscriptionResourceTypeIdValues["ApprovalRule"] = "approval-rule";
  MessageSubscriptionResourceTypeIdValues["AssociateRole"] = "associate-role";
  MessageSubscriptionResourceTypeIdValues["BusinessUnit"] = "business-unit";
  MessageSubscriptionResourceTypeIdValues["Category"] = "category";
  MessageSubscriptionResourceTypeIdValues["Customer"] = "customer";
  MessageSubscriptionResourceTypeIdValues["CustomerEmailToken"] = "customer-email-token";
  MessageSubscriptionResourceTypeIdValues["CustomerGroup"] = "customer-group";
  MessageSubscriptionResourceTypeIdValues["CustomerPasswordToken"] = "customer-password-token";
  MessageSubscriptionResourceTypeIdValues["InventoryEntry"] = "inventory-entry";
  MessageSubscriptionResourceTypeIdValues["Order"] = "order";
  MessageSubscriptionResourceTypeIdValues["Payment"] = "payment";
  MessageSubscriptionResourceTypeIdValues["Product"] = "product";
  MessageSubscriptionResourceTypeIdValues["ProductSelection"] = "product-selection";
  MessageSubscriptionResourceTypeIdValues["ProductTailoring"] = "product-tailoring";
  MessageSubscriptionResourceTypeIdValues["Quote"] = "quote";
  MessageSubscriptionResourceTypeIdValues["QuoteRequest"] = "quote-request";
  MessageSubscriptionResourceTypeIdValues["Review"] = "review";
  MessageSubscriptionResourceTypeIdValues["ShoppingList"] = "shopping-list";
  MessageSubscriptionResourceTypeIdValues["StagedQuote"] = "staged-quote";
  MessageSubscriptionResourceTypeIdValues["StandalonePrice"] = "standalone-price";
  MessageSubscriptionResourceTypeIdValues["Store"] = "store";
  return MessageSubscriptionResourceTypeIdValues;
}({});

/**
 *	The PlatformFormat uses constructs that are similar to the ones used in the REST API, for example, on the [Messages Query HTTP API](/../api/projects/messages).
 *
 */

/**
 *	[AWS SNS](https://aws.amazon.com/sns/) can be used to push messages to AWS Lambda, HTTP endpoints (webhooks), or fan-out messages to SQS queues. The SQS queue must be a [Standard](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/standard-queues.html) queue type.
 *
 *	We recommend setting `authenticationMode` to `IAM`, to avoid unnecessary key management. For IAM authentication and before creating the Subscription, give permissions to the following user account: `arn:aws:iam::362576667341:user/subscriptions`. Otherwise, a test notification will not be sent.
 *
 *	If you prefer to use `Credentials` for authentication, we recommend [creating an IAM user](https://docs.aws.amazon.com/sns/latest/dg/sns-setting-up.html#create-iam-user) with an `accessKey` and `accessSecret` pair specifically for each Subscription.
 *
 *	The IAM user should only have the `sns:Publish` permission on this topic.
 *
 */

/**
 *	[AWS SQS](https://aws.amazon.com/sqs/) is a pull-queue on AWS.
 *	The queue must be a [Standard](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/standard-queues.html) queue type with a `MaximumMessageSize` of `256 KB`.
 *
 *	We recommend setting `authenticationMode` to `IAM`, to avoid unnecessary key management. For IAM authentication and before creating the Subscription, give permissions to the following user account: `arn:aws:iam::362576667341:user/subscriptions`. Otherwise, a test message will not be sent.
 *
 *	If you prefer to use `Credentials` for authentication, we recommend [creating an IAM user](https://docs.aws.amazon.com/sns/latest/dg/sns-setting-up.html#create-iam-user) with an `accessKey` and `accessSecret` pair specifically for each Subscription.
 *
 *	The IAM user should only have the `sqs:SendMessage` permission on this queue.
 *
 */

/**
 *	Either `messages`, `changes`, or `events` must be set.
 *
 */

/**
 *	The health status of the Subscription that indicates whether notifications are being delivered.
 *
 */
let SubscriptionHealthStatusValues = /*#__PURE__*/function (SubscriptionHealthStatusValues) {
  SubscriptionHealthStatusValues["ConfigurationError"] = "ConfigurationError";
  SubscriptionHealthStatusValues["ConfigurationErrorDeliveryStopped"] = "ConfigurationErrorDeliveryStopped";
  SubscriptionHealthStatusValues["Healthy"] = "Healthy";
  SubscriptionHealthStatusValues["ManuallySuspended"] = "ManuallySuspended";
  SubscriptionHealthStatusValues["TemporaryError"] = "TemporaryError";
  return SubscriptionHealthStatusValues;
}({});

/**
 *	All payloads for the [PlatformFormat](ctp:api:type:PlatformFormat) share these common fields.
 *
 */

/**
 *	All payloads for the [PlatformFormat](ctp:api:type:PlatformFormat) share these common fields.
 *
 */

/**
 *	This payload is sent for an [EventSubscription](ctp:api:type:EventSubscription).
 *
 */

/**
 *	This payload is sent for a [MessageSubscription](ctp:api:type:MessageSubscription).
 *
 */

/**
 *	This payload is sent for a [ChangeSubscription](ctp:api:type:ChangeSubscription) when a resource is created.
 *
 */

/**
 *	This payload is sent for a [ChangeSubscription](ctp:api:type:ChangeSubscription) when a resource is deleted.
 *
 */

/**
 *	This payload is sent for a [ChangeSubscription](ctp:api:type:ChangeSubscription) when a resource is updated. This includes updates by a background process, like a change in product availability.
 *
 */

/**
 *	[PagedQueryResult](/../api/general-concepts#pagedqueryresult) with `results` containing an array of [Subscription](ctp:api:type:Subscription).
 *
 */

/**
 *	A test notification is sent to ensure the correct configuration of the Destination. If the notification cannot be delivered, the update will fail. The payload of the test notification is of type [ResourceCreated](ctp:api:type:ResourceCreatedDeliveryPayload) for the `resourceTypeId` `subscription`. The `status` will change to [Healthy](ctp:api:type:SubscriptionHealthStatus), if it isn't already.
 *
 */

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 *	Defines an allowed value of a [CustomFieldEnumType](ctp:api:type:CustomFieldEnumType) field.
 *
 */

/**
 *	Defines an allowed value of a [CustomFieldLocalizedEnumType](ctp:api:type:CustomFieldLocalizedEnumType) field.
 *
 */

/**
 *	Defines which resource type a [CustomFieldReferenceType](ctp:api:type:CustomFieldReferenceType) can reference.
 *
 */
let CustomFieldReferenceValueValues = /*#__PURE__*/function (CustomFieldReferenceValueValues) {
  CustomFieldReferenceValueValues["ApprovalFlow"] = "approval-flow";
  CustomFieldReferenceValueValues["ApprovalRule"] = "approval-rule";
  CustomFieldReferenceValueValues["AssociateRole"] = "associate-role";
  CustomFieldReferenceValueValues["BusinessUnit"] = "business-unit";
  CustomFieldReferenceValueValues["Cart"] = "cart";
  CustomFieldReferenceValueValues["CartDiscount"] = "cart-discount";
  CustomFieldReferenceValueValues["Category"] = "category";
  CustomFieldReferenceValueValues["Channel"] = "channel";
  CustomFieldReferenceValueValues["Customer"] = "customer";
  CustomFieldReferenceValueValues["CustomerGroup"] = "customer-group";
  CustomFieldReferenceValueValues["KeyValueDocument"] = "key-value-document";
  CustomFieldReferenceValueValues["Order"] = "order";
  CustomFieldReferenceValueValues["Product"] = "product";
  CustomFieldReferenceValueValues["ProductType"] = "product-type";
  CustomFieldReferenceValueValues["Review"] = "review";
  CustomFieldReferenceValueValues["ShippingMethod"] = "shipping-method";
  CustomFieldReferenceValueValues["State"] = "state";
  CustomFieldReferenceValueValues["Zone"] = "zone";
  return CustomFieldReferenceValueValues;
}({});

/**
 *	Serves as value of the `custom` field on a resource or data type customized with a [Type](ctp:api:type:Type).
 *
 */

/**
 *	The representation used when creating or updating a [customizable data type](/../api/projects/types#resourcetypeid) with Custom Fields.
 *
 */

/**
 *	Defines a [Custom Field](/../api/projects/custom-fields) and its meta-information.
 *	This FieldDefinition is similar to an [AttributeDefinition](ctp:api:type:AttributeDefinition) of [Product Types](/../api/projects/productTypes).
 *
 */

/**
 *	Field type for Boolean values.
 *
 */

/**
 *	Field type for [DateTime](ctp:api:type:DateTime) values.
 *
 */

/**
 *	Field type for [Date](ctp:api:type:Date) values.
 *
 */

/**
 *	Field type for enum values.
 *
 */

/**
 *	Field type for localized enum values.
 *
 */

/**
 *	Field type for [LocalizedString](ctp:api:type:LocalizedString) values.
 *
 */

/**
 *	Field type for [CentPrecisionMoney](ctp:api:type:CentPrecisionMoney) values.
 *
 */

/**
 *	Field type for number values.
 *
 */

/**
 *	Field type for [Reference](ctp:api:type:Reference) values.
 *
 */

/**
 *	Values of a SetType Custom Field are sets of values of the specified `elementType` (without duplicate elements).
 *
 */

/**
 *	Field type for string values.
 *
 */

/**
 *	Field type for [Time](ctp:api:type:Time) values.
 *
 */

/**
 *	With Types, you can model your own Custom Fields on the following resources and data types.
 *
 */
let ResourceTypeIdValues = /*#__PURE__*/function (ResourceTypeIdValues) {
  ResourceTypeIdValues["Address"] = "address";
  ResourceTypeIdValues["ApprovalFlow"] = "approval-flow";
  ResourceTypeIdValues["ApprovalRule"] = "approval-rule";
  ResourceTypeIdValues["Asset"] = "asset";
  ResourceTypeIdValues["AssociateRole"] = "associate-role";
  ResourceTypeIdValues["BusinessUnit"] = "business-unit";
  ResourceTypeIdValues["CartDiscount"] = "cart-discount";
  ResourceTypeIdValues["Category"] = "category";
  ResourceTypeIdValues["Channel"] = "channel";
  ResourceTypeIdValues["CustomLineItem"] = "custom-line-item";
  ResourceTypeIdValues["Customer"] = "customer";
  ResourceTypeIdValues["CustomerGroup"] = "customer-group";
  ResourceTypeIdValues["DiscountCode"] = "discount-code";
  ResourceTypeIdValues["InventoryEntry"] = "inventory-entry";
  ResourceTypeIdValues["LineItem"] = "line-item";
  ResourceTypeIdValues["Order"] = "order";
  ResourceTypeIdValues["OrderDelivery"] = "order-delivery";
  ResourceTypeIdValues["OrderEdit"] = "order-edit";
  ResourceTypeIdValues["OrderParcel"] = "order-parcel";
  ResourceTypeIdValues["OrderReturnItem"] = "order-return-item";
  ResourceTypeIdValues["Payment"] = "payment";
  ResourceTypeIdValues["PaymentInterfaceInteraction"] = "payment-interface-interaction";
  ResourceTypeIdValues["ProductPrice"] = "product-price";
  ResourceTypeIdValues["ProductSelection"] = "product-selection";
  ResourceTypeIdValues["ProductTailoring"] = "product-tailoring";
  ResourceTypeIdValues["Quote"] = "quote";
  ResourceTypeIdValues["RecurringOrder"] = "recurring-order";
  ResourceTypeIdValues["Review"] = "review";
  ResourceTypeIdValues["Shipping"] = "shipping";
  ResourceTypeIdValues["ShippingMethod"] = "shipping-method";
  ResourceTypeIdValues["ShoppingList"] = "shopping-list";
  ResourceTypeIdValues["ShoppingListTextLineItem"] = "shopping-list-text-line-item";
  ResourceTypeIdValues["StandalonePrice"] = "standalone-price";
  ResourceTypeIdValues["Store"] = "store";
  ResourceTypeIdValues["Transaction"] = "transaction";
  return ResourceTypeIdValues;
}({});

/**
 *	[PagedQueryResult](/../api/general-concepts#pagedqueryresult) with `results` containing an array of [Types](ctp:api:type:Type).
 *
 */

/**
 *	[Reference](ctp:api:type:Reference) to a [Type](ctp:api:type:Type).
 *
 */

/**
 *	[ResourceIdentifier](ctp:api:type:ResourceIdentifier) of a [Type](ctp:api:type:Type). Either `id` or `key` is required. If both are set, an [InvalidJsonInput](/../api/errors#invalidjsoninput) error is returned.
 *
 */

/**
 *	Provides a visual representation type for this field. It is only relevant for string-based field types like [CustomFieldStringType](ctp:api:type:CustomFieldStringType) and [CustomFieldLocalizedStringType](ctp:api:type:CustomFieldLocalizedStringType). Following values are supported:
 *
 */
let TypeTextInputHintValues = /*#__PURE__*/function (TypeTextInputHintValues) {
  TypeTextInputHintValues["MultiLine"] = "MultiLine";
  TypeTextInputHintValues["SingleLine"] = "SingleLine";
  return TypeTextInputHintValues;
}({});

/**
 *	Adds a value to an [EnumType](ctp:api:type:CustomFieldEnumType).
 *	This update action can be used to update an [EnumType](ctp:api:type:CustomFieldEnumType) FieldDefinition and a [SetType](ctp:api:type:CustomFieldSetType) FieldDefinition of [EnumType](ctp:api:type:CustomFieldEnumType).
 *
 */

/**
 *	Defines a new field for a Type. Adding new required fields to a Type that is already referenced by existing entities can put those entities in a temporarily inconsistent state.
 *
 *	If a Type that is already in use requires new fields, we recommend making them optional (`required` set to `false`) whenever possible. Alternatively, any new required fields should be added one at a time followed by an update to all the resources using the Type. This prevents validation errors caused by an entity missing more than one required custom field.
 *
 */

/**
 *	Adds a value to a [LocalizedEnumType](ctp:api:type:CustomFieldLocalizedEnumType).
 *	This update action can be used to update a [LocalizedEnumType](ctp:api:type:CustomFieldLocalizedEnumType) FieldDefinition and a [SetType](ctp:api:type:CustomFieldSetType) FieldDefinition of [CustomFieldLocalizedEnumType](ctp:api:type:CustomFieldLocalizedEnumType).
 *
 */

/**
 *	Changes the `label` of an [EnumValue](ctp:api:type:CustomFieldEnumValue) of an [EnumType](ctp:api:type:CustomFieldEnumType) FieldDefinition.
 *
 */

/**
 *	Changes the order of [EnumValues](ctp:api:type:CustomFieldEnumValue) in an [EnumType](ctp:api:type:CustomFieldEnumType) FieldDefinition.
 *	This update action can be used to update an [EnumType](ctp:api:type:CustomFieldEnumType) FieldDefinition and a [SetType](ctp:api:type:CustomFieldSetType) FieldDefinition of [EnumType](ctp:api:type:CustomFieldEnumType).
 *
 */

/**
 *	Changes the `inputHint` of [CustomFieldStringType](ctp:api:type:CustomFieldStringType) [FieldDefinition](ctp:api:type:FieldDefinition), a [CustomFieldLocalizedStringType](ctp:api:type:CustomFieldLocalizedStringType) [FieldDefinition](ctp:api:type:FieldDefinition), and [CustomFieldSetType](ctp:api:type:CustomFieldSetType) [FieldDefinition](ctp:api:type:FieldDefinition) of these string-based FieldTypes.
 *
 */

/**
 *	Changes the `label` of a [LocalizedEnumValue](ctp:api:type:CustomFieldLocalizedEnumValue) of a [LocalizedEnumType](ctp:api:type:CustomFieldLocalizedEnumType) FieldDefinition.
 *
 */

/**
 *	Changes the order of [LocalizedEnumValues](ctp:api:type:CustomFieldLocalizedEnumValue) in a [LocalizedEnumType](ctp:api:type:CustomFieldLocalizedEnumType) FieldDefinition.
 *	This update action can be used to update a [LocalizedEnumType](ctp:api:type:CustomFieldLocalizedEnumType) FieldDefinition and a [SetType](ctp:api:type:CustomFieldSetType) of [LocalizedEnumType](ctp:api:type:CustomFieldLocalizedEnumType) FieldDefinitions.
 *
 */

/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate <raml_file_path> -o <output_path> -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

const createExecutorFromMiddlewares = (executor, midds) => {
  if (!midds || midds.length == 0) {
    return executor;
  }
  const reduced = midds.reduce(reduceMiddleware);
  return middlewareToExecutor(reduced, executor);
};
function reduceMiddleware(middleware1, middleware2) {
  return (request, executor) => middleware1(request, middlewareToExecutor(middleware2, executor));
}
function middlewareToExecutor(middleware, executor) {
  return request => middleware(request, executor);
}

function createApiBuilderFromCtpClient(ctpClient, baseUri) {
  return new ApiRoot({
    executeRequest: ctpClient.execute,
    baseUri: baseUri
  });
}

exports.AnonymousCartSignInModeValues = AnonymousCartSignInModeValues;
exports.ApiRequest = ApiRequest;
exports.ApiRoot = ApiRoot;
exports.ApprovalFlowStatusValues = ApprovalFlowStatusValues;
exports.ApprovalRuleStatusValues = ApprovalRuleStatusValues;
exports.AssociateRoleInheritanceModeValues = AssociateRoleInheritanceModeValues;
exports.AttributeConstraintEnumDraftValues = AttributeConstraintEnumDraftValues;
exports.AttributeConstraintEnumValues = AttributeConstraintEnumValues;
exports.AttributeLevelEnumValues = AttributeLevelEnumValues;
exports.AttributeReferenceTypeIdValues = AttributeReferenceTypeIdValues;
exports.AttributionSourceValues = AttributionSourceValues;
exports.AuthenticationModeValues = AuthenticationModeValues;
exports.AwsAuthenticationModeValues = AwsAuthenticationModeValues;
exports.BusinessUnitApprovalRuleModeValues = BusinessUnitApprovalRuleModeValues;
exports.BusinessUnitAssociateModeValues = BusinessUnitAssociateModeValues;
exports.BusinessUnitConfigurationStatusValues = BusinessUnitConfigurationStatusValues;
exports.BusinessUnitIndexingStatusValues = BusinessUnitIndexingStatusValues;
exports.BusinessUnitSearchStatusValues = BusinessUnitSearchStatusValues;
exports.BusinessUnitStatusValues = BusinessUnitStatusValues;
exports.BusinessUnitStoreModeValues = BusinessUnitStoreModeValues;
exports.BusinessUnitTypeValues = BusinessUnitTypeValues;
exports.ByProjectKeyApiClientsByIDRequestBuilder = ByProjectKeyApiClientsByIDRequestBuilder;
exports.ByProjectKeyApiClientsRequestBuilder = ByProjectKeyApiClientsRequestBuilder;
exports.ByProjectKeyAsAssociateByAssociateIdBusinessUnitsByIDRequestBuilder = ByProjectKeyAsAssociateByAssociateIdBusinessUnitsByIDRequestBuilder;
exports.ByProjectKeyAsAssociateByAssociateIdBusinessUnitsKeyByKeyRequestBuilder = ByProjectKeyAsAssociateByAssociateIdBusinessUnitsKeyByKeyRequestBuilder;
exports.ByProjectKeyAsAssociateByAssociateIdBusinessUnitsRequestBuilder = ByProjectKeyAsAssociateByAssociateIdBusinessUnitsRequestBuilder;
exports.ByProjectKeyAsAssociateByAssociateIdInBusinessUnitKeyByBusinessUnitKeyApprovalFlowsByIDRequestBuilder = ByProjectKeyAsAssociateByAssociateIdInBusinessUnitKeyByBusinessUnitKeyApprovalFlowsByIDRequestBuilder;
exports.ByProjectKeyAsAssociateByAssociateIdInBusinessUnitKeyByBusinessUnitKeyApprovalFlowsRequestBuilder = ByProjectKeyAsAssociateByAssociateIdInBusinessUnitKeyByBusinessUnitKeyApprovalFlowsRequestBuilder;
exports.ByProjectKeyAsAssociateByAssociateIdInBusinessUnitKeyByBusinessUnitKeyApprovalRulesByIDRequestBuilder = ByProjectKeyAsAssociateByAssociateIdInBusinessUnitKeyByBusinessUnitKeyApprovalRulesByIDRequestBuilder;
exports.ByProjectKeyAsAssociateByAssociateIdInBusinessUnitKeyByBusinessUnitKeyApprovalRulesKeyByKeyRequestBuilder = ByProjectKeyAsAssociateByAssociateIdInBusinessUnitKeyByBusinessUnitKeyApprovalRulesKeyByKeyRequestBuilder;
exports.ByProjectKeyAsAssociateByAssociateIdInBusinessUnitKeyByBusinessUnitKeyApprovalRulesRequestBuilder = ByProjectKeyAsAssociateByAssociateIdInBusinessUnitKeyByBusinessUnitKeyApprovalRulesRequestBuilder;
exports.ByProjectKeyAsAssociateByAssociateIdInBusinessUnitKeyByBusinessUnitKeyCartsByIDRequestBuilder = ByProjectKeyAsAssociateByAssociateIdInBusinessUnitKeyByBusinessUnitKeyCartsByIDRequestBuilder;
exports.ByProjectKeyAsAssociateByAssociateIdInBusinessUnitKeyByBusinessUnitKeyCartsKeyByKeyRequestBuilder = ByProjectKeyAsAssociateByAssociateIdInBusinessUnitKeyByBusinessUnitKeyCartsKeyByKeyRequestBuilder;
exports.ByProjectKeyAsAssociateByAssociateIdInBusinessUnitKeyByBusinessUnitKeyCartsReplicateRequestBuilder = ByProjectKeyAsAssociateByAssociateIdInBusinessUnitKeyByBusinessUnitKeyCartsReplicateRequestBuilder;
exports.ByProjectKeyAsAssociateByAssociateIdInBusinessUnitKeyByBusinessUnitKeyCartsRequestBuilder = ByProjectKeyAsAssociateByAssociateIdInBusinessUnitKeyByBusinessUnitKeyCartsRequestBuilder;
exports.ByProjectKeyAsAssociateByAssociateIdInBusinessUnitKeyByBusinessUnitKeyOrdersByIDRequestBuilder = ByProjectKeyAsAssociateByAssociateIdInBusinessUnitKeyByBusinessUnitKeyOrdersByIDRequestBuilder;
exports.ByProjectKeyAsAssociateByAssociateIdInBusinessUnitKeyByBusinessUnitKeyOrdersOrderNumberByOrderNumberRequestBuilder = ByProjectKeyAsAssociateByAssociateIdInBusinessUnitKeyByBusinessUnitKeyOrdersOrderNumberByOrderNumberRequestBuilder;
exports.ByProjectKeyAsAssociateByAssociateIdInBusinessUnitKeyByBusinessUnitKeyOrdersQuotesRequestBuilder = ByProjectKeyAsAssociateByAssociateIdInBusinessUnitKeyByBusinessUnitKeyOrdersQuotesRequestBuilder;
exports.ByProjectKeyAsAssociateByAssociateIdInBusinessUnitKeyByBusinessUnitKeyOrdersRequestBuilder = ByProjectKeyAsAssociateByAssociateIdInBusinessUnitKeyByBusinessUnitKeyOrdersRequestBuilder;
exports.ByProjectKeyAsAssociateByAssociateIdInBusinessUnitKeyByBusinessUnitKeyQuoteRequestsByIDRequestBuilder = ByProjectKeyAsAssociateByAssociateIdInBusinessUnitKeyByBusinessUnitKeyQuoteRequestsByIDRequestBuilder;
exports.ByProjectKeyAsAssociateByAssociateIdInBusinessUnitKeyByBusinessUnitKeyQuoteRequestsKeyByKeyRequestBuilder = ByProjectKeyAsAssociateByAssociateIdInBusinessUnitKeyByBusinessUnitKeyQuoteRequestsKeyByKeyRequestBuilder;
exports.ByProjectKeyAsAssociateByAssociateIdInBusinessUnitKeyByBusinessUnitKeyQuoteRequestsRequestBuilder = ByProjectKeyAsAssociateByAssociateIdInBusinessUnitKeyByBusinessUnitKeyQuoteRequestsRequestBuilder;
exports.ByProjectKeyAsAssociateByAssociateIdInBusinessUnitKeyByBusinessUnitKeyQuotesByIDRequestBuilder = ByProjectKeyAsAssociateByAssociateIdInBusinessUnitKeyByBusinessUnitKeyQuotesByIDRequestBuilder;
exports.ByProjectKeyAsAssociateByAssociateIdInBusinessUnitKeyByBusinessUnitKeyQuotesKeyByKeyRequestBuilder = ByProjectKeyAsAssociateByAssociateIdInBusinessUnitKeyByBusinessUnitKeyQuotesKeyByKeyRequestBuilder;
exports.ByProjectKeyAsAssociateByAssociateIdInBusinessUnitKeyByBusinessUnitKeyQuotesRequestBuilder = ByProjectKeyAsAssociateByAssociateIdInBusinessUnitKeyByBusinessUnitKeyQuotesRequestBuilder;
exports.ByProjectKeyAsAssociateByAssociateIdInBusinessUnitKeyByBusinessUnitKeyRequestBuilder = ByProjectKeyAsAssociateByAssociateIdInBusinessUnitKeyByBusinessUnitKeyRequestBuilder;
exports.ByProjectKeyAsAssociateByAssociateIdInBusinessUnitKeyByBusinessUnitKeyShoppingListsByIDRequestBuilder = ByProjectKeyAsAssociateByAssociateIdInBusinessUnitKeyByBusinessUnitKeyShoppingListsByIDRequestBuilder;
exports.ByProjectKeyAsAssociateByAssociateIdInBusinessUnitKeyByBusinessUnitKeyShoppingListsKeyByKeyRequestBuilder = ByProjectKeyAsAssociateByAssociateIdInBusinessUnitKeyByBusinessUnitKeyShoppingListsKeyByKeyRequestBuilder;
exports.ByProjectKeyAsAssociateByAssociateIdInBusinessUnitKeyByBusinessUnitKeyShoppingListsRequestBuilder = ByProjectKeyAsAssociateByAssociateIdInBusinessUnitKeyByBusinessUnitKeyShoppingListsRequestBuilder;
exports.ByProjectKeyAsAssociateByAssociateIdRequestBuilder = ByProjectKeyAsAssociateByAssociateIdRequestBuilder;
exports.ByProjectKeyAsAssociateRequestBuilder = ByProjectKeyAsAssociateRequestBuilder;
exports.ByProjectKeyAssociateRolesByIDRequestBuilder = ByProjectKeyAssociateRolesByIDRequestBuilder;
exports.ByProjectKeyAssociateRolesKeyByKeyRequestBuilder = ByProjectKeyAssociateRolesKeyByKeyRequestBuilder;
exports.ByProjectKeyAssociateRolesRequestBuilder = ByProjectKeyAssociateRolesRequestBuilder;
exports.ByProjectKeyAttributeGroupsByIDRequestBuilder = ByProjectKeyAttributeGroupsByIDRequestBuilder;
exports.ByProjectKeyAttributeGroupsKeyByKeyRequestBuilder = ByProjectKeyAttributeGroupsKeyByKeyRequestBuilder;
exports.ByProjectKeyAttributeGroupsRequestBuilder = ByProjectKeyAttributeGroupsRequestBuilder;
exports.ByProjectKeyBusinessUnitsByBusinessUnitIdAssociatesByAssociateIdRequestBuilder = ByProjectKeyBusinessUnitsByBusinessUnitIdAssociatesByAssociateIdRequestBuilder;
exports.ByProjectKeyBusinessUnitsByIDRequestBuilder = ByProjectKeyBusinessUnitsByIDRequestBuilder;
exports.ByProjectKeyBusinessUnitsKeyByKeyAssociatesByAssociateIdRequestBuilder = ByProjectKeyBusinessUnitsKeyByKeyAssociatesByAssociateIdRequestBuilder;
exports.ByProjectKeyBusinessUnitsKeyByKeyRequestBuilder = ByProjectKeyBusinessUnitsKeyByKeyRequestBuilder;
exports.ByProjectKeyBusinessUnitsRequestBuilder = ByProjectKeyBusinessUnitsRequestBuilder;
exports.ByProjectKeyBusinessUnitsSearchIndexingStatusRequestBuilder = ByProjectKeyBusinessUnitsSearchIndexingStatusRequestBuilder;
exports.ByProjectKeyBusinessUnitsSearchRequestBuilder = ByProjectKeyBusinessUnitsSearchRequestBuilder;
exports.ByProjectKeyCartDiscountsByIDRequestBuilder = ByProjectKeyCartDiscountsByIDRequestBuilder;
exports.ByProjectKeyCartDiscountsKeyByKeyRequestBuilder = ByProjectKeyCartDiscountsKeyByKeyRequestBuilder;
exports.ByProjectKeyCartDiscountsRequestBuilder = ByProjectKeyCartDiscountsRequestBuilder;
exports.ByProjectKeyCartsByIDRequestBuilder = ByProjectKeyCartsByIDRequestBuilder;
exports.ByProjectKeyCartsCustomerIdByCustomerIdRequestBuilder = ByProjectKeyCartsCustomerIdByCustomerIdRequestBuilder;
exports.ByProjectKeyCartsKeyByKeyRequestBuilder = ByProjectKeyCartsKeyByKeyRequestBuilder;
exports.ByProjectKeyCartsReplicateRequestBuilder = ByProjectKeyCartsReplicateRequestBuilder;
exports.ByProjectKeyCartsRequestBuilder = ByProjectKeyCartsRequestBuilder;
exports.ByProjectKeyCategoriesByIDRequestBuilder = ByProjectKeyCategoriesByIDRequestBuilder;
exports.ByProjectKeyCategoriesKeyByKeyRequestBuilder = ByProjectKeyCategoriesKeyByKeyRequestBuilder;
exports.ByProjectKeyCategoriesRequestBuilder = ByProjectKeyCategoriesRequestBuilder;
exports.ByProjectKeyChannelsByIDRequestBuilder = ByProjectKeyChannelsByIDRequestBuilder;
exports.ByProjectKeyChannelsKeyByKeyRequestBuilder = ByProjectKeyChannelsKeyByKeyRequestBuilder;
exports.ByProjectKeyChannelsRequestBuilder = ByProjectKeyChannelsRequestBuilder;
exports.ByProjectKeyCustomObjectsByContainerByKeyRequestBuilder = ByProjectKeyCustomObjectsByContainerByKeyRequestBuilder;
exports.ByProjectKeyCustomObjectsByContainerRequestBuilder = ByProjectKeyCustomObjectsByContainerRequestBuilder;
exports.ByProjectKeyCustomObjectsRequestBuilder = ByProjectKeyCustomObjectsRequestBuilder;
exports.ByProjectKeyCustomerGroupsByIDRequestBuilder = ByProjectKeyCustomerGroupsByIDRequestBuilder;
exports.ByProjectKeyCustomerGroupsKeyByKeyRequestBuilder = ByProjectKeyCustomerGroupsKeyByKeyRequestBuilder;
exports.ByProjectKeyCustomerGroupsRequestBuilder = ByProjectKeyCustomerGroupsRequestBuilder;
exports.ByProjectKeyCustomersByIDRequestBuilder = ByProjectKeyCustomersByIDRequestBuilder;
exports.ByProjectKeyCustomersEmailConfirmRequestBuilder = ByProjectKeyCustomersEmailConfirmRequestBuilder;
exports.ByProjectKeyCustomersEmailTokenByEmailTokenRequestBuilder = ByProjectKeyCustomersEmailTokenByEmailTokenRequestBuilder;
exports.ByProjectKeyCustomersEmailTokenRequestBuilder = ByProjectKeyCustomersEmailTokenRequestBuilder;
exports.ByProjectKeyCustomersKeyByKeyRequestBuilder = ByProjectKeyCustomersKeyByKeyRequestBuilder;
exports.ByProjectKeyCustomersPasswordRequestBuilder = ByProjectKeyCustomersPasswordRequestBuilder;
exports.ByProjectKeyCustomersPasswordResetRequestBuilder = ByProjectKeyCustomersPasswordResetRequestBuilder;
exports.ByProjectKeyCustomersPasswordTokenByPasswordTokenRequestBuilder = ByProjectKeyCustomersPasswordTokenByPasswordTokenRequestBuilder;
exports.ByProjectKeyCustomersPasswordTokenRequestBuilder = ByProjectKeyCustomersPasswordTokenRequestBuilder;
exports.ByProjectKeyCustomersRequestBuilder = ByProjectKeyCustomersRequestBuilder;
exports.ByProjectKeyCustomersSearchIndexingStatusRequestBuilder = ByProjectKeyCustomersSearchIndexingStatusRequestBuilder;
exports.ByProjectKeyCustomersSearchRequestBuilder = ByProjectKeyCustomersSearchRequestBuilder;
exports.ByProjectKeyDiscountCodesByIDRequestBuilder = ByProjectKeyDiscountCodesByIDRequestBuilder;
exports.ByProjectKeyDiscountCodesKeyByKeyRequestBuilder = ByProjectKeyDiscountCodesKeyByKeyRequestBuilder;
exports.ByProjectKeyDiscountCodesRequestBuilder = ByProjectKeyDiscountCodesRequestBuilder;
exports.ByProjectKeyDiscountGroupsByIDRequestBuilder = ByProjectKeyDiscountGroupsByIDRequestBuilder;
exports.ByProjectKeyDiscountGroupsKeyByKeyRequestBuilder = ByProjectKeyDiscountGroupsKeyByKeyRequestBuilder;
exports.ByProjectKeyDiscountGroupsRequestBuilder = ByProjectKeyDiscountGroupsRequestBuilder;
exports.ByProjectKeyExtensionsByIDRequestBuilder = ByProjectKeyExtensionsByIDRequestBuilder;
exports.ByProjectKeyExtensionsKeyByKeyRequestBuilder = ByProjectKeyExtensionsKeyByKeyRequestBuilder;
exports.ByProjectKeyExtensionsRequestBuilder = ByProjectKeyExtensionsRequestBuilder;
exports.ByProjectKeyGraphqlRequestBuilder = ByProjectKeyGraphqlRequestBuilder;
exports.ByProjectKeyInBusinessUnitKeyByBusinessUnitKeyMeCustomersRequestBuilder = ByProjectKeyInBusinessUnitKeyByBusinessUnitKeyMeCustomersRequestBuilder;
exports.ByProjectKeyInBusinessUnitKeyByBusinessUnitKeyMeRequestBuilder = ByProjectKeyInBusinessUnitKeyByBusinessUnitKeyMeRequestBuilder;
exports.ByProjectKeyInBusinessUnitKeyByBusinessUnitKeyRequestBuilder = ByProjectKeyInBusinessUnitKeyByBusinessUnitKeyRequestBuilder;
exports.ByProjectKeyInStoreKeyByStoreKeyBusinessUnitsByBusinessUnitIdAssociatesByAssociateIdRequestBuilder = ByProjectKeyInStoreKeyByStoreKeyBusinessUnitsByBusinessUnitIdAssociatesByAssociateIdRequestBuilder;
exports.ByProjectKeyInStoreKeyByStoreKeyBusinessUnitsByIDRequestBuilder = ByProjectKeyInStoreKeyByStoreKeyBusinessUnitsByIDRequestBuilder;
exports.ByProjectKeyInStoreKeyByStoreKeyBusinessUnitsKeyByKeyAssociatesByAssociateIdRequestBuilder = ByProjectKeyInStoreKeyByStoreKeyBusinessUnitsKeyByKeyAssociatesByAssociateIdRequestBuilder;
exports.ByProjectKeyInStoreKeyByStoreKeyBusinessUnitsKeyByKeyRequestBuilder = ByProjectKeyInStoreKeyByStoreKeyBusinessUnitsKeyByKeyRequestBuilder;
exports.ByProjectKeyInStoreKeyByStoreKeyBusinessUnitsRequestBuilder = ByProjectKeyInStoreKeyByStoreKeyBusinessUnitsRequestBuilder;
exports.ByProjectKeyInStoreKeyByStoreKeyCartDiscountsByIDRequestBuilder = ByProjectKeyInStoreKeyByStoreKeyCartDiscountsByIDRequestBuilder;
exports.ByProjectKeyInStoreKeyByStoreKeyCartDiscountsKeyByKeyRequestBuilder = ByProjectKeyInStoreKeyByStoreKeyCartDiscountsKeyByKeyRequestBuilder;
exports.ByProjectKeyInStoreKeyByStoreKeyCartDiscountsRequestBuilder = ByProjectKeyInStoreKeyByStoreKeyCartDiscountsRequestBuilder;
exports.ByProjectKeyInStoreKeyByStoreKeyCartsByIDRequestBuilder = ByProjectKeyInStoreKeyByStoreKeyCartsByIDRequestBuilder;
exports.ByProjectKeyInStoreKeyByStoreKeyCartsCustomerIdByCustomerIdRequestBuilder = ByProjectKeyInStoreKeyByStoreKeyCartsCustomerIdByCustomerIdRequestBuilder;
exports.ByProjectKeyInStoreKeyByStoreKeyCartsKeyByKeyRequestBuilder = ByProjectKeyInStoreKeyByStoreKeyCartsKeyByKeyRequestBuilder;
exports.ByProjectKeyInStoreKeyByStoreKeyCartsReplicateRequestBuilder = ByProjectKeyInStoreKeyByStoreKeyCartsReplicateRequestBuilder;
exports.ByProjectKeyInStoreKeyByStoreKeyCartsRequestBuilder = ByProjectKeyInStoreKeyByStoreKeyCartsRequestBuilder;
exports.ByProjectKeyInStoreKeyByStoreKeyCustomersByIDRequestBuilder = ByProjectKeyInStoreKeyByStoreKeyCustomersByIDRequestBuilder;
exports.ByProjectKeyInStoreKeyByStoreKeyCustomersEmailConfirmRequestBuilder = ByProjectKeyInStoreKeyByStoreKeyCustomersEmailConfirmRequestBuilder;
exports.ByProjectKeyInStoreKeyByStoreKeyCustomersEmailTokenByEmailTokenRequestBuilder = ByProjectKeyInStoreKeyByStoreKeyCustomersEmailTokenByEmailTokenRequestBuilder;
exports.ByProjectKeyInStoreKeyByStoreKeyCustomersEmailTokenRequestBuilder = ByProjectKeyInStoreKeyByStoreKeyCustomersEmailTokenRequestBuilder;
exports.ByProjectKeyInStoreKeyByStoreKeyCustomersKeyByKeyRequestBuilder = ByProjectKeyInStoreKeyByStoreKeyCustomersKeyByKeyRequestBuilder;
exports.ByProjectKeyInStoreKeyByStoreKeyCustomersPasswordRequestBuilder = ByProjectKeyInStoreKeyByStoreKeyCustomersPasswordRequestBuilder;
exports.ByProjectKeyInStoreKeyByStoreKeyCustomersPasswordResetRequestBuilder = ByProjectKeyInStoreKeyByStoreKeyCustomersPasswordResetRequestBuilder;
exports.ByProjectKeyInStoreKeyByStoreKeyCustomersPasswordTokenByPasswordTokenRequestBuilder = ByProjectKeyInStoreKeyByStoreKeyCustomersPasswordTokenByPasswordTokenRequestBuilder;
exports.ByProjectKeyInStoreKeyByStoreKeyCustomersPasswordTokenRequestBuilder = ByProjectKeyInStoreKeyByStoreKeyCustomersPasswordTokenRequestBuilder;
exports.ByProjectKeyInStoreKeyByStoreKeyCustomersRequestBuilder = ByProjectKeyInStoreKeyByStoreKeyCustomersRequestBuilder;
exports.ByProjectKeyInStoreKeyByStoreKeyLoginRequestBuilder = ByProjectKeyInStoreKeyByStoreKeyLoginRequestBuilder;
exports.ByProjectKeyInStoreKeyByStoreKeyMeActiveCartRequestBuilder = ByProjectKeyInStoreKeyByStoreKeyMeActiveCartRequestBuilder;
exports.ByProjectKeyInStoreKeyByStoreKeyMeCartsByIDRequestBuilder = ByProjectKeyInStoreKeyByStoreKeyMeCartsByIDRequestBuilder;
exports.ByProjectKeyInStoreKeyByStoreKeyMeCartsRequestBuilder = ByProjectKeyInStoreKeyByStoreKeyMeCartsRequestBuilder;
exports.ByProjectKeyInStoreKeyByStoreKeyMeEmailConfirmRequestBuilder = ByProjectKeyInStoreKeyByStoreKeyMeEmailConfirmRequestBuilder;
exports.ByProjectKeyInStoreKeyByStoreKeyMeLoginRequestBuilder = ByProjectKeyInStoreKeyByStoreKeyMeLoginRequestBuilder;
exports.ByProjectKeyInStoreKeyByStoreKeyMeOrdersByIDRequestBuilder = ByProjectKeyInStoreKeyByStoreKeyMeOrdersByIDRequestBuilder;
exports.ByProjectKeyInStoreKeyByStoreKeyMeOrdersRequestBuilder = ByProjectKeyInStoreKeyByStoreKeyMeOrdersRequestBuilder;
exports.ByProjectKeyInStoreKeyByStoreKeyMePasswordRequestBuilder = ByProjectKeyInStoreKeyByStoreKeyMePasswordRequestBuilder;
exports.ByProjectKeyInStoreKeyByStoreKeyMePasswordResetRequestBuilder = ByProjectKeyInStoreKeyByStoreKeyMePasswordResetRequestBuilder;
exports.ByProjectKeyInStoreKeyByStoreKeyMeRequestBuilder = ByProjectKeyInStoreKeyByStoreKeyMeRequestBuilder;
exports.ByProjectKeyInStoreKeyByStoreKeyMeShoppingListsByIDRequestBuilder = ByProjectKeyInStoreKeyByStoreKeyMeShoppingListsByIDRequestBuilder;
exports.ByProjectKeyInStoreKeyByStoreKeyMeShoppingListsKeyByKeyRequestBuilder = ByProjectKeyInStoreKeyByStoreKeyMeShoppingListsKeyByKeyRequestBuilder;
exports.ByProjectKeyInStoreKeyByStoreKeyMeShoppingListsRequestBuilder = ByProjectKeyInStoreKeyByStoreKeyMeShoppingListsRequestBuilder;
exports.ByProjectKeyInStoreKeyByStoreKeyMeSignupRequestBuilder = ByProjectKeyInStoreKeyByStoreKeyMeSignupRequestBuilder;
exports.ByProjectKeyInStoreKeyByStoreKeyOrdersByIDRequestBuilder = ByProjectKeyInStoreKeyByStoreKeyOrdersByIDRequestBuilder;
exports.ByProjectKeyInStoreKeyByStoreKeyOrdersOrderNumberByOrderNumberRequestBuilder = ByProjectKeyInStoreKeyByStoreKeyOrdersOrderNumberByOrderNumberRequestBuilder;
exports.ByProjectKeyInStoreKeyByStoreKeyOrdersQuotesRequestBuilder = ByProjectKeyInStoreKeyByStoreKeyOrdersQuotesRequestBuilder;
exports.ByProjectKeyInStoreKeyByStoreKeyOrdersRequestBuilder = ByProjectKeyInStoreKeyByStoreKeyOrdersRequestBuilder;
exports.ByProjectKeyInStoreKeyByStoreKeyProductProjectionsByIDRequestBuilder = ByProjectKeyInStoreKeyByStoreKeyProductProjectionsByIDRequestBuilder;
exports.ByProjectKeyInStoreKeyByStoreKeyProductProjectionsKeyByKeyRequestBuilder = ByProjectKeyInStoreKeyByStoreKeyProductProjectionsKeyByKeyRequestBuilder;
exports.ByProjectKeyInStoreKeyByStoreKeyProductProjectionsRequestBuilder = ByProjectKeyInStoreKeyByStoreKeyProductProjectionsRequestBuilder;
exports.ByProjectKeyInStoreKeyByStoreKeyProductSelectionAssignmentsRequestBuilder = ByProjectKeyInStoreKeyByStoreKeyProductSelectionAssignmentsRequestBuilder;
exports.ByProjectKeyInStoreKeyByStoreKeyProductTailoringRequestBuilder = ByProjectKeyInStoreKeyByStoreKeyProductTailoringRequestBuilder;
exports.ByProjectKeyInStoreKeyByStoreKeyProductsByProductIDProductTailoringImagesRequestBuilder = ByProjectKeyInStoreKeyByStoreKeyProductsByProductIDProductTailoringImagesRequestBuilder;
exports.ByProjectKeyInStoreKeyByStoreKeyProductsByProductIDProductTailoringRequestBuilder = ByProjectKeyInStoreKeyByStoreKeyProductsByProductIDProductTailoringRequestBuilder;
exports.ByProjectKeyInStoreKeyByStoreKeyProductsByProductIDRequestBuilder = ByProjectKeyInStoreKeyByStoreKeyProductsByProductIDRequestBuilder;
exports.ByProjectKeyInStoreKeyByStoreKeyProductsKeyByProductKeyProductTailoringImagesRequestBuilder = ByProjectKeyInStoreKeyByStoreKeyProductsKeyByProductKeyProductTailoringImagesRequestBuilder;
exports.ByProjectKeyInStoreKeyByStoreKeyProductsKeyByProductKeyProductTailoringRequestBuilder = ByProjectKeyInStoreKeyByStoreKeyProductsKeyByProductKeyProductTailoringRequestBuilder;
exports.ByProjectKeyInStoreKeyByStoreKeyProductsKeyByProductKeyRequestBuilder = ByProjectKeyInStoreKeyByStoreKeyProductsKeyByProductKeyRequestBuilder;
exports.ByProjectKeyInStoreKeyByStoreKeyProductsRequestBuilder = ByProjectKeyInStoreKeyByStoreKeyProductsRequestBuilder;
exports.ByProjectKeyInStoreKeyByStoreKeyQuoteRequestsByIDRequestBuilder = ByProjectKeyInStoreKeyByStoreKeyQuoteRequestsByIDRequestBuilder;
exports.ByProjectKeyInStoreKeyByStoreKeyQuoteRequestsKeyByKeyRequestBuilder = ByProjectKeyInStoreKeyByStoreKeyQuoteRequestsKeyByKeyRequestBuilder;
exports.ByProjectKeyInStoreKeyByStoreKeyQuoteRequestsRequestBuilder = ByProjectKeyInStoreKeyByStoreKeyQuoteRequestsRequestBuilder;
exports.ByProjectKeyInStoreKeyByStoreKeyQuotesByIDRequestBuilder = ByProjectKeyInStoreKeyByStoreKeyQuotesByIDRequestBuilder;
exports.ByProjectKeyInStoreKeyByStoreKeyQuotesKeyByKeyRequestBuilder = ByProjectKeyInStoreKeyByStoreKeyQuotesKeyByKeyRequestBuilder;
exports.ByProjectKeyInStoreKeyByStoreKeyQuotesRequestBuilder = ByProjectKeyInStoreKeyByStoreKeyQuotesRequestBuilder;
exports.ByProjectKeyInStoreKeyByStoreKeyRequestBuilder = ByProjectKeyInStoreKeyByStoreKeyRequestBuilder;
exports.ByProjectKeyInStoreKeyByStoreKeyShippingMethodsMatchingCartRequestBuilder = ByProjectKeyInStoreKeyByStoreKeyShippingMethodsMatchingCartRequestBuilder;
exports.ByProjectKeyInStoreKeyByStoreKeyShippingMethodsRequestBuilder = ByProjectKeyInStoreKeyByStoreKeyShippingMethodsRequestBuilder;
exports.ByProjectKeyInStoreKeyByStoreKeyShoppingListsByIDRequestBuilder = ByProjectKeyInStoreKeyByStoreKeyShoppingListsByIDRequestBuilder;
exports.ByProjectKeyInStoreKeyByStoreKeyShoppingListsKeyByKeyRequestBuilder = ByProjectKeyInStoreKeyByStoreKeyShoppingListsKeyByKeyRequestBuilder;
exports.ByProjectKeyInStoreKeyByStoreKeyShoppingListsRequestBuilder = ByProjectKeyInStoreKeyByStoreKeyShoppingListsRequestBuilder;
exports.ByProjectKeyInStoreKeyByStoreKeyStagedQuotesByIDRequestBuilder = ByProjectKeyInStoreKeyByStoreKeyStagedQuotesByIDRequestBuilder;
exports.ByProjectKeyInStoreKeyByStoreKeyStagedQuotesKeyByKeyRequestBuilder = ByProjectKeyInStoreKeyByStoreKeyStagedQuotesKeyByKeyRequestBuilder;
exports.ByProjectKeyInStoreKeyByStoreKeyStagedQuotesRequestBuilder = ByProjectKeyInStoreKeyByStoreKeyStagedQuotesRequestBuilder;
exports.ByProjectKeyInventoryByIDRequestBuilder = ByProjectKeyInventoryByIDRequestBuilder;
exports.ByProjectKeyInventoryKeyByKeyRequestBuilder = ByProjectKeyInventoryKeyByKeyRequestBuilder;
exports.ByProjectKeyInventoryRequestBuilder = ByProjectKeyInventoryRequestBuilder;
exports.ByProjectKeyLoginRequestBuilder = ByProjectKeyLoginRequestBuilder;
exports.ByProjectKeyMeActiveCartRequestBuilder = ByProjectKeyMeActiveCartRequestBuilder;
exports.ByProjectKeyMeBusinessUnitsByIDRequestBuilder = ByProjectKeyMeBusinessUnitsByIDRequestBuilder;
exports.ByProjectKeyMeBusinessUnitsKeyByKeyRequestBuilder = ByProjectKeyMeBusinessUnitsKeyByKeyRequestBuilder;
exports.ByProjectKeyMeBusinessUnitsRequestBuilder = ByProjectKeyMeBusinessUnitsRequestBuilder;
exports.ByProjectKeyMeCartsByIDRequestBuilder = ByProjectKeyMeCartsByIDRequestBuilder;
exports.ByProjectKeyMeCartsReplicateRequestBuilder = ByProjectKeyMeCartsReplicateRequestBuilder;
exports.ByProjectKeyMeCartsRequestBuilder = ByProjectKeyMeCartsRequestBuilder;
exports.ByProjectKeyMeEmailConfirmRequestBuilder = ByProjectKeyMeEmailConfirmRequestBuilder;
exports.ByProjectKeyMeLoginRequestBuilder = ByProjectKeyMeLoginRequestBuilder;
exports.ByProjectKeyMeOrdersByIDRequestBuilder = ByProjectKeyMeOrdersByIDRequestBuilder;
exports.ByProjectKeyMeOrdersQuotesRequestBuilder = ByProjectKeyMeOrdersQuotesRequestBuilder;
exports.ByProjectKeyMeOrdersRequestBuilder = ByProjectKeyMeOrdersRequestBuilder;
exports.ByProjectKeyMePasswordRequestBuilder = ByProjectKeyMePasswordRequestBuilder;
exports.ByProjectKeyMePasswordResetRequestBuilder = ByProjectKeyMePasswordResetRequestBuilder;
exports.ByProjectKeyMePaymentsByIDRequestBuilder = ByProjectKeyMePaymentsByIDRequestBuilder;
exports.ByProjectKeyMePaymentsRequestBuilder = ByProjectKeyMePaymentsRequestBuilder;
exports.ByProjectKeyMeQuoteRequestsByIDRequestBuilder = ByProjectKeyMeQuoteRequestsByIDRequestBuilder;
exports.ByProjectKeyMeQuoteRequestsKeyByKeyRequestBuilder = ByProjectKeyMeQuoteRequestsKeyByKeyRequestBuilder;
exports.ByProjectKeyMeQuoteRequestsRequestBuilder = ByProjectKeyMeQuoteRequestsRequestBuilder;
exports.ByProjectKeyMeQuotesByIDRequestBuilder = ByProjectKeyMeQuotesByIDRequestBuilder;
exports.ByProjectKeyMeQuotesKeyByKeyRequestBuilder = ByProjectKeyMeQuotesKeyByKeyRequestBuilder;
exports.ByProjectKeyMeQuotesRequestBuilder = ByProjectKeyMeQuotesRequestBuilder;
exports.ByProjectKeyMeRequestBuilder = ByProjectKeyMeRequestBuilder;
exports.ByProjectKeyMeShoppingListsByIDRequestBuilder = ByProjectKeyMeShoppingListsByIDRequestBuilder;
exports.ByProjectKeyMeShoppingListsKeyByKeyRequestBuilder = ByProjectKeyMeShoppingListsKeyByKeyRequestBuilder;
exports.ByProjectKeyMeShoppingListsRequestBuilder = ByProjectKeyMeShoppingListsRequestBuilder;
exports.ByProjectKeyMeSignupRequestBuilder = ByProjectKeyMeSignupRequestBuilder;
exports.ByProjectKeyMessagesByIDRequestBuilder = ByProjectKeyMessagesByIDRequestBuilder;
exports.ByProjectKeyMessagesRequestBuilder = ByProjectKeyMessagesRequestBuilder;
exports.ByProjectKeyOrdersByIDRequestBuilder = ByProjectKeyOrdersByIDRequestBuilder;
exports.ByProjectKeyOrdersEditsByIDApplyRequestBuilder = ByProjectKeyOrdersEditsByIDApplyRequestBuilder;
exports.ByProjectKeyOrdersEditsByIDRequestBuilder = ByProjectKeyOrdersEditsByIDRequestBuilder;
exports.ByProjectKeyOrdersEditsKeyByKeyRequestBuilder = ByProjectKeyOrdersEditsKeyByKeyRequestBuilder;
exports.ByProjectKeyOrdersEditsRequestBuilder = ByProjectKeyOrdersEditsRequestBuilder;
exports.ByProjectKeyOrdersImportRequestBuilder = ByProjectKeyOrdersImportRequestBuilder;
exports.ByProjectKeyOrdersOrderNumberByOrderNumberRequestBuilder = ByProjectKeyOrdersOrderNumberByOrderNumberRequestBuilder;
exports.ByProjectKeyOrdersQuotesRequestBuilder = ByProjectKeyOrdersQuotesRequestBuilder;
exports.ByProjectKeyOrdersRequestBuilder = ByProjectKeyOrdersRequestBuilder;
exports.ByProjectKeyOrdersSearchRequestBuilder = ByProjectKeyOrdersSearchRequestBuilder;
exports.ByProjectKeyPaymentMethodsByIDRequestBuilder = ByProjectKeyPaymentMethodsByIDRequestBuilder;
exports.ByProjectKeyPaymentMethodsKeyByKeyRequestBuilder = ByProjectKeyPaymentMethodsKeyByKeyRequestBuilder;
exports.ByProjectKeyPaymentMethodsRequestBuilder = ByProjectKeyPaymentMethodsRequestBuilder;
exports.ByProjectKeyPaymentsByIDRequestBuilder = ByProjectKeyPaymentsByIDRequestBuilder;
exports.ByProjectKeyPaymentsKeyByKeyRequestBuilder = ByProjectKeyPaymentsKeyByKeyRequestBuilder;
exports.ByProjectKeyPaymentsRequestBuilder = ByProjectKeyPaymentsRequestBuilder;
exports.ByProjectKeyProductDiscountsByIDRequestBuilder = ByProjectKeyProductDiscountsByIDRequestBuilder;
exports.ByProjectKeyProductDiscountsKeyByKeyRequestBuilder = ByProjectKeyProductDiscountsKeyByKeyRequestBuilder;
exports.ByProjectKeyProductDiscountsMatchingRequestBuilder = ByProjectKeyProductDiscountsMatchingRequestBuilder;
exports.ByProjectKeyProductDiscountsRequestBuilder = ByProjectKeyProductDiscountsRequestBuilder;
exports.ByProjectKeyProductProjectionsByIDRequestBuilder = ByProjectKeyProductProjectionsByIDRequestBuilder;
exports.ByProjectKeyProductProjectionsKeyByKeyRequestBuilder = ByProjectKeyProductProjectionsKeyByKeyRequestBuilder;
exports.ByProjectKeyProductProjectionsRequestBuilder = ByProjectKeyProductProjectionsRequestBuilder;
exports.ByProjectKeyProductProjectionsSearchRequestBuilder = ByProjectKeyProductProjectionsSearchRequestBuilder;
exports.ByProjectKeyProductProjectionsSuggestRequestBuilder = ByProjectKeyProductProjectionsSuggestRequestBuilder;
exports.ByProjectKeyProductSelectionsByIDProductsRequestBuilder = ByProjectKeyProductSelectionsByIDProductsRequestBuilder;
exports.ByProjectKeyProductSelectionsByIDRequestBuilder = ByProjectKeyProductSelectionsByIDRequestBuilder;
exports.ByProjectKeyProductSelectionsKeyByKeyProductsRequestBuilder = ByProjectKeyProductSelectionsKeyByKeyProductsRequestBuilder;
exports.ByProjectKeyProductSelectionsKeyByKeyRequestBuilder = ByProjectKeyProductSelectionsKeyByKeyRequestBuilder;
exports.ByProjectKeyProductSelectionsRequestBuilder = ByProjectKeyProductSelectionsRequestBuilder;
exports.ByProjectKeyProductTailoringByIDRequestBuilder = ByProjectKeyProductTailoringByIDRequestBuilder;
exports.ByProjectKeyProductTailoringKeyByKeyRequestBuilder = ByProjectKeyProductTailoringKeyByKeyRequestBuilder;
exports.ByProjectKeyProductTailoringRequestBuilder = ByProjectKeyProductTailoringRequestBuilder;
exports.ByProjectKeyProductTypesByIDRequestBuilder = ByProjectKeyProductTypesByIDRequestBuilder;
exports.ByProjectKeyProductTypesKeyByKeyRequestBuilder = ByProjectKeyProductTypesKeyByKeyRequestBuilder;
exports.ByProjectKeyProductTypesRequestBuilder = ByProjectKeyProductTypesRequestBuilder;
exports.ByProjectKeyProductsByIDImagesRequestBuilder = ByProjectKeyProductsByIDImagesRequestBuilder;
exports.ByProjectKeyProductsByIDProductSelectionsRequestBuilder = ByProjectKeyProductsByIDProductSelectionsRequestBuilder;
exports.ByProjectKeyProductsByIDRequestBuilder = ByProjectKeyProductsByIDRequestBuilder;
exports.ByProjectKeyProductsKeyByKeyProductSelectionsRequestBuilder = ByProjectKeyProductsKeyByKeyProductSelectionsRequestBuilder;
exports.ByProjectKeyProductsKeyByKeyRequestBuilder = ByProjectKeyProductsKeyByKeyRequestBuilder;
exports.ByProjectKeyProductsRequestBuilder = ByProjectKeyProductsRequestBuilder;
exports.ByProjectKeyProductsSearchRequestBuilder = ByProjectKeyProductsSearchRequestBuilder;
exports.ByProjectKeyQuoteRequestsByIDRequestBuilder = ByProjectKeyQuoteRequestsByIDRequestBuilder;
exports.ByProjectKeyQuoteRequestsKeyByKeyRequestBuilder = ByProjectKeyQuoteRequestsKeyByKeyRequestBuilder;
exports.ByProjectKeyQuoteRequestsRequestBuilder = ByProjectKeyQuoteRequestsRequestBuilder;
exports.ByProjectKeyQuotesByIDRequestBuilder = ByProjectKeyQuotesByIDRequestBuilder;
exports.ByProjectKeyQuotesKeyByKeyRequestBuilder = ByProjectKeyQuotesKeyByKeyRequestBuilder;
exports.ByProjectKeyQuotesRequestBuilder = ByProjectKeyQuotesRequestBuilder;
exports.ByProjectKeyRecurrencePoliciesByIDRequestBuilder = ByProjectKeyRecurrencePoliciesByIDRequestBuilder;
exports.ByProjectKeyRecurrencePoliciesKeyByKeyRequestBuilder = ByProjectKeyRecurrencePoliciesKeyByKeyRequestBuilder;
exports.ByProjectKeyRecurrencePoliciesRequestBuilder = ByProjectKeyRecurrencePoliciesRequestBuilder;
exports.ByProjectKeyRecurringOrdersByIDRequestBuilder = ByProjectKeyRecurringOrdersByIDRequestBuilder;
exports.ByProjectKeyRecurringOrdersKeyByKeyRequestBuilder = ByProjectKeyRecurringOrdersKeyByKeyRequestBuilder;
exports.ByProjectKeyRecurringOrdersRequestBuilder = ByProjectKeyRecurringOrdersRequestBuilder;
exports.ByProjectKeyRequestBuilder = ByProjectKeyRequestBuilder;
exports.ByProjectKeyReviewsByIDRequestBuilder = ByProjectKeyReviewsByIDRequestBuilder;
exports.ByProjectKeyReviewsKeyByKeyRequestBuilder = ByProjectKeyReviewsKeyByKeyRequestBuilder;
exports.ByProjectKeyReviewsRequestBuilder = ByProjectKeyReviewsRequestBuilder;
exports.ByProjectKeyShippingMethodsByIDRequestBuilder = ByProjectKeyShippingMethodsByIDRequestBuilder;
exports.ByProjectKeyShippingMethodsKeyByKeyRequestBuilder = ByProjectKeyShippingMethodsKeyByKeyRequestBuilder;
exports.ByProjectKeyShippingMethodsMatchingCartLocationRequestBuilder = ByProjectKeyShippingMethodsMatchingCartLocationRequestBuilder;
exports.ByProjectKeyShippingMethodsMatchingCartRequestBuilder = ByProjectKeyShippingMethodsMatchingCartRequestBuilder;
exports.ByProjectKeyShippingMethodsMatchingLocationRequestBuilder = ByProjectKeyShippingMethodsMatchingLocationRequestBuilder;
exports.ByProjectKeyShippingMethodsMatchingOrdereditRequestBuilder = ByProjectKeyShippingMethodsMatchingOrdereditRequestBuilder;
exports.ByProjectKeyShippingMethodsRequestBuilder = ByProjectKeyShippingMethodsRequestBuilder;
exports.ByProjectKeyShoppingListsByIDRequestBuilder = ByProjectKeyShoppingListsByIDRequestBuilder;
exports.ByProjectKeyShoppingListsKeyByKeyRequestBuilder = ByProjectKeyShoppingListsKeyByKeyRequestBuilder;
exports.ByProjectKeyShoppingListsRequestBuilder = ByProjectKeyShoppingListsRequestBuilder;
exports.ByProjectKeyStagedQuotesByIDRequestBuilder = ByProjectKeyStagedQuotesByIDRequestBuilder;
exports.ByProjectKeyStagedQuotesKeyByKeyRequestBuilder = ByProjectKeyStagedQuotesKeyByKeyRequestBuilder;
exports.ByProjectKeyStagedQuotesRequestBuilder = ByProjectKeyStagedQuotesRequestBuilder;
exports.ByProjectKeyStandalonePricesByIDRequestBuilder = ByProjectKeyStandalonePricesByIDRequestBuilder;
exports.ByProjectKeyStandalonePricesKeyByKeyRequestBuilder = ByProjectKeyStandalonePricesKeyByKeyRequestBuilder;
exports.ByProjectKeyStandalonePricesRequestBuilder = ByProjectKeyStandalonePricesRequestBuilder;
exports.ByProjectKeyStatesByIDRequestBuilder = ByProjectKeyStatesByIDRequestBuilder;
exports.ByProjectKeyStatesKeyByKeyRequestBuilder = ByProjectKeyStatesKeyByKeyRequestBuilder;
exports.ByProjectKeyStatesRequestBuilder = ByProjectKeyStatesRequestBuilder;
exports.ByProjectKeyStoresByIDRequestBuilder = ByProjectKeyStoresByIDRequestBuilder;
exports.ByProjectKeyStoresKeyByKeyRequestBuilder = ByProjectKeyStoresKeyByKeyRequestBuilder;
exports.ByProjectKeyStoresRequestBuilder = ByProjectKeyStoresRequestBuilder;
exports.ByProjectKeySubscriptionsByIDHealthRequestBuilder = ByProjectKeySubscriptionsByIDHealthRequestBuilder;
exports.ByProjectKeySubscriptionsByIDRequestBuilder = ByProjectKeySubscriptionsByIDRequestBuilder;
exports.ByProjectKeySubscriptionsKeyByKeyRequestBuilder = ByProjectKeySubscriptionsKeyByKeyRequestBuilder;
exports.ByProjectKeySubscriptionsRequestBuilder = ByProjectKeySubscriptionsRequestBuilder;
exports.ByProjectKeyTaxCategoriesByIDRequestBuilder = ByProjectKeyTaxCategoriesByIDRequestBuilder;
exports.ByProjectKeyTaxCategoriesKeyByKeyRequestBuilder = ByProjectKeyTaxCategoriesKeyByKeyRequestBuilder;
exports.ByProjectKeyTaxCategoriesRequestBuilder = ByProjectKeyTaxCategoriesRequestBuilder;
exports.ByProjectKeyTypesByIDRequestBuilder = ByProjectKeyTypesByIDRequestBuilder;
exports.ByProjectKeyTypesKeyByKeyRequestBuilder = ByProjectKeyTypesKeyByKeyRequestBuilder;
exports.ByProjectKeyTypesRequestBuilder = ByProjectKeyTypesRequestBuilder;
exports.ByProjectKeyZonesByIDRequestBuilder = ByProjectKeyZonesByIDRequestBuilder;
exports.ByProjectKeyZonesKeyByKeyRequestBuilder = ByProjectKeyZonesKeyByKeyRequestBuilder;
exports.ByProjectKeyZonesRequestBuilder = ByProjectKeyZonesRequestBuilder;
exports.CartOriginValues = CartOriginValues;
exports.CartStateValues = CartStateValues;
exports.ChangeSubscriptionResourceTypeIdValues = ChangeSubscriptionResourceTypeIdValues;
exports.ChannelRoleEnumValues = ChannelRoleEnumValues;
exports.CustomFieldReferenceValueValues = CustomFieldReferenceValueValues;
exports.CustomLineItemPriceModeValues = CustomLineItemPriceModeValues;
exports.CustomerIndexingStatusValues = CustomerIndexingStatusValues;
exports.CustomerSearchStatusValues = CustomerSearchStatusValues;
exports.DiscountApplicationModeValues = DiscountApplicationModeValues;
exports.DiscountCodeStateValues = DiscountCodeStateValues;
exports.EventSubscriptionResourceTypeIdValues = EventSubscriptionResourceTypeIdValues;
exports.EventTypeValues = EventTypeValues;
exports.ExtensionActionValues = ExtensionActionValues;
exports.ExtensionResourceTypeIdValues = ExtensionResourceTypeIdValues;
exports.FacetTypesValues = FacetTypesValues;
exports.IntervalUnitValues = IntervalUnitValues;
exports.InventoryModeValues = InventoryModeValues;
exports.LineItemModeValues = LineItemModeValues;
exports.LineItemPriceModeValues = LineItemPriceModeValues;
exports.MessageSubscriptionResourceTypeIdValues = MessageSubscriptionResourceTypeIdValues;
exports.MoneyTypeValues = MoneyTypeValues;
exports.MyQuoteStateValues = MyQuoteStateValues;
exports.OrderSearchCustomTypeValues = OrderSearchCustomTypeValues;
exports.OrderSearchMatchTypeValues = OrderSearchMatchTypeValues;
exports.OrderSearchSortModeValues = OrderSearchSortModeValues;
exports.OrderSearchSortOrderValues = OrderSearchSortOrderValues;
exports.OrderSearchStatusValues = OrderSearchStatusValues;
exports.OrderStateValues = OrderStateValues;
exports.PaymentMethodStatusValues = PaymentMethodStatusValues;
exports.PaymentStateValues = PaymentStateValues;
exports.PermissionValues = PermissionValues;
exports.PriceSelectionModeValues = PriceSelectionModeValues;
exports.ProductPriceModeEnumValues = ProductPriceModeEnumValues;
exports.ProductPublishScopeValues = ProductPublishScopeValues;
exports.ProductSearchFacetCountLevelEnumValues = ProductSearchFacetCountLevelEnumValues;
exports.ProductSearchFacetDistinctBucketSortByValues = ProductSearchFacetDistinctBucketSortByValues;
exports.ProductSearchFacetScopeEnumValues = ProductSearchFacetScopeEnumValues;
exports.ProductSearchIndexingModeValues = ProductSearchIndexingModeValues;
exports.ProductSelectionModeValues = ProductSelectionModeValues;
exports.ProductVariantSelectionTypeEnumValues = ProductVariantSelectionTypeEnumValues;
exports.QuoteRequestStateValues = QuoteRequestStateValues;
exports.QuoteStateValues = QuoteStateValues;
exports.RecurringOrderStateValues = RecurringOrderStateValues;
exports.ReferenceTypeIdValues = ReferenceTypeIdValues;
exports.ResourceTypeIdValues = ResourceTypeIdValues;
exports.ReturnPaymentStateValues = ReturnPaymentStateValues;
exports.ReturnShipmentStateValues = ReturnShipmentStateValues;
exports.RoundingModeValues = RoundingModeValues;
exports.SearchFieldTypeValues = SearchFieldTypeValues;
exports.SearchIndexingConfigurationStatusValues = SearchIndexingConfigurationStatusValues;
exports.SearchMatchTypeValues = SearchMatchTypeValues;
exports.SearchSortModeValues = SearchSortModeValues;
exports.SearchSortOrderValues = SearchSortOrderValues;
exports.SelectionModeValues = SelectionModeValues;
exports.ShipmentStateValues = ShipmentStateValues;
exports.ShippingMethodStateValues = ShippingMethodStateValues;
exports.ShippingModeValues = ShippingModeValues;
exports.ShippingRateTierTypeValues = ShippingRateTierTypeValues;
exports.StackingModeValues = StackingModeValues;
exports.StagedQuoteStateValues = StagedQuoteStateValues;
exports.StateRoleEnumValues = StateRoleEnumValues;
exports.StateTypeEnumValues = StateTypeEnumValues;
exports.SubscriptionHealthStatusValues = SubscriptionHealthStatusValues;
exports.TaxCalculationModeValues = TaxCalculationModeValues;
exports.TaxModeValues = TaxModeValues;
exports.TermFacetResultTypeValues = TermFacetResultTypeValues;
exports.TextInputHintValues = TextInputHintValues;
exports.TransactionStateValues = TransactionStateValues;
exports.TransactionTypeValues = TransactionTypeValues;
exports.TypeTextInputHintValues = TypeTextInputHintValues;
exports.buildRelativeUri = buildRelativeUri;
exports.createApiBuilderFromCtpClient = createApiBuilderFromCtpClient;
exports.createExecutorFromMiddlewares = createExecutorFromMiddlewares;
